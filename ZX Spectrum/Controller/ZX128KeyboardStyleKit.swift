//
//  ZX128KeyboardStyleKit.swift
//  ZX Spectrum Emulator
//
//  Created by Tomaz Kragelj on 12.05.17.
//  Copyright Â© 2017 Gentle Bytes. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ZX128KeyboardStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let keyboardBackgroundColor: UIColor = UIColor(red: 0.176, green: 0.176, blue: 0.176, alpha: 1.000)
    }

    //// Colors

    public dynamic class var keyboardBackgroundColor: UIColor { return Cache.keyboardBackgroundColor }

    //// Drawing Methods

    public dynamic class func drawKeyboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 2048, height: 756), resizing: ResizingBehavior = .aspectFit, smallFontSize: CGFloat = 24.5, mainFontSize: CGFloat = 40, shiftFontSize: CGFloat = 32) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 2048, height: 756), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 2048, y: resizedFrame.height / 756)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 2048, resizedFrame.height / 756)


        //// Color Declarations
        let buttonBackgroundColor = UIColor(red: 0.314, green: 0.314, blue: 0.314, alpha: 1.000)
        let buttonBackgroundLightColor = buttonBackgroundColor.withBrightness(0.443)
        let buttonTouchBackgroundColor = UIColor(red: 0.208, green: 0.208, blue: 0.208, alpha: 1.000)
        let buttonTouchBackgroundLightColor = buttonTouchBackgroundColor.withBrightness(0.443)
        let buttonTextColor = UIColor(red: 0.932, green: 0.932, blue: 0.932, alpha: 1.000)

        //// Gradient Declarations
        let buttonBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonBackgroundColor.cgColor, buttonBackgroundColor.blended(withFraction: 0.5, of: buttonBackgroundLightColor).cgColor, buttonBackgroundLightColor.cgColor] as CFArray, locations: [0, 0.73, 1])!
        let buttonTouchBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonTouchBackgroundColor.cgColor, buttonTouchBackgroundLightColor.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let buttonTouchShadow = NSShadow()
        buttonTouchShadow.shadowColor = UIColor.black
        buttonTouchShadow.shadowOffset = CGSize(width: 0, height: 0)
        buttonTouchShadow.shadowBlurRadius = 11
        let buttonTextShadow = NSShadow()
        buttonTextShadow.shadowColor = UIColor.black
        buttonTextShadow.shadowOffset = CGSize(width: 0, height: 0)
        buttonTextShadow.shadowBlurRadius = 7

        //// Keyboard Background Drawing
        let keyboardBackgroundPath = UIBezierPath(rect: CGRect(x: 0, y: -0, width: 2048, height: 756))
        ZX128KeyboardStyleKit.keyboardBackgroundColor.setFill()
        keyboardBackgroundPath.fill()


        //// Enter
        //// Button Enter Drawing
        let buttonEnterPath = UIBezierPath()
        buttonEnterPath.move(to: CGPoint(x: 2040.32, y: 155.26))
        buttonEnterPath.addLine(to: CGPoint(x: 2040.47, y: 155.3))
        buttonEnterPath.addCurve(to: CGPoint(x: 2042.7, y: 157.53), controlPoint1: CGPoint(x: 2041.51, y: 155.68), controlPoint2: CGPoint(x: 2042.32, y: 156.49))
        buttonEnterPath.addCurve(to: CGPoint(x: 2043, y: 161.11), controlPoint1: CGPoint(x: 2043, y: 158.47), controlPoint2: CGPoint(x: 2043, y: 159.35))
        buttonEnterPath.addLine(to: CGPoint(x: 2043, y: 441.89))
        buttonEnterPath.addCurve(to: CGPoint(x: 2042.74, y: 445.32), controlPoint1: CGPoint(x: 2043, y: 443.65), controlPoint2: CGPoint(x: 2043, y: 444.53))
        buttonEnterPath.addLine(to: CGPoint(x: 2042.7, y: 445.47))
        buttonEnterPath.addCurve(to: CGPoint(x: 2040.47, y: 447.7), controlPoint1: CGPoint(x: 2042.32, y: 446.51), controlPoint2: CGPoint(x: 2041.51, y: 447.32))
        buttonEnterPath.addCurve(to: CGPoint(x: 2036.89, y: 448), controlPoint1: CGPoint(x: 2039.53, y: 448), controlPoint2: CGPoint(x: 2038.65, y: 448))
        buttonEnterPath.addLine(to: CGPoint(x: 1792.11, y: 448))
        buttonEnterPath.addCurve(to: CGPoint(x: 1788.68, y: 447.74), controlPoint1: CGPoint(x: 1790.35, y: 448), controlPoint2: CGPoint(x: 1789.47, y: 448))
        buttonEnterPath.addLine(to: CGPoint(x: 1788.53, y: 447.7))
        buttonEnterPath.addCurve(to: CGPoint(x: 1786.3, y: 445.47), controlPoint1: CGPoint(x: 1787.49, y: 447.32), controlPoint2: CGPoint(x: 1786.68, y: 446.51))
        buttonEnterPath.addCurve(to: CGPoint(x: 1786, y: 441.89), controlPoint1: CGPoint(x: 1786, y: 444.53), controlPoint2: CGPoint(x: 1786, y: 443.65))
        buttonEnterPath.addLine(to: CGPoint(x: 1786, y: 312.11))
        buttonEnterPath.addCurve(to: CGPoint(x: 1786.26, y: 308.68), controlPoint1: CGPoint(x: 1786, y: 310.35), controlPoint2: CGPoint(x: 1786, y: 309.47))
        buttonEnterPath.addLine(to: CGPoint(x: 1786.3, y: 308.53))
        buttonEnterPath.addCurve(to: CGPoint(x: 1788.53, y: 306.3), controlPoint1: CGPoint(x: 1786.68, y: 307.49), controlPoint2: CGPoint(x: 1787.49, y: 306.68))
        buttonEnterPath.addCurve(to: CGPoint(x: 1792.11, y: 306), controlPoint1: CGPoint(x: 1789.47, y: 306), controlPoint2: CGPoint(x: 1790.35, y: 306))
        buttonEnterPath.addLine(to: CGPoint(x: 1901, y: 306))
        buttonEnterPath.addCurve(to: CGPoint(x: 1901, y: 161.11), controlPoint1: CGPoint(x: 1901, y: 234.34), controlPoint2: CGPoint(x: 1901, y: 161.11))
        buttonEnterPath.addCurve(to: CGPoint(x: 1901.26, y: 157.68), controlPoint1: CGPoint(x: 1901, y: 159.35), controlPoint2: CGPoint(x: 1901, y: 158.47))
        buttonEnterPath.addLine(to: CGPoint(x: 1901.3, y: 157.53))
        buttonEnterPath.addCurve(to: CGPoint(x: 1903.53, y: 155.3), controlPoint1: CGPoint(x: 1901.68, y: 156.49), controlPoint2: CGPoint(x: 1902.49, y: 155.68))
        buttonEnterPath.addCurve(to: CGPoint(x: 1907.11, y: 155), controlPoint1: CGPoint(x: 1904.47, y: 155), controlPoint2: CGPoint(x: 1905.35, y: 155))
        buttonEnterPath.addLine(to: CGPoint(x: 2036.89, y: 155))
        buttonEnterPath.addCurve(to: CGPoint(x: 2040.32, y: 155.26), controlPoint1: CGPoint(x: 2038.65, y: 155), controlPoint2: CGPoint(x: 2039.53, y: 155))
        buttonEnterPath.close()
        context.saveGState()
        buttonEnterPath.addClip()
        context.drawLinearGradient(buttonBackgroundGradient, start: CGPoint(x: 2079.58, y: 193.92), end: CGPoint(x: 1806.92, y: 466.58), options: [])
        context.restoreGState()


        //// Background Ennter Drawing
        let backgroundEnnterPath = UIBezierPath()
        backgroundEnnterPath.move(to: CGPoint(x: 2018, y: 201))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 2031, y: 225), controlPoint1: CGPoint(x: 2018, y: 201), controlPoint2: CGPoint(x: 2030, y: 208))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 2031, y: 390), controlPoint1: CGPoint(x: 2032, y: 242), controlPoint2: CGPoint(x: 2031, y: 390))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 2031, y: 394), controlPoint1: CGPoint(x: 2031, y: 390), controlPoint2: CGPoint(x: 2031, y: 369))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1984, y: 445), controlPoint1: CGPoint(x: 2031, y: 419), controlPoint2: CGPoint(x: 1999, y: 445))
        backgroundEnnterPath.addLine(to: CGPoint(x: 1858.53, y: 445))
        backgroundEnnterPath.addLine(to: CGPoint(x: 1855, y: 445))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1831.94, y: 438.64), controlPoint1: CGPoint(x: 1846.73, y: 444.41), controlPoint2: CGPoint(x: 1838.93, y: 442.21))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1800, y: 386.5), controlPoint1: CGPoint(x: 1812.98, y: 428.96), controlPoint2: CGPoint(x: 1800, y: 409.24))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1810.24, y: 353.42), controlPoint1: CGPoint(x: 1800, y: 374.22), controlPoint2: CGPoint(x: 1803.78, y: 362.83))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1811.25, y: 351.99), controlPoint1: CGPoint(x: 1810.57, y: 352.94), controlPoint2: CGPoint(x: 1811.25, y: 351.99))
        backgroundEnnterPath.addLine(to: CGPoint(x: 1858.5, y: 352))
        backgroundEnnterPath.addLine(to: CGPoint(x: 1915, y: 352))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1915, y: 224), controlPoint1: CGPoint(x: 1915, y: 295.73), controlPoint2: CGPoint(x: 1915, y: 233.1))
        backgroundEnnterPath.addCurve(to: CGPoint(x: 1924, y: 201), controlPoint1: CGPoint(x: 1915, y: 207), controlPoint2: CGPoint(x: 1924, y: 201))
        backgroundEnnterPath.addLine(to: CGPoint(x: 2018, y: 201))
        backgroundEnnterPath.addLine(to: CGPoint(x: 2018, y: 201))
        backgroundEnnterPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTouchShadow.shadowOffset.width * resizedShadowScale, height: buttonTouchShadow.shadowOffset.height * resizedShadowScale), blur: buttonTouchShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTouchShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        backgroundEnnterPath.addClip()
        context.drawLinearGradient(buttonTouchBackgroundGradient, start: CGPoint(x: 1813.46, y: 424.18), end: CGPoint(x: 2057.09, y: 253.58), options: [])
        context.endTransparencyLayer()
        context.restoreGState()



        //// Button Text Enter Drawing
        let buttonTextEnterRect = CGRect(x: 1800, y: 374, width: 231, height: 23)
        let buttonTextEnterTextContent = "ENTER"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTextEnterStyle = NSMutableParagraphStyle()
        buttonTextEnterStyle.alignment = .center
        let buttonTextEnterFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTextEnterStyle]

        let buttonTextEnterTextHeight: CGFloat = buttonTextEnterTextContent.boundingRect(with: CGSize(width: buttonTextEnterRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTextEnterFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTextEnterRect)
        buttonTextEnterTextContent.draw(in: CGRect(x: buttonTextEnterRect.minX, y: buttonTextEnterRect.minY + (buttonTextEnterRect.height - buttonTextEnterTextHeight) / 2, width: buttonTextEnterRect.width, height: buttonTextEnterTextHeight), withAttributes: buttonTextEnterFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Row 5
        //// Symbol Shift Right
        //// Background Symbol Shift Right Drawing
        let backgroundSymbolShiftRightRect = CGRect(x: 1898, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundSymbolShiftRightRect)
        context.translateBy(x: backgroundSymbolShiftRightRect.minX, y: backgroundSymbolShiftRightRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundSymbolShiftRightRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text Symbol Shift Right Drawing
        let buttonLowerTextSymbolShiftRightRect = CGRect(x: 1919, y: 681, width: 108, height: 23)
        let buttonLowerTextSymbolShiftRightTextContent = "SHIFT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextSymbolShiftRightStyle = NSMutableParagraphStyle()
        buttonLowerTextSymbolShiftRightStyle.alignment = .center
        let buttonLowerTextSymbolShiftRightFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextSymbolShiftRightStyle]

        let buttonLowerTextSymbolShiftRightTextHeight: CGFloat = buttonLowerTextSymbolShiftRightTextContent.boundingRect(with: CGSize(width: buttonLowerTextSymbolShiftRightRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextSymbolShiftRightFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextSymbolShiftRightRect)
        buttonLowerTextSymbolShiftRightTextContent.draw(in: CGRect(x: buttonLowerTextSymbolShiftRightRect.minX, y: buttonLowerTextSymbolShiftRightRect.minY + (buttonLowerTextSymbolShiftRightRect.height - buttonLowerTextSymbolShiftRightTextHeight) / 2, width: buttonLowerTextSymbolShiftRightRect.width, height: buttonLowerTextSymbolShiftRightTextHeight), withAttributes: buttonLowerTextSymbolShiftRightFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text Symbol Shift Right Drawing
        let buttonUpperTextSymbolShiftRightRect = CGRect(x: 1920, y: 660, width: 108, height: 23)
        let buttonUpperTextSymbolShiftRightTextContent = "SYMBOL"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextSymbolShiftRightStyle = NSMutableParagraphStyle()
        buttonUpperTextSymbolShiftRightStyle.alignment = .center
        let buttonUpperTextSymbolShiftRightFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextSymbolShiftRightStyle]

        let buttonUpperTextSymbolShiftRightTextHeight: CGFloat = buttonUpperTextSymbolShiftRightTextContent.boundingRect(with: CGSize(width: buttonUpperTextSymbolShiftRightRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextSymbolShiftRightFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextSymbolShiftRightRect)
        buttonUpperTextSymbolShiftRightTextContent.draw(in: CGRect(x: buttonUpperTextSymbolShiftRightRect.minX, y: buttonUpperTextSymbolShiftRightRect.minY + (buttonUpperTextSymbolShiftRightRect.height - buttonUpperTextSymbolShiftRightTextHeight) / 2, width: buttonUpperTextSymbolShiftRightRect.width, height: buttonUpperTextSymbolShiftRightTextHeight), withAttributes: buttonUpperTextSymbolShiftRightFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Comma
        //// Background Comma Drawing
        let backgroundCommaRect = CGRect(x: 1746, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCommaRect)
        context.translateBy(x: backgroundCommaRect.minX, y: backgroundCommaRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCommaRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Comma Drawing
        let buttonMainCommaRect = CGRect(x: 1796, y: 652, width: 50, height: 59)
        let buttonMainCommaTextContent = ","
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainCommaStyle = NSMutableParagraphStyle()
        buttonMainCommaStyle.alignment = .center
        let buttonMainCommaFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 56)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainCommaStyle]

        let buttonMainCommaTextHeight: CGFloat = buttonMainCommaTextContent.boundingRect(with: CGSize(width: buttonMainCommaRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainCommaFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainCommaRect)
        buttonMainCommaTextContent.draw(in: CGRect(x: buttonMainCommaRect.minX, y: buttonMainCommaRect.minY + (buttonMainCommaRect.height - buttonMainCommaTextHeight) / 2, width: buttonMainCommaRect.width, height: buttonMainCommaTextHeight), withAttributes: buttonMainCommaFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Cursor Down
        //// Background Cursor Down Drawing
        let backgroundCursorDownRect = CGRect(x: 1593, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCursorDownRect)
        context.translateBy(x: backgroundCursorDownRect.minX, y: backgroundCursorDownRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCursorDownRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Cursor Down Drawing
        context.saveGState()
        context.translateBy(x: 1666.21, y: 698)
        context.rotate(by: 90 * CGFloat.pi/180)

        let buttonMainCursorDownPath = UIBezierPath()
        buttonMainCursorDownPath.move(to: CGPoint(x: -28.21, y: 8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -28.21, y: -8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -28.21, y: -9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -27.21, y: -9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.79, y: -9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: -8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: -20))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: -22.41))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.5, y: -20.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 27.5, y: -0.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 28.21, y: 0))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 27.5, y: 0.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.5, y: 20.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: 22.41))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: 20))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 5.79, y: 8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.79, y: 9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -27.21, y: 9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -28.21, y: 9))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -28.21, y: 8))
        buttonMainCursorDownPath.close()
        buttonMainCursorDownPath.move(to: CGPoint(x: -26.21, y: 8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -27.21, y: 7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.79, y: 7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: 7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: 8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: 20))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.09, y: 19.29))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 26.09, y: -0.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 26.09, y: 0.71))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.09, y: -19.29))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: -20))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: -8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 7.79, y: -7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: 6.79, y: -7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -27.21, y: -7))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -26.21, y: -8))
        buttonMainCursorDownPath.addLine(to: CGPoint(x: -26.21, y: 8))
        buttonMainCursorDownPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonMainCursorDownPath.fill()
        context.restoreGState()


        context.restoreGState()




        //// Space
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Background Space Drawing
        let backgroundSpacePath = UIBezierPath(roundedRect: CGRect(x: 762, y: 611, width: 673, height: 142), cornerRadius: 4)
        context.saveGState()
        backgroundSpacePath.addClip()
        context.drawLinearGradient(buttonBackgroundGradient, start: CGPoint(x: 1301.08, y: 479.42), end: CGPoint(x: 895.92, y: 884.58), options: [])
        context.restoreGState()


        //// Button Space 2 Drawing


        //// Button Space Drawing
        context.saveGState()
        context.setBlendMode(.softLight)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let buttonSpacePath = UIBezierPath()
        buttonSpacePath.move(to: CGPoint(x: 1410.68, y: 658))
        buttonSpacePath.addCurve(to: CGPoint(x: 1411.69, y: 659.4), controlPoint1: CGPoint(x: 1410.68, y: 658), controlPoint2: CGPoint(x: 1411.36, y: 658.93))
        buttonSpacePath.addCurve(to: CGPoint(x: 1422, y: 691.76), controlPoint1: CGPoint(x: 1418.2, y: 668.6), controlPoint2: CGPoint(x: 1422, y: 679.75))
        buttonSpacePath.addCurve(to: CGPoint(x: 1366, y: 748.93), controlPoint1: CGPoint(x: 1422, y: 722.44), controlPoint2: CGPoint(x: 1397.18, y: 747.48))
        buttonSpacePath.addCurve(to: CGPoint(x: 832.86, y: 749), controlPoint1: CGPoint(x: 1366, y: 748.93), controlPoint2: CGPoint(x: 874.92, y: 748.99))
        buttonSpacePath.addLine(to: CGPoint(x: 832.75, y: 749))
        buttonSpacePath.addCurve(to: CGPoint(x: 830, y: 749), controlPoint1: CGPoint(x: 830.94, y: 749), controlPoint2: CGPoint(x: 830, y: 749))
        buttonSpacePath.addCurve(to: CGPoint(x: 774.18, y: 696.22), controlPoint1: CGPoint(x: 800.35, y: 747.55), controlPoint2: CGPoint(x: 776.44, y: 724.83))
        buttonSpacePath.addCurve(to: CGPoint(x: 774, y: 691.76), controlPoint1: CGPoint(x: 774.06, y: 694.75), controlPoint2: CGPoint(x: 774, y: 693.26))
        buttonSpacePath.addCurve(to: CGPoint(x: 784.31, y: 659.4), controlPoint1: CGPoint(x: 774, y: 679.75), controlPoint2: CGPoint(x: 777.8, y: 668.6))
        buttonSpacePath.addCurve(to: CGPoint(x: 785.32, y: 658), controlPoint1: CGPoint(x: 784.64, y: 658.93), controlPoint2: CGPoint(x: 785.32, y: 658))
        buttonSpacePath.addCurve(to: CGPoint(x: 1410.66, y: 658), controlPoint1: CGPoint(x: 785.32, y: 658), controlPoint2: CGPoint(x: 1409.77, y: 658))
        buttonSpacePath.addLine(to: CGPoint(x: 1410.68, y: 658))
        buttonSpacePath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTouchShadow.shadowOffset.width * resizedShadowScale, height: buttonTouchShadow.shadowOffset.height * resizedShadowScale), blur: buttonTouchShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTouchShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        buttonSpacePath.addClip()
        context.drawLinearGradient(buttonTouchBackgroundGradient, start: CGPoint(x: 873.12, y: 850.97), end: CGPoint(x: 1324.52, y: 534.9), options: [])
        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Cursor Up
        //// Background Cursor Up Drawing
        let backgroundCursorUpRect = CGRect(x: 1442, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCursorUpRect)
        context.translateBy(x: backgroundCursorUpRect.minX, y: backgroundCursorUpRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCursorUpRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Cursor Up Drawing
        context.saveGState()
        context.translateBy(x: 1515.29, y: 698.5)
        context.rotate(by: 90 * CGFloat.pi/180)

        let buttonMainCursorUpPath = UIBezierPath()
        buttonMainCursorUpPath.move(to: CGPoint(x: 26.21, y: 8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 26.21, y: -8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 27.21, y: -7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.79, y: -7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: -7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: -8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: -20))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.09, y: -19.29))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -26.09, y: 0.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -26.09, y: -0.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.09, y: 19.29))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: 20))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: 8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.79, y: 7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.79, y: 7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 27.21, y: 7))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 26.21, y: 8))
        buttonMainCursorUpPath.close()
        buttonMainCursorUpPath.move(to: CGPoint(x: 28.21, y: 8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 28.21, y: 9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 27.21, y: 9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.79, y: 9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: 8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: 20))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: 22.41))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.5, y: 20.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -27.5, y: 0.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -28.21, y: -0))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -27.5, y: -0.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -7.5, y: -20.71))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: -22.41))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: -20))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -5.79, y: -8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: -6.79, y: -9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 27.21, y: -9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 28.21, y: -9))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 28.21, y: -8))
        buttonMainCursorUpPath.addLine(to: CGPoint(x: 28.21, y: 8))
        buttonMainCursorUpPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonMainCursorUpPath.fill()
        context.restoreGState()


        context.restoreGState()




        //// Cursor Right
        //// Background Cursor Right Drawing
        let backgroundCursorRightRect = CGRect(x: 610, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCursorRightRect)
        context.translateBy(x: backgroundCursorRightRect.minX, y: backgroundCursorRightRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCursorRightRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Cursor Right Drawing
        let buttonMainCursorRightPath = UIBezierPath()
        buttonMainCursorRightPath.move(to: CGPoint(x: 655, y: 706))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 655, y: 690))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 655, y: 689))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 656, y: 689))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690, y: 689))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 690))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 678))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 675.59))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690.71, y: 677.29))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 710.71, y: 697.29))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 711.41, y: 698))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 710.71, y: 698.71))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690.71, y: 718.71))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 720.41))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 718))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689, y: 706))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690, y: 707))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 656, y: 707))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 655, y: 707))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 655, y: 706))
        buttonMainCursorRightPath.close()
        buttonMainCursorRightPath.move(to: CGPoint(x: 657, y: 706))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 656, y: 705))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690, y: 705))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 705))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 706))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 718))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689.29, y: 717.29))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 709.29, y: 697.29))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 709.29, y: 698.71))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 689.29, y: 678.71))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 678))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 690))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 691, y: 691))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 690, y: 691))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 656, y: 691))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 657, y: 690))
        buttonMainCursorRightPath.addLine(to: CGPoint(x: 657, y: 706))
        buttonMainCursorRightPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonMainCursorRightPath.fill()
        context.restoreGState()





        //// Cursor Left
        //// Background Cursor Left Drawing
        let backgroundCursorLeftRect = CGRect(x: 458, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCursorLeftRect)
        context.translateBy(x: backgroundCursorLeftRect.minX, y: backgroundCursorLeftRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCursorLeftRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Cursor Left Drawing
        let buttonMainCursorLeftPath = UIBezierPath()
        buttonMainCursorLeftPath.move(to: CGPoint(x: 557.5, y: 706.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 557.5, y: 690.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 558.5, y: 691.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 524.5, y: 691.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 691.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 690.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 678.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.21, y: 679.21))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 505.21, y: 699.21))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 505.21, y: 697.79))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.21, y: 717.79))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 718.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 706.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.5, y: 705.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 524.5, y: 705.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 558.5, y: 705.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 557.5, y: 706.5))
        buttonMainCursorLeftPath.close()
        buttonMainCursorLeftPath.move(to: CGPoint(x: 559.5, y: 706.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 559.5, y: 707.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 558.5, y: 707.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 524.5, y: 707.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 706.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 718.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 720.91))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.79, y: 719.21))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 503.79, y: 699.21))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 503.09, y: 698.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 503.79, y: 697.79))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 523.79, y: 677.79))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 676.09))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 678.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 525.5, y: 690.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 524.5, y: 689.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 558.5, y: 689.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 559.5, y: 689.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 559.5, y: 690.5))
        buttonMainCursorLeftPath.addLine(to: CGPoint(x: 559.5, y: 706.5))
        buttonMainCursorLeftPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonMainCursorLeftPath.fill()
        context.restoreGState()





        //// Quote
        //// Background Quote Drawing
        let backgroundQuoteRect = CGRect(x: 306, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundQuoteRect)
        context.translateBy(x: backgroundQuoteRect.minX, y: backgroundQuoteRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundQuoteRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Quote Drawing
        let buttonMainQuoteRect = CGRect(x: 351, y: 654, width: 50, height: 59)
        let buttonMainQuoteTextContent = "â"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainQuoteStyle = NSMutableParagraphStyle()
        buttonMainQuoteStyle.alignment = .center
        let buttonMainQuoteFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-BoldItalic", size: 56)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainQuoteStyle]

        let buttonMainQuoteTextHeight: CGFloat = buttonMainQuoteTextContent.boundingRect(with: CGSize(width: buttonMainQuoteRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainQuoteFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainQuoteRect)
        buttonMainQuoteTextContent.draw(in: CGRect(x: buttonMainQuoteRect.minX, y: buttonMainQuoteRect.minY + (buttonMainQuoteRect.height - buttonMainQuoteTextHeight) / 2, width: buttonMainQuoteRect.width, height: buttonMainQuoteTextHeight), withAttributes: buttonMainQuoteFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Semicolon
        //// Background Semicolon Drawing
        let backgroundSemicolonRect = CGRect(x: 153, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundSemicolonRect)
        context.translateBy(x: backgroundSemicolonRect.minX, y: backgroundSemicolonRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundSemicolonRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Semicolon Drawing
        let buttonMainSemicolonRect = CGRect(x: 203, y: 654, width: 50, height: 59)
        let buttonMainSemicolonTextContent = ";"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainSemicolonStyle = NSMutableParagraphStyle()
        buttonMainSemicolonStyle.alignment = .center
        let buttonMainSemicolonFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 56)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainSemicolonStyle]

        let buttonMainSemicolonTextHeight: CGFloat = buttonMainSemicolonTextContent.boundingRect(with: CGSize(width: buttonMainSemicolonRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainSemicolonFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainSemicolonRect)
        buttonMainSemicolonTextContent.draw(in: CGRect(x: buttonMainSemicolonRect.minX, y: buttonMainSemicolonRect.minY + (buttonMainSemicolonRect.height - buttonMainSemicolonTextHeight) / 2, width: buttonMainSemicolonRect.width, height: buttonMainSemicolonTextHeight), withAttributes: buttonMainSemicolonFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Symbol Shift Left
        //// Background Symbol Shift Left Drawing
        let backgroundSymbolShiftLeftRect = CGRect(x: 0, y: 611, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundSymbolShiftLeftRect)
        context.translateBy(x: backgroundSymbolShiftLeftRect.minX, y: backgroundSymbolShiftLeftRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundSymbolShiftLeftRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text Symbol Shift Left Drawing
        let buttonLowerTextSymbolShiftLeftRect = CGRect(x: 21, y: 682, width: 108, height: 23)
        let buttonLowerTextSymbolShiftLeftTextContent = "SHIFT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextSymbolShiftLeftStyle = NSMutableParagraphStyle()
        buttonLowerTextSymbolShiftLeftStyle.alignment = .center
        let buttonLowerTextSymbolShiftLeftFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextSymbolShiftLeftStyle]

        let buttonLowerTextSymbolShiftLeftTextHeight: CGFloat = buttonLowerTextSymbolShiftLeftTextContent.boundingRect(with: CGSize(width: buttonLowerTextSymbolShiftLeftRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextSymbolShiftLeftFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextSymbolShiftLeftRect)
        buttonLowerTextSymbolShiftLeftTextContent.draw(in: CGRect(x: buttonLowerTextSymbolShiftLeftRect.minX, y: buttonLowerTextSymbolShiftLeftRect.minY + (buttonLowerTextSymbolShiftLeftRect.height - buttonLowerTextSymbolShiftLeftTextHeight) / 2, width: buttonLowerTextSymbolShiftLeftRect.width, height: buttonLowerTextSymbolShiftLeftTextHeight), withAttributes: buttonLowerTextSymbolShiftLeftFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text Symbol Shift Left Drawing
        let buttonUpperTextSymbolShiftLeftRect = CGRect(x: 22, y: 660, width: 108, height: 23)
        let buttonUpperTextSymbolShiftLeftTextContent = "SYMBOL"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextSymbolShiftLeftStyle = NSMutableParagraphStyle()
        buttonUpperTextSymbolShiftLeftStyle.alignment = .center
        let buttonUpperTextSymbolShiftLeftFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextSymbolShiftLeftStyle]

        let buttonUpperTextSymbolShiftLeftTextHeight: CGFloat = buttonUpperTextSymbolShiftLeftTextContent.boundingRect(with: CGSize(width: buttonUpperTextSymbolShiftLeftRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextSymbolShiftLeftFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextSymbolShiftLeftRect)
        buttonUpperTextSymbolShiftLeftTextContent.draw(in: CGRect(x: buttonUpperTextSymbolShiftLeftRect.minX, y: buttonUpperTextSymbolShiftLeftRect.minY + (buttonUpperTextSymbolShiftLeftRect.height - buttonUpperTextSymbolShiftLeftTextHeight) / 2, width: buttonUpperTextSymbolShiftLeftRect.width, height: buttonUpperTextSymbolShiftLeftTextHeight), withAttributes: buttonUpperTextSymbolShiftLeftFontAttributes)
        context.restoreGState()
        context.restoreGState()







        //// Row 4
        //// Caps Shift Right
        //// Symbol Caps Shift Right Drawing
        let symbolCapsShiftRightRect = CGRect(x: 1710, y: 458, width: 335, height: 142)
        context.saveGState()
        context.clip(to: symbolCapsShiftRightRect)
        context.translateBy(x: symbolCapsShiftRightRect.minX, y: symbolCapsShiftRightRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolCapsShiftRightRect.width, height: symbolCapsShiftRightRect.height))
        context.restoreGState()


        //// Button Upper Text Caps Shift Right Drawing
        let buttonUpperTextCapsShiftRightRect = CGRect(x: 1736, y: 528, width: 287, height: 23)
        let buttonUpperTextCapsShiftRightTextContent = "CAPS SHIFT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextCapsShiftRightStyle = NSMutableParagraphStyle()
        buttonUpperTextCapsShiftRightStyle.alignment = .center
        let buttonUpperTextCapsShiftRightFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextCapsShiftRightStyle]

        let buttonUpperTextCapsShiftRightTextHeight: CGFloat = buttonUpperTextCapsShiftRightTextContent.boundingRect(with: CGSize(width: buttonUpperTextCapsShiftRightRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextCapsShiftRightFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextCapsShiftRightRect)
        buttonUpperTextCapsShiftRightTextContent.draw(in: CGRect(x: buttonUpperTextCapsShiftRightRect.minX, y: buttonUpperTextCapsShiftRightRect.minY + (buttonUpperTextCapsShiftRightRect.height - buttonUpperTextCapsShiftRightTextHeight) / 2, width: buttonUpperTextCapsShiftRightRect.width, height: buttonUpperTextCapsShiftRightTextHeight), withAttributes: buttonUpperTextCapsShiftRightFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Period
        //// Background Period Drawing
        let backgroundPeriodRect = CGRect(x: 1558, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundPeriodRect)
        context.translateBy(x: backgroundPeriodRect.minX, y: backgroundPeriodRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundPeriodRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Period Drawing
        let buttonMainPeriodRect = CGRect(x: 1608, y: 499, width: 50, height: 59)
        let buttonMainPeriodTextContent = "."
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainPeriodStyle = NSMutableParagraphStyle()
        buttonMainPeriodStyle.alignment = .center
        let buttonMainPeriodFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 56)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainPeriodStyle]

        let buttonMainPeriodTextHeight: CGFloat = buttonMainPeriodTextContent.boundingRect(with: CGSize(width: buttonMainPeriodRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainPeriodFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainPeriodRect)
        buttonMainPeriodTextContent.draw(in: CGRect(x: buttonMainPeriodRect.minX, y: buttonMainPeriodRect.minY + (buttonMainPeriodRect.height - buttonMainPeriodTextHeight) / 2, width: buttonMainPeriodRect.width, height: buttonMainPeriodTextHeight), withAttributes: buttonMainPeriodFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// M
        //// Background M Drawing
        let backgroundMRect = CGRect(x: 1406, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundMRect)
        context.translateBy(x: backgroundMRect.minX, y: backgroundMRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundMRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main M Drawing
        let buttonMainMRect = CGRect(x: 1455, y: 552, width: 50, height: 34)
        let buttonMainMTextContent = "M"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainMStyle = NSMutableParagraphStyle()
        buttonMainMStyle.alignment = .center
        let buttonMainMFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainMStyle]

        let buttonMainMTextHeight: CGFloat = buttonMainMTextContent.boundingRect(with: CGSize(width: buttonMainMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainMRect)
        buttonMainMTextContent.draw(in: CGRect(x: buttonMainMRect.minX, y: buttonMainMRect.minY + (buttonMainMRect.height - buttonMainMTextHeight) / 2, width: buttonMainMRect.width, height: buttonMainMTextHeight), withAttributes: buttonMainMFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text M Drawing
        let buttonTopTextMRect = CGRect(x: 1427, y: 507, width: 108, height: 22)
        let buttonTopTextMTextContent = "PAUSE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextMStyle = NSMutableParagraphStyle()
        buttonTopTextMStyle.alignment = .center
        let buttonTopTextMFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextMStyle]

        let buttonTopTextMTextHeight: CGFloat = buttonTopTextMTextContent.boundingRect(with: CGSize(width: buttonTopTextMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextMRect)
        buttonTopTextMTextContent.draw(in: CGRect(x: buttonTopTextMRect.minX, y: buttonTopTextMRect.minY + (buttonTopTextMRect.height - buttonTopTextMTextHeight) / 2, width: buttonTopTextMRect.width, height: buttonTopTextMTextHeight), withAttributes: buttonTopTextMFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text M Drawing
        let buttonAboveLowTextMRect = CGRect(x: 1425, y: 480, width: 108, height: 22)
        let buttonAboveLowTextMTextContent = "INVERS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextMStyle = NSMutableParagraphStyle()
        buttonAboveLowTextMStyle.alignment = .center
        let buttonAboveLowTextMFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextMStyle]

        let buttonAboveLowTextMTextHeight: CGFloat = buttonAboveLowTextMTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextMRect)
        buttonAboveLowTextMTextContent.draw(in: CGRect(x: buttonAboveLowTextMRect.minX, y: buttonAboveLowTextMRect.minY + (buttonAboveLowTextMRect.height - buttonAboveLowTextMTextHeight) / 2, width: buttonAboveLowTextMRect.width, height: buttonAboveLowTextMTextHeight), withAttributes: buttonAboveLowTextMFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text M Drawing
        let buttonAboveTopTextMRect = CGRect(x: 1425, y: 458, width: 108, height: 22)
        let buttonAboveTopTextMTextContent = "PI"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextMStyle = NSMutableParagraphStyle()
        buttonAboveTopTextMStyle.alignment = .center
        let buttonAboveTopTextMFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextMStyle]

        let buttonAboveTopTextMTextHeight: CGFloat = buttonAboveTopTextMTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextMRect)
        buttonAboveTopTextMTextContent.draw(in: CGRect(x: buttonAboveTopTextMRect.minX, y: buttonAboveTopTextMRect.minY + (buttonAboveTopTextMRect.height - buttonAboveTopTextMTextHeight) / 2, width: buttonAboveTopTextMRect.width, height: buttonAboveTopTextMTextHeight), withAttributes: buttonAboveTopTextMFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// N
        //// Background N Drawing
        let backgroundNRect = CGRect(x: 1255, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundNRect)
        context.translateBy(x: backgroundNRect.minX, y: backgroundNRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundNRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main N Drawing
        let buttonMainNRect = CGRect(x: 1304, y: 552, width: 50, height: 34)
        let buttonMainNTextContent = "N"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainNStyle = NSMutableParagraphStyle()
        buttonMainNStyle.alignment = .center
        let buttonMainNFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainNStyle]

        let buttonMainNTextHeight: CGFloat = buttonMainNTextContent.boundingRect(with: CGSize(width: buttonMainNRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainNFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainNRect)
        buttonMainNTextContent.draw(in: CGRect(x: buttonMainNRect.minX, y: buttonMainNRect.minY + (buttonMainNRect.height - buttonMainNTextHeight) / 2, width: buttonMainNRect.width, height: buttonMainNTextHeight), withAttributes: buttonMainNFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text N Drawing
        let buttonTopTextNRect = CGRect(x: 1276, y: 507, width: 108, height: 22)
        let buttonTopTextNTextContent = "NEXT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextNStyle = NSMutableParagraphStyle()
        buttonTopTextNStyle.alignment = .center
        let buttonTopTextNFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextNStyle]

        let buttonTopTextNTextHeight: CGFloat = buttonTopTextNTextContent.boundingRect(with: CGSize(width: buttonTopTextNRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextNFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextNRect)
        buttonTopTextNTextContent.draw(in: CGRect(x: buttonTopTextNRect.minX, y: buttonTopTextNRect.minY + (buttonTopTextNRect.height - buttonTopTextNTextHeight) / 2, width: buttonTopTextNRect.width, height: buttonTopTextNTextHeight), withAttributes: buttonTopTextNFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text N Drawing
        let buttonAboveLowTextNRect = CGRect(x: 1274, y: 480, width: 108, height: 22)
        let buttonAboveLowTextNTextContent = "OVER"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextNStyle = NSMutableParagraphStyle()
        buttonAboveLowTextNStyle.alignment = .center
        let buttonAboveLowTextNFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextNStyle]

        let buttonAboveLowTextNTextHeight: CGFloat = buttonAboveLowTextNTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextNRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextNFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextNRect)
        buttonAboveLowTextNTextContent.draw(in: CGRect(x: buttonAboveLowTextNRect.minX, y: buttonAboveLowTextNRect.minY + (buttonAboveLowTextNRect.height - buttonAboveLowTextNTextHeight) / 2, width: buttonAboveLowTextNRect.width, height: buttonAboveLowTextNTextHeight), withAttributes: buttonAboveLowTextNFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text N Drawing
        let buttonAboveTopTextNRect = CGRect(x: 1274, y: 458, width: 108, height: 22)
        let buttonAboveTopTextNTextContent = "INKRY$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextNStyle = NSMutableParagraphStyle()
        buttonAboveTopTextNStyle.alignment = .center
        let buttonAboveTopTextNFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextNStyle]

        let buttonAboveTopTextNTextHeight: CGFloat = buttonAboveTopTextNTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextNRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextNFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextNRect)
        buttonAboveTopTextNTextContent.draw(in: CGRect(x: buttonAboveTopTextNRect.minX, y: buttonAboveTopTextNRect.minY + (buttonAboveTopTextNRect.height - buttonAboveTopTextNTextHeight) / 2, width: buttonAboveTopTextNRect.width, height: buttonAboveTopTextNTextHeight), withAttributes: buttonAboveTopTextNFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// B
        //// Background B Drawing
        let backgroundBRect = CGRect(x: 1103, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundBRect)
        context.translateBy(x: backgroundBRect.minX, y: backgroundBRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundBRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main B Drawing
        let buttonMainBRect = CGRect(x: 1152, y: 552, width: 50, height: 34)
        let buttonMainBTextContent = "B"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainBStyle = NSMutableParagraphStyle()
        buttonMainBStyle.alignment = .center
        let buttonMainBFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainBStyle]

        let buttonMainBTextHeight: CGFloat = buttonMainBTextContent.boundingRect(with: CGSize(width: buttonMainBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainBRect)
        buttonMainBTextContent.draw(in: CGRect(x: buttonMainBRect.minX, y: buttonMainBRect.minY + (buttonMainBRect.height - buttonMainBTextHeight) / 2, width: buttonMainBRect.width, height: buttonMainBTextHeight), withAttributes: buttonMainBFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text B Drawing
        let buttonLowTextBPath = UIBezierPath()
        buttonLowTextBPath.move(to: CGPoint(x: 1204.47, y: 532.26))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1208.46, y: 537.02), controlPoint1: CGPoint(x: 1204.47, y: 532.26), controlPoint2: CGPoint(x: 1206.33, y: 534.47))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1212.46, y: 532.26), controlPoint1: CGPoint(x: 1210.6, y: 534.47), controlPoint2: CGPoint(x: 1212.46, y: 532.26))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1214.76, y: 534.19))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1211.56, y: 538), controlPoint1: CGPoint(x: 1214.76, y: 534.19), controlPoint2: CGPoint(x: 1213.34, y: 535.88))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1216, y: 538))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1216, y: 541))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1211.81, y: 541))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1214.76, y: 544.52), controlPoint1: CGPoint(x: 1213.47, y: 542.98), controlPoint2: CGPoint(x: 1214.76, y: 544.52))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1212.46, y: 546.44))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1208.46, y: 541.68), controlPoint1: CGPoint(x: 1212.46, y: 546.44), controlPoint2: CGPoint(x: 1210.6, y: 544.23))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1204.47, y: 546.44), controlPoint1: CGPoint(x: 1206.33, y: 544.23), controlPoint2: CGPoint(x: 1204.47, y: 546.44))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1202.17, y: 544.52))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1205.12, y: 541), controlPoint1: CGPoint(x: 1202.17, y: 544.52), controlPoint2: CGPoint(x: 1203.46, y: 542.98))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1201, y: 541))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1201, y: 538))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1205.37, y: 538))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1202.17, y: 534.19), controlPoint1: CGPoint(x: 1203.59, y: 535.88), controlPoint2: CGPoint(x: 1202.17, y: 534.19))
        buttonLowTextBPath.addCurve(to: CGPoint(x: 1204.47, y: 532.26), controlPoint1: CGPoint(x: 1202.17, y: 534.19), controlPoint2: CGPoint(x: 1204.39, y: 532.32))
        buttonLowTextBPath.addLine(to: CGPoint(x: 1204.47, y: 532.26))
        buttonLowTextBPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonLowTextBPath.fill()
        context.restoreGState()



        //// Button Top Text B Drawing
        let buttonTopTextBRect = CGRect(x: 1124, y: 507, width: 108, height: 22)
        let buttonTopTextBTextContent = "BORDER"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextBStyle = NSMutableParagraphStyle()
        buttonTopTextBStyle.alignment = .center
        let buttonTopTextBFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextBStyle]

        let buttonTopTextBTextHeight: CGFloat = buttonTopTextBTextContent.boundingRect(with: CGSize(width: buttonTopTextBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextBRect)
        buttonTopTextBTextContent.draw(in: CGRect(x: buttonTopTextBRect.minX, y: buttonTopTextBRect.minY + (buttonTopTextBRect.height - buttonTopTextBTextHeight) / 2, width: buttonTopTextBRect.width, height: buttonTopTextBTextHeight), withAttributes: buttonTopTextBFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text B Drawing
        let buttonAboveLowTextBRect = CGRect(x: 1122, y: 480, width: 108, height: 22)
        let buttonAboveLowTextBTextContent = "BRIGHT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextBStyle = NSMutableParagraphStyle()
        buttonAboveLowTextBStyle.alignment = .center
        let buttonAboveLowTextBFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextBStyle]

        let buttonAboveLowTextBTextHeight: CGFloat = buttonAboveLowTextBTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextBRect)
        buttonAboveLowTextBTextContent.draw(in: CGRect(x: buttonAboveLowTextBRect.minX, y: buttonAboveLowTextBRect.minY + (buttonAboveLowTextBRect.height - buttonAboveLowTextBTextHeight) / 2, width: buttonAboveLowTextBRect.width, height: buttonAboveLowTextBTextHeight), withAttributes: buttonAboveLowTextBFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text B Drawing
        let buttonAboveTopTextBRect = CGRect(x: 1122, y: 458, width: 108, height: 22)
        let buttonAboveTopTextBTextContent = "BIN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextBStyle = NSMutableParagraphStyle()
        buttonAboveTopTextBStyle.alignment = .center
        let buttonAboveTopTextBFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextBStyle]

        let buttonAboveTopTextBTextHeight: CGFloat = buttonAboveTopTextBTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextBRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextBFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextBRect)
        buttonAboveTopTextBTextContent.draw(in: CGRect(x: buttonAboveTopTextBRect.minX, y: buttonAboveTopTextBRect.minY + (buttonAboveTopTextBRect.height - buttonAboveTopTextBTextHeight) / 2, width: buttonAboveTopTextBRect.width, height: buttonAboveTopTextBTextHeight), withAttributes: buttonAboveTopTextBFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// V
        //// Background V Drawing
        let backgroundVRect = CGRect(x: 952, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundVRect)
        context.translateBy(x: backgroundVRect.minX, y: backgroundVRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundVRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main V Drawing
        let buttonMainVRect = CGRect(x: 1001, y: 552, width: 50, height: 34)
        let buttonMainVTextContent = "V"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainVStyle = NSMutableParagraphStyle()
        buttonMainVStyle.alignment = .center
        let buttonMainVFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainVStyle]

        let buttonMainVTextHeight: CGFloat = buttonMainVTextContent.boundingRect(with: CGSize(width: buttonMainVRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainVFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainVRect)
        buttonMainVTextContent.draw(in: CGRect(x: buttonMainVRect.minX, y: buttonMainVRect.minY + (buttonMainVRect.height - buttonMainVTextHeight) / 2, width: buttonMainVRect.width, height: buttonMainVTextHeight), withAttributes: buttonMainVFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text V Drawing
        let buttonLowTextVRect = CGRect(x: 973, y: 525, width: 91, height: 22)
        let buttonLowTextVTextContent = "/"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextVStyle = NSMutableParagraphStyle()
        buttonLowTextVStyle.alignment = .right
        let buttonLowTextVFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextVStyle]

        let buttonLowTextVTextHeight: CGFloat = buttonLowTextVTextContent.boundingRect(with: CGSize(width: buttonLowTextVRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextVFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextVRect)
        buttonLowTextVTextContent.draw(in: CGRect(x: buttonLowTextVRect.minX, y: buttonLowTextVRect.minY + (buttonLowTextVRect.height - buttonLowTextVTextHeight) / 2, width: buttonLowTextVRect.width, height: buttonLowTextVTextHeight), withAttributes: buttonLowTextVFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text V Drawing
        let buttonTopTextVRect = CGRect(x: 973, y: 507, width: 108, height: 22)
        let buttonTopTextVTextContent = "CLS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextVStyle = NSMutableParagraphStyle()
        buttonTopTextVStyle.alignment = .center
        let buttonTopTextVFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextVStyle]

        let buttonTopTextVTextHeight: CGFloat = buttonTopTextVTextContent.boundingRect(with: CGSize(width: buttonTopTextVRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextVFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextVRect)
        buttonTopTextVTextContent.draw(in: CGRect(x: buttonTopTextVRect.minX, y: buttonTopTextVRect.minY + (buttonTopTextVRect.height - buttonTopTextVTextHeight) / 2, width: buttonTopTextVRect.width, height: buttonTopTextVTextHeight), withAttributes: buttonTopTextVFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text V Drawing
        let buttonAboveLowTextVRect = CGRect(x: 971, y: 480, width: 108, height: 22)
        let buttonAboveLowTextVTextContent = "FLASH"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextVStyle = NSMutableParagraphStyle()
        buttonAboveLowTextVStyle.alignment = .center
        let buttonAboveLowTextVFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextVStyle]

        let buttonAboveLowTextVTextHeight: CGFloat = buttonAboveLowTextVTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextVRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextVFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextVRect)
        buttonAboveLowTextVTextContent.draw(in: CGRect(x: buttonAboveLowTextVRect.minX, y: buttonAboveLowTextVRect.minY + (buttonAboveLowTextVRect.height - buttonAboveLowTextVTextHeight) / 2, width: buttonAboveLowTextVRect.width, height: buttonAboveLowTextVTextHeight), withAttributes: buttonAboveLowTextVFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text V Drawing
        let buttonAboveTopTextVRect = CGRect(x: 971, y: 458, width: 108, height: 22)
        let buttonAboveTopTextVTextContent = "LLIST"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextVStyle = NSMutableParagraphStyle()
        buttonAboveTopTextVStyle.alignment = .center
        let buttonAboveTopTextVFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextVStyle]

        let buttonAboveTopTextVTextHeight: CGFloat = buttonAboveTopTextVTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextVRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextVFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextVRect)
        buttonAboveTopTextVTextContent.draw(in: CGRect(x: buttonAboveTopTextVRect.minX, y: buttonAboveTopTextVRect.minY + (buttonAboveTopTextVRect.height - buttonAboveTopTextVTextHeight) / 2, width: buttonAboveTopTextVRect.width, height: buttonAboveTopTextVTextHeight), withAttributes: buttonAboveTopTextVFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// C
        //// Background C Drawing
        let backgroundCRect = CGRect(x: 800, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCRect)
        context.translateBy(x: backgroundCRect.minX, y: backgroundCRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main C Drawing
        let buttonMainCRect = CGRect(x: 849, y: 552, width: 50, height: 34)
        let buttonMainCTextContent = "C"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainCStyle = NSMutableParagraphStyle()
        buttonMainCStyle.alignment = .center
        let buttonMainCFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainCStyle]

        let buttonMainCTextHeight: CGFloat = buttonMainCTextContent.boundingRect(with: CGSize(width: buttonMainCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainCRect)
        buttonMainCTextContent.draw(in: CGRect(x: buttonMainCRect.minX, y: buttonMainCRect.minY + (buttonMainCRect.height - buttonMainCTextHeight) / 2, width: buttonMainCRect.width, height: buttonMainCTextHeight), withAttributes: buttonMainCFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text C Drawing
        let buttonLowTextCRect = CGRect(x: 821, y: 525, width: 91, height: 22)
        let buttonLowTextCTextContent = "?"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextCStyle = NSMutableParagraphStyle()
        buttonLowTextCStyle.alignment = .right
        let buttonLowTextCFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextCStyle]

        let buttonLowTextCTextHeight: CGFloat = buttonLowTextCTextContent.boundingRect(with: CGSize(width: buttonLowTextCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextCRect)
        buttonLowTextCTextContent.draw(in: CGRect(x: buttonLowTextCRect.minX, y: buttonLowTextCRect.minY + (buttonLowTextCRect.height - buttonLowTextCTextHeight) / 2, width: buttonLowTextCRect.width, height: buttonLowTextCTextHeight), withAttributes: buttonLowTextCFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text C Drawing
        let buttonTopTextCRect = CGRect(x: 821, y: 507, width: 108, height: 22)
        let buttonTopTextCTextContent = "CONT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextCStyle = NSMutableParagraphStyle()
        buttonTopTextCStyle.alignment = .center
        let buttonTopTextCFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextCStyle]

        let buttonTopTextCTextHeight: CGFloat = buttonTopTextCTextContent.boundingRect(with: CGSize(width: buttonTopTextCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextCRect)
        buttonTopTextCTextContent.draw(in: CGRect(x: buttonTopTextCRect.minX, y: buttonTopTextCRect.minY + (buttonTopTextCRect.height - buttonTopTextCTextHeight) / 2, width: buttonTopTextCRect.width, height: buttonTopTextCTextHeight), withAttributes: buttonTopTextCFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text C Drawing
        let buttonAboveLowTextCRect = CGRect(x: 819, y: 480, width: 108, height: 22)
        let buttonAboveLowTextCTextContent = "PAPER"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextCStyle = NSMutableParagraphStyle()
        buttonAboveLowTextCStyle.alignment = .center
        let buttonAboveLowTextCFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextCStyle]

        let buttonAboveLowTextCTextHeight: CGFloat = buttonAboveLowTextCTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextCRect)
        buttonAboveLowTextCTextContent.draw(in: CGRect(x: buttonAboveLowTextCRect.minX, y: buttonAboveLowTextCRect.minY + (buttonAboveLowTextCRect.height - buttonAboveLowTextCTextHeight) / 2, width: buttonAboveLowTextCRect.width, height: buttonAboveLowTextCTextHeight), withAttributes: buttonAboveLowTextCFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text C Drawing
        let buttonAboveTopTextCRect = CGRect(x: 819, y: 458, width: 108, height: 22)
        let buttonAboveTopTextCTextContent = "LPRINT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextCStyle = NSMutableParagraphStyle()
        buttonAboveTopTextCStyle.alignment = .center
        let buttonAboveTopTextCFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextCStyle]

        let buttonAboveTopTextCTextHeight: CGFloat = buttonAboveTopTextCTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextCRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextCFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextCRect)
        buttonAboveTopTextCTextContent.draw(in: CGRect(x: buttonAboveTopTextCRect.minX, y: buttonAboveTopTextCRect.minY + (buttonAboveTopTextCRect.height - buttonAboveTopTextCTextHeight) / 2, width: buttonAboveTopTextCRect.width, height: buttonAboveTopTextCTextHeight), withAttributes: buttonAboveTopTextCFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// X
        //// Background X Drawing
        let backgroundXRect = CGRect(x: 647, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundXRect)
        context.translateBy(x: backgroundXRect.minX, y: backgroundXRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundXRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main X Drawing
        let buttonMainXRect = CGRect(x: 696, y: 552, width: 50, height: 34)
        let buttonMainXTextContent = "X"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainXStyle = NSMutableParagraphStyle()
        buttonMainXStyle.alignment = .center
        let buttonMainXFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainXStyle]

        let buttonMainXTextHeight: CGFloat = buttonMainXTextContent.boundingRect(with: CGSize(width: buttonMainXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainXRect)
        buttonMainXTextContent.draw(in: CGRect(x: buttonMainXRect.minX, y: buttonMainXRect.minY + (buttonMainXRect.height - buttonMainXTextHeight) / 2, width: buttonMainXRect.width, height: buttonMainXTextHeight), withAttributes: buttonMainXFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text X Drawing
        let buttonLowTextXRect = CGRect(x: 668, y: 525, width: 91, height: 22)
        let buttonLowTextXTextContent = "Â£"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextXStyle = NSMutableParagraphStyle()
        buttonLowTextXStyle.alignment = .right
        let buttonLowTextXFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextXStyle]

        let buttonLowTextXTextHeight: CGFloat = buttonLowTextXTextContent.boundingRect(with: CGSize(width: buttonLowTextXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextXRect)
        buttonLowTextXTextContent.draw(in: CGRect(x: buttonLowTextXRect.minX, y: buttonLowTextXRect.minY + (buttonLowTextXRect.height - buttonLowTextXTextHeight) / 2, width: buttonLowTextXRect.width, height: buttonLowTextXTextHeight), withAttributes: buttonLowTextXFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text X Drawing
        let buttonTopTextXRect = CGRect(x: 668, y: 507, width: 108, height: 22)
        let buttonTopTextXTextContent = "CLEAR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextXStyle = NSMutableParagraphStyle()
        buttonTopTextXStyle.alignment = .center
        let buttonTopTextXFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextXStyle]

        let buttonTopTextXTextHeight: CGFloat = buttonTopTextXTextContent.boundingRect(with: CGSize(width: buttonTopTextXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextXRect)
        buttonTopTextXTextContent.draw(in: CGRect(x: buttonTopTextXRect.minX, y: buttonTopTextXRect.minY + (buttonTopTextXRect.height - buttonTopTextXTextHeight) / 2, width: buttonTopTextXRect.width, height: buttonTopTextXTextHeight), withAttributes: buttonTopTextXFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text X Drawing
        let buttonAboveLowTextXRect = CGRect(x: 666, y: 480, width: 108, height: 22)
        let buttonAboveLowTextXTextContent = "INK"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextXStyle = NSMutableParagraphStyle()
        buttonAboveLowTextXStyle.alignment = .center
        let buttonAboveLowTextXFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextXStyle]

        let buttonAboveLowTextXTextHeight: CGFloat = buttonAboveLowTextXTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextXRect)
        buttonAboveLowTextXTextContent.draw(in: CGRect(x: buttonAboveLowTextXRect.minX, y: buttonAboveLowTextXRect.minY + (buttonAboveLowTextXRect.height - buttonAboveLowTextXTextHeight) / 2, width: buttonAboveLowTextXRect.width, height: buttonAboveLowTextXTextHeight), withAttributes: buttonAboveLowTextXFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text X Drawing
        let buttonAboveTopTextXRect = CGRect(x: 666, y: 458, width: 108, height: 22)
        let buttonAboveTopTextXTextContent = "EXP"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextXStyle = NSMutableParagraphStyle()
        buttonAboveTopTextXStyle.alignment = .center
        let buttonAboveTopTextXFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextXStyle]

        let buttonAboveTopTextXTextHeight: CGFloat = buttonAboveTopTextXTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextXRect)
        buttonAboveTopTextXTextContent.draw(in: CGRect(x: buttonAboveTopTextXRect.minX, y: buttonAboveTopTextXRect.minY + (buttonAboveTopTextXRect.height - buttonAboveTopTextXTextHeight) / 2, width: buttonAboveTopTextXRect.width, height: buttonAboveTopTextXTextHeight), withAttributes: buttonAboveTopTextXFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Z
        //// Background Z Drawing
        let backgroundZRect = CGRect(x: 496, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundZRect)
        context.translateBy(x: backgroundZRect.minX, y: backgroundZRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundZRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Z Drawing
        let buttonMainZRect = CGRect(x: 545, y: 552, width: 50, height: 34)
        let buttonMainZTextContent = "Z"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainZStyle = NSMutableParagraphStyle()
        buttonMainZStyle.alignment = .center
        let buttonMainZFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainZStyle]

        let buttonMainZTextHeight: CGFloat = buttonMainZTextContent.boundingRect(with: CGSize(width: buttonMainZRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainZFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainZRect)
        buttonMainZTextContent.draw(in: CGRect(x: buttonMainZRect.minX, y: buttonMainZRect.minY + (buttonMainZRect.height - buttonMainZTextHeight) / 2, width: buttonMainZRect.width, height: buttonMainZTextHeight), withAttributes: buttonMainZFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text Z Drawing
        let buttonLowTextZRect = CGRect(x: 517, y: 525, width: 91, height: 22)
        let buttonLowTextZTextContent = ":"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextZStyle = NSMutableParagraphStyle()
        buttonLowTextZStyle.alignment = .right
        let buttonLowTextZFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextZStyle]

        let buttonLowTextZTextHeight: CGFloat = buttonLowTextZTextContent.boundingRect(with: CGSize(width: buttonLowTextZRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextZFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextZRect)
        buttonLowTextZTextContent.draw(in: CGRect(x: buttonLowTextZRect.minX, y: buttonLowTextZRect.minY + (buttonLowTextZRect.height - buttonLowTextZTextHeight) / 2, width: buttonLowTextZRect.width, height: buttonLowTextZTextHeight), withAttributes: buttonLowTextZFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text Z Drawing
        let buttonTopTextZRect = CGRect(x: 517, y: 507, width: 108, height: 22)
        let buttonTopTextZTextContent = "COPY"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextZStyle = NSMutableParagraphStyle()
        buttonTopTextZStyle.alignment = .center
        let buttonTopTextZFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextZStyle]

        let buttonTopTextZTextHeight: CGFloat = buttonTopTextZTextContent.boundingRect(with: CGSize(width: buttonTopTextZRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextZFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextZRect)
        buttonTopTextZTextContent.draw(in: CGRect(x: buttonTopTextZRect.minX, y: buttonTopTextZRect.minY + (buttonTopTextZRect.height - buttonTopTextZTextHeight) / 2, width: buttonTopTextZRect.width, height: buttonTopTextZTextHeight), withAttributes: buttonTopTextZFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text Z Drawing
        let buttonAboveLowTextZRect = CGRect(x: 515, y: 480, width: 108, height: 22)
        let buttonAboveLowTextZTextContent = "BEEP"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextZStyle = NSMutableParagraphStyle()
        buttonAboveLowTextZStyle.alignment = .center
        let buttonAboveLowTextZFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextZStyle]

        let buttonAboveLowTextZTextHeight: CGFloat = buttonAboveLowTextZTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextZRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextZFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextZRect)
        buttonAboveLowTextZTextContent.draw(in: CGRect(x: buttonAboveLowTextZRect.minX, y: buttonAboveLowTextZRect.minY + (buttonAboveLowTextZRect.height - buttonAboveLowTextZTextHeight) / 2, width: buttonAboveLowTextZRect.width, height: buttonAboveLowTextZTextHeight), withAttributes: buttonAboveLowTextZFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text Z Drawing
        let buttonAboveTopTextZRect = CGRect(x: 515, y: 458, width: 108, height: 22)
        let buttonAboveTopTextZTextContent = "LN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextZStyle = NSMutableParagraphStyle()
        buttonAboveTopTextZStyle.alignment = .center
        let buttonAboveTopTextZFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextZStyle]

        let buttonAboveTopTextZTextHeight: CGFloat = buttonAboveTopTextZTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextZRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextZFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextZRect)
        buttonAboveTopTextZTextContent.draw(in: CGRect(x: buttonAboveTopTextZRect.minX, y: buttonAboveTopTextZRect.minY + (buttonAboveTopTextZRect.height - buttonAboveTopTextZTextHeight) / 2, width: buttonAboveTopTextZRect.width, height: buttonAboveTopTextZTextHeight), withAttributes: buttonAboveTopTextZFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Caps Lock
        //// Background Caps Lock Drawing
        let backgroundCapsLockRect = CGRect(x: 344, y: 458, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundCapsLockRect)
        context.translateBy(x: backgroundCapsLockRect.minX, y: backgroundCapsLockRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundCapsLockRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text Caps Lock Drawing
        let buttonLowerTextCapsLockRect = CGRect(x: 363, y: 529, width: 108, height: 23)
        let buttonLowerTextCapsLockTextContent = "LOCK"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextCapsLockStyle = NSMutableParagraphStyle()
        buttonLowerTextCapsLockStyle.alignment = .center
        let buttonLowerTextCapsLockFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextCapsLockStyle]

        let buttonLowerTextCapsLockTextHeight: CGFloat = buttonLowerTextCapsLockTextContent.boundingRect(with: CGSize(width: buttonLowerTextCapsLockRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextCapsLockFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextCapsLockRect)
        buttonLowerTextCapsLockTextContent.draw(in: CGRect(x: buttonLowerTextCapsLockRect.minX, y: buttonLowerTextCapsLockRect.minY + (buttonLowerTextCapsLockRect.height - buttonLowerTextCapsLockTextHeight) / 2, width: buttonLowerTextCapsLockRect.width, height: buttonLowerTextCapsLockTextHeight), withAttributes: buttonLowerTextCapsLockFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text Caps Lock Drawing
        let buttonUpperTextCapsLockRect = CGRect(x: 363, y: 507, width: 108, height: 23)
        let buttonUpperTextCapsLockTextContent = "CAPS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextCapsLockStyle = NSMutableParagraphStyle()
        buttonUpperTextCapsLockStyle.alignment = .center
        let buttonUpperTextCapsLockFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextCapsLockStyle]

        let buttonUpperTextCapsLockTextHeight: CGFloat = buttonUpperTextCapsLockTextContent.boundingRect(with: CGSize(width: buttonUpperTextCapsLockRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextCapsLockFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextCapsLockRect)
        buttonUpperTextCapsLockTextContent.draw(in: CGRect(x: buttonUpperTextCapsLockRect.minX, y: buttonUpperTextCapsLockRect.minY + (buttonUpperTextCapsLockRect.height - buttonUpperTextCapsLockTextHeight) / 2, width: buttonUpperTextCapsLockRect.width, height: buttonUpperTextCapsLockTextHeight), withAttributes: buttonUpperTextCapsLockFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Caps Shift Left
        //// Symbol Caps Shift Left Drawing
        let symbolCapsShiftLeftRect = CGRect(x: 2, y: 457, width: 335, height: 142)
        context.saveGState()
        context.clip(to: symbolCapsShiftLeftRect)
        context.translateBy(x: symbolCapsShiftLeftRect.minX, y: symbolCapsShiftLeftRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolCapsShiftLeftRect.width, height: symbolCapsShiftLeftRect.height))
        context.restoreGState()


        //// Button Upper Text Caps Shift Left Drawing
        let buttonUpperTextCapsShiftLeftRect = CGRect(x: 28, y: 527, width: 287, height: 23)
        let buttonUpperTextCapsShiftLeftTextContent = "CAPS SHIFT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextCapsShiftLeftStyle = NSMutableParagraphStyle()
        buttonUpperTextCapsShiftLeftStyle.alignment = .center
        let buttonUpperTextCapsShiftLeftFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextCapsShiftLeftStyle]

        let buttonUpperTextCapsShiftLeftTextHeight: CGFloat = buttonUpperTextCapsShiftLeftTextContent.boundingRect(with: CGSize(width: buttonUpperTextCapsShiftLeftRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextCapsShiftLeftFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextCapsShiftLeftRect)
        buttonUpperTextCapsShiftLeftTextContent.draw(in: CGRect(x: buttonUpperTextCapsShiftLeftRect.minX, y: buttonUpperTextCapsShiftLeftRect.minY + (buttonUpperTextCapsShiftLeftRect.height - buttonUpperTextCapsShiftLeftTextHeight) / 2, width: buttonUpperTextCapsShiftLeftRect.width, height: buttonUpperTextCapsShiftLeftTextHeight), withAttributes: buttonUpperTextCapsShiftLeftFontAttributes)
        context.restoreGState()
        context.restoreGState()







        //// Row 3
        //// L
        //// Background L Drawing
        let backgroundLRect = CGRect(x: 1634, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundLRect)
        context.translateBy(x: backgroundLRect.minX, y: backgroundLRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundLRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main L Drawing
        let buttonMainLRect = CGRect(x: 1683, y: 400, width: 50, height: 34)
        let buttonMainLTextContent = "L"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainLStyle = NSMutableParagraphStyle()
        buttonMainLStyle.alignment = .center
        let buttonMainLFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainLStyle]

        let buttonMainLTextHeight: CGFloat = buttonMainLTextContent.boundingRect(with: CGSize(width: buttonMainLRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainLFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainLRect)
        buttonMainLTextContent.draw(in: CGRect(x: buttonMainLRect.minX, y: buttonMainLRect.minY + (buttonMainLRect.height - buttonMainLTextHeight) / 2, width: buttonMainLRect.width, height: buttonMainLTextHeight), withAttributes: buttonMainLFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text L Drawing
        let buttonLowTextLRect = CGRect(x: 1655, y: 373, width: 91, height: 22)
        let buttonLowTextLTextContent = "="
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextLStyle = NSMutableParagraphStyle()
        buttonLowTextLStyle.alignment = .right
        let buttonLowTextLFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextLStyle]

        let buttonLowTextLTextHeight: CGFloat = buttonLowTextLTextContent.boundingRect(with: CGSize(width: buttonLowTextLRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextLFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextLRect)
        buttonLowTextLTextContent.draw(in: CGRect(x: buttonLowTextLRect.minX, y: buttonLowTextLRect.minY + (buttonLowTextLRect.height - buttonLowTextLTextHeight) / 2, width: buttonLowTextLRect.width, height: buttonLowTextLTextHeight), withAttributes: buttonLowTextLFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text L Drawing
        let buttonTopTextLRect = CGRect(x: 1655, y: 355, width: 108, height: 22)
        let buttonTopTextLTextContent = "LET"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextLStyle = NSMutableParagraphStyle()
        buttonTopTextLStyle.alignment = .center
        let buttonTopTextLFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextLStyle]

        let buttonTopTextLTextHeight: CGFloat = buttonTopTextLTextContent.boundingRect(with: CGSize(width: buttonTopTextLRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextLFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextLRect)
        buttonTopTextLTextContent.draw(in: CGRect(x: buttonTopTextLRect.minX, y: buttonTopTextLRect.minY + (buttonTopTextLRect.height - buttonTopTextLTextHeight) / 2, width: buttonTopTextLRect.width, height: buttonTopTextLTextHeight), withAttributes: buttonTopTextLFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text L Drawing
        let buttonAboveLowTextLRect = CGRect(x: 1653, y: 328, width: 108, height: 22)
        let buttonAboveLowTextLTextContent = "ATTR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextLStyle = NSMutableParagraphStyle()
        buttonAboveLowTextLStyle.alignment = .center
        let buttonAboveLowTextLFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextLStyle]

        let buttonAboveLowTextLTextHeight: CGFloat = buttonAboveLowTextLTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextLRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextLFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextLRect)
        buttonAboveLowTextLTextContent.draw(in: CGRect(x: buttonAboveLowTextLRect.minX, y: buttonAboveLowTextLRect.minY + (buttonAboveLowTextLRect.height - buttonAboveLowTextLTextHeight) / 2, width: buttonAboveLowTextLRect.width, height: buttonAboveLowTextLTextHeight), withAttributes: buttonAboveLowTextLFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text L Drawing
        let buttonAboveTopTextLRect = CGRect(x: 1653, y: 306, width: 108, height: 22)
        let buttonAboveTopTextLTextContent = "USR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextLStyle = NSMutableParagraphStyle()
        buttonAboveTopTextLStyle.alignment = .center
        let buttonAboveTopTextLFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextLStyle]

        let buttonAboveTopTextLTextHeight: CGFloat = buttonAboveTopTextLTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextLRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextLFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextLRect)
        buttonAboveTopTextLTextContent.draw(in: CGRect(x: buttonAboveTopTextLRect.minX, y: buttonAboveTopTextLRect.minY + (buttonAboveTopTextLRect.height - buttonAboveTopTextLTextHeight) / 2, width: buttonAboveTopTextLRect.width, height: buttonAboveTopTextLTextHeight), withAttributes: buttonAboveTopTextLFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// K
        //// Background K Drawing
        let backgroundKRect = CGRect(x: 1482, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundKRect)
        context.translateBy(x: backgroundKRect.minX, y: backgroundKRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundKRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main K Drawing
        let buttonMainKRect = CGRect(x: 1531, y: 400, width: 50, height: 34)
        let buttonMainKTextContent = "K"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainKStyle = NSMutableParagraphStyle()
        buttonMainKStyle.alignment = .center
        let buttonMainKFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainKStyle]

        let buttonMainKTextHeight: CGFloat = buttonMainKTextContent.boundingRect(with: CGSize(width: buttonMainKRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainKFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainKRect)
        buttonMainKTextContent.draw(in: CGRect(x: buttonMainKRect.minX, y: buttonMainKRect.minY + (buttonMainKRect.height - buttonMainKTextHeight) / 2, width: buttonMainKRect.width, height: buttonMainKTextHeight), withAttributes: buttonMainKFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text K Drawing
        let buttonLowTextKPath = UIBezierPath()
        buttonLowTextKPath.move(to: CGPoint(x: 1584.83, y: 382))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1587.67, y: 382), controlPoint1: CGPoint(x: 1584.83, y: 382), controlPoint2: CGPoint(x: 1587.67, y: 382))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1584.83, y: 382), controlPoint1: CGPoint(x: 1587.67, y: 382), controlPoint2: CGPoint(x: 1587.67, y: 382))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1584.83, y: 382))
        buttonLowTextKPath.close()
        buttonLowTextKPath.move(to: CGPoint(x: 1593, y: 386.64))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1593, y: 389.47), controlPoint1: CGPoint(x: 1593, y: 386.63), controlPoint2: CGPoint(x: 1593, y: 389.47))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1593, y: 386.63), controlPoint1: CGPoint(x: 1593, y: 389.47), controlPoint2: CGPoint(x: 1593, y: 389.47))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1593, y: 386.64))
        buttonLowTextKPath.close()
        buttonLowTextKPath.move(to: CGPoint(x: 1587.67, y: 382.01))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1587.67, y: 382.15), controlPoint1: CGPoint(x: 1587.67, y: 382.05), controlPoint2: CGPoint(x: 1587.67, y: 382.05))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1587.67, y: 383.3), controlPoint1: CGPoint(x: 1587.67, y: 382.48), controlPoint2: CGPoint(x: 1587.67, y: 382.48))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1587.67, y: 386.63), controlPoint1: CGPoint(x: 1587.67, y: 384.69), controlPoint2: CGPoint(x: 1587.67, y: 385.42))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1593, y: 386.63))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1593, y: 389.47))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1587.67, y: 389.47))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1587.67, y: 394), controlPoint1: CGPoint(x: 1587.67, y: 390.61), controlPoint2: CGPoint(x: 1587.67, y: 392.06))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1584.83, y: 394))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1584.83, y: 389.47), controlPoint1: CGPoint(x: 1584.83, y: 392.06), controlPoint2: CGPoint(x: 1584.83, y: 390.61))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1579, y: 389.47), controlPoint1: CGPoint(x: 1583.43, y: 389.47), controlPoint2: CGPoint(x: 1581.58, y: 389.47))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1579, y: 386.63))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1584.83, y: 386.63))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1584.83, y: 383.3), controlPoint1: CGPoint(x: 1584.83, y: 385.42), controlPoint2: CGPoint(x: 1584.83, y: 384.69))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1584.83, y: 382.15), controlPoint1: CGPoint(x: 1584.83, y: 382.48), controlPoint2: CGPoint(x: 1584.83, y: 382.48))
        buttonLowTextKPath.addCurve(to: CGPoint(x: 1584.83, y: 382.01), controlPoint1: CGPoint(x: 1584.83, y: 382.05), controlPoint2: CGPoint(x: 1584.83, y: 382.05))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1587.67, y: 382))
        buttonLowTextKPath.addLine(to: CGPoint(x: 1587.67, y: 382.01))
        buttonLowTextKPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonLowTextKPath.fill()
        context.restoreGState()



        //// Button Top Text K Drawing
        let buttonTopTextKRect = CGRect(x: 1503, y: 355, width: 108, height: 22)
        let buttonTopTextKTextContent = "LIST"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextKStyle = NSMutableParagraphStyle()
        buttonTopTextKStyle.alignment = .center
        let buttonTopTextKFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextKStyle]

        let buttonTopTextKTextHeight: CGFloat = buttonTopTextKTextContent.boundingRect(with: CGSize(width: buttonTopTextKRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextKFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextKRect)
        buttonTopTextKTextContent.draw(in: CGRect(x: buttonTopTextKRect.minX, y: buttonTopTextKRect.minY + (buttonTopTextKRect.height - buttonTopTextKTextHeight) / 2, width: buttonTopTextKRect.width, height: buttonTopTextKTextHeight), withAttributes: buttonTopTextKFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text K Drawing
        let buttonAboveLowTextKRect = CGRect(x: 1503, y: 326, width: 106, height: 24)
        let buttonAboveLowTextKTextContent = "SCRN$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextKStyle = NSMutableParagraphStyle()
        buttonAboveLowTextKStyle.alignment = .center
        let buttonAboveLowTextKFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextKStyle]

        let buttonAboveLowTextKTextHeight: CGFloat = buttonAboveLowTextKTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextKRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextKFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextKRect)
        buttonAboveLowTextKTextContent.draw(in: CGRect(x: buttonAboveLowTextKRect.minX, y: buttonAboveLowTextKRect.minY + (buttonAboveLowTextKRect.height - buttonAboveLowTextKTextHeight) / 2, width: buttonAboveLowTextKRect.width, height: buttonAboveLowTextKTextHeight), withAttributes: buttonAboveLowTextKFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text K Drawing
        let buttonAboveTopTextKRect = CGRect(x: 1501, y: 306, width: 108, height: 22)
        let buttonAboveTopTextKTextContent = "LEN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextKStyle = NSMutableParagraphStyle()
        buttonAboveTopTextKStyle.alignment = .center
        let buttonAboveTopTextKFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextKStyle]

        let buttonAboveTopTextKTextHeight: CGFloat = buttonAboveTopTextKTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextKRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextKFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextKRect)
        buttonAboveTopTextKTextContent.draw(in: CGRect(x: buttonAboveTopTextKRect.minX, y: buttonAboveTopTextKRect.minY + (buttonAboveTopTextKRect.height - buttonAboveTopTextKTextHeight) / 2, width: buttonAboveTopTextKRect.width, height: buttonAboveTopTextKTextHeight), withAttributes: buttonAboveTopTextKFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// J
        //// Background J Drawing
        let backgroundJRect = CGRect(x: 1330, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundJRect)
        context.translateBy(x: backgroundJRect.minX, y: backgroundJRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundJRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main J Drawing
        let buttonMainJRect = CGRect(x: 1379, y: 400, width: 50, height: 34)
        let buttonMainJTextContent = "J"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainJStyle = NSMutableParagraphStyle()
        buttonMainJStyle.alignment = .center
        let buttonMainJFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainJStyle]

        let buttonMainJTextHeight: CGFloat = buttonMainJTextContent.boundingRect(with: CGSize(width: buttonMainJRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainJFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainJRect)
        buttonMainJTextContent.draw(in: CGRect(x: buttonMainJRect.minX, y: buttonMainJRect.minY + (buttonMainJRect.height - buttonMainJTextHeight) / 2, width: buttonMainJRect.width, height: buttonMainJTextHeight), withAttributes: buttonMainJFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text J Drawing
        let buttonLowTextJPath = UIBezierPath()
        buttonLowTextJPath.move(to: CGPoint(x: 1425.5, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1441.11, y: 386.63), controlPoint1: CGPoint(x: 1436.83, y: 386.63), controlPoint2: CGPoint(x: 1436.83, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1442.78, y: 386.63), controlPoint1: CGPoint(x: 1442.3, y: 386.63), controlPoint2: CGPoint(x: 1442.3, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1442.98, y: 386.63), controlPoint1: CGPoint(x: 1442.92, y: 386.63), controlPoint2: CGPoint(x: 1442.92, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1443, y: 386.63), controlPoint1: CGPoint(x: 1442.99, y: 386.63), controlPoint2: CGPoint(x: 1442.99, y: 386.63))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1443, y: 386.63))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1443, y: 389.47))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1443, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1443, y: 389.47), controlPoint1: CGPoint(x: 1443, y: 389.47), controlPoint2: CGPoint(x: 1443, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1442.99, y: 389.47), controlPoint1: CGPoint(x: 1443, y: 389.47), controlPoint2: CGPoint(x: 1443, y: 389.47))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1442.99, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1443, y: 386.63), controlPoint1: CGPoint(x: 1443, y: 386.63), controlPoint2: CGPoint(x: 1443, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1443, y: 386.63), controlPoint1: CGPoint(x: 1443, y: 386.63), controlPoint2: CGPoint(x: 1443, y: 386.63))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1443, y: 386.63))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1443, y: 386.63))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1443, y: 389.47), controlPoint1: CGPoint(x: 1443, y: 389.47), controlPoint2: CGPoint(x: 1443, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1442.98, y: 389.47), controlPoint1: CGPoint(x: 1442.99, y: 389.47), controlPoint2: CGPoint(x: 1442.99, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1442.78, y: 389.47), controlPoint1: CGPoint(x: 1442.92, y: 389.47), controlPoint2: CGPoint(x: 1442.92, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1441.11, y: 389.47), controlPoint1: CGPoint(x: 1442.3, y: 389.47), controlPoint2: CGPoint(x: 1442.3, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1434.5, y: 389.47), controlPoint1: CGPoint(x: 1438.5, y: 389.47), controlPoint2: CGPoint(x: 1437.48, y: 389.47))
        buttonLowTextJPath.addCurve(to: CGPoint(x: 1425.5, y: 389.47), controlPoint1: CGPoint(x: 1432.6, y: 389.47), controlPoint2: CGPoint(x: 1429.91, y: 389.47))
        buttonLowTextJPath.addLine(to: CGPoint(x: 1425.5, y: 386.63))
        buttonLowTextJPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonLowTextJPath.fill()
        context.restoreGState()



        //// Button Top Text J Drawing
        let buttonTopTextJRect = CGRect(x: 1351, y: 355, width: 108, height: 22)
        let buttonTopTextJTextContent = "LOAD"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextJStyle = NSMutableParagraphStyle()
        buttonTopTextJStyle.alignment = .center
        let buttonTopTextJFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextJStyle]

        let buttonTopTextJTextHeight: CGFloat = buttonTopTextJTextContent.boundingRect(with: CGSize(width: buttonTopTextJRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextJFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextJRect)
        buttonTopTextJTextContent.draw(in: CGRect(x: buttonTopTextJRect.minX, y: buttonTopTextJRect.minY + (buttonTopTextJRect.height - buttonTopTextJTextHeight) / 2, width: buttonTopTextJRect.width, height: buttonTopTextJTextHeight), withAttributes: buttonTopTextJFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text J Drawing
        let buttonAboveLowTextJRect = CGRect(x: 1351, y: 326, width: 106, height: 24)
        let buttonAboveLowTextJTextContent = "VAL$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextJStyle = NSMutableParagraphStyle()
        buttonAboveLowTextJStyle.alignment = .center
        let buttonAboveLowTextJFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextJStyle]

        let buttonAboveLowTextJTextHeight: CGFloat = buttonAboveLowTextJTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextJRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextJFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextJRect)
        buttonAboveLowTextJTextContent.draw(in: CGRect(x: buttonAboveLowTextJRect.minX, y: buttonAboveLowTextJRect.minY + (buttonAboveLowTextJRect.height - buttonAboveLowTextJTextHeight) / 2, width: buttonAboveLowTextJRect.width, height: buttonAboveLowTextJTextHeight), withAttributes: buttonAboveLowTextJFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text J Drawing
        let buttonAboveTopTextJRect = CGRect(x: 1349, y: 306, width: 108, height: 22)
        let buttonAboveTopTextJTextContent = "VAL"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextJStyle = NSMutableParagraphStyle()
        buttonAboveTopTextJStyle.alignment = .center
        let buttonAboveTopTextJFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextJStyle]

        let buttonAboveTopTextJTextHeight: CGFloat = buttonAboveTopTextJTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextJRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextJFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextJRect)
        buttonAboveTopTextJTextContent.draw(in: CGRect(x: buttonAboveTopTextJRect.minX, y: buttonAboveTopTextJRect.minY + (buttonAboveTopTextJRect.height - buttonAboveTopTextJTextHeight) / 2, width: buttonAboveTopTextJRect.width, height: buttonAboveTopTextJTextHeight), withAttributes: buttonAboveTopTextJFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// H
        //// Background H Drawing
        let backgroundHRect = CGRect(x: 1178, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundHRect)
        context.translateBy(x: backgroundHRect.minX, y: backgroundHRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundHRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main H Drawing
        let buttonMainHRect = CGRect(x: 1227, y: 400, width: 50, height: 34)
        let buttonMainHTextContent = "H"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainHStyle = NSMutableParagraphStyle()
        buttonMainHStyle.alignment = .center
        let buttonMainHFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainHStyle]

        let buttonMainHTextHeight: CGFloat = buttonMainHTextContent.boundingRect(with: CGSize(width: buttonMainHRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainHFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainHRect)
        buttonMainHTextContent.draw(in: CGRect(x: buttonMainHRect.minX, y: buttonMainHRect.minY + (buttonMainHRect.height - buttonMainHTextHeight) / 2, width: buttonMainHRect.width, height: buttonMainHTextHeight), withAttributes: buttonMainHFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text H Drawing
        let buttonLowTextHPath = UIBezierPath()
        buttonLowTextHPath.move(to: CGPoint(x: 1283.5, y: 380.5))
        buttonLowTextHPath.addCurve(to: CGPoint(x: 1289.13, y: 388.38), controlPoint1: CGPoint(x: 1283.5, y: 380.5), controlPoint2: CGPoint(x: 1289.13, y: 388.38))
        buttonLowTextHPath.addLine(to: CGPoint(x: 1285, y: 388.38))
        buttonLowTextHPath.addCurve(to: CGPoint(x: 1285, y: 396), controlPoint1: CGPoint(x: 1285, y: 389.96), controlPoint2: CGPoint(x: 1285, y: 396))
        buttonLowTextHPath.addLine(to: CGPoint(x: 1282, y: 396))
        buttonLowTextHPath.addCurve(to: CGPoint(x: 1282, y: 388.37), controlPoint1: CGPoint(x: 1282, y: 396), controlPoint2: CGPoint(x: 1282, y: 389.96))
        buttonLowTextHPath.addLine(to: CGPoint(x: 1277.87, y: 388.38))
        buttonLowTextHPath.addLine(to: CGPoint(x: 1283.5, y: 380.5))
        buttonLowTextHPath.addLine(to: CGPoint(x: 1283.5, y: 380.5))
        buttonLowTextHPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonLowTextHPath.fill()
        context.restoreGState()



        //// Button Top Text H Drawing
        let buttonTopTextHRect = CGRect(x: 1199, y: 355, width: 108, height: 22)
        let buttonTopTextHTextContent = "GOSUB"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextHStyle = NSMutableParagraphStyle()
        buttonTopTextHStyle.alignment = .center
        let buttonTopTextHFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextHStyle]

        let buttonTopTextHTextHeight: CGFloat = buttonTopTextHTextContent.boundingRect(with: CGSize(width: buttonTopTextHRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextHFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextHRect)
        buttonTopTextHTextContent.draw(in: CGRect(x: buttonTopTextHRect.minX, y: buttonTopTextHRect.minY + (buttonTopTextHRect.height - buttonTopTextHTextHeight) / 2, width: buttonTopTextHRect.width, height: buttonTopTextHTextHeight), withAttributes: buttonTopTextHFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text H Drawing
        let buttonAboveLowTextHRect = CGRect(x: 1199, y: 326, width: 106, height: 24)
        let buttonAboveLowTextHTextContent = "CIRCLE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextHStyle = NSMutableParagraphStyle()
        buttonAboveLowTextHStyle.alignment = .center
        let buttonAboveLowTextHFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextHStyle]

        let buttonAboveLowTextHTextHeight: CGFloat = buttonAboveLowTextHTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextHRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextHFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextHRect)
        buttonAboveLowTextHTextContent.draw(in: CGRect(x: buttonAboveLowTextHRect.minX, y: buttonAboveLowTextHRect.minY + (buttonAboveLowTextHRect.height - buttonAboveLowTextHTextHeight) / 2, width: buttonAboveLowTextHRect.width, height: buttonAboveLowTextHTextHeight), withAttributes: buttonAboveLowTextHFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text H Drawing
        let buttonAboveTopTextHRect = CGRect(x: 1197, y: 306, width: 108, height: 22)
        let buttonAboveTopTextHTextContent = "SQR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextHStyle = NSMutableParagraphStyle()
        buttonAboveTopTextHStyle.alignment = .center
        let buttonAboveTopTextHFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextHStyle]

        let buttonAboveTopTextHTextHeight: CGFloat = buttonAboveTopTextHTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextHRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextHFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextHRect)
        buttonAboveTopTextHTextContent.draw(in: CGRect(x: buttonAboveTopTextHRect.minX, y: buttonAboveTopTextHRect.minY + (buttonAboveTopTextHRect.height - buttonAboveTopTextHTextHeight) / 2, width: buttonAboveTopTextHRect.width, height: buttonAboveTopTextHTextHeight), withAttributes: buttonAboveTopTextHFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// G
        //// Background G Drawing
        let backgroundGRect = CGRect(x: 1026, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundGRect)
        context.translateBy(x: backgroundGRect.minX, y: backgroundGRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundGRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main G Drawing
        let buttonMainGRect = CGRect(x: 1075, y: 400, width: 50, height: 34)
        let buttonMainGTextContent = "G"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainGStyle = NSMutableParagraphStyle()
        buttonMainGStyle.alignment = .center
        let buttonMainGFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainGStyle]

        let buttonMainGTextHeight: CGFloat = buttonMainGTextContent.boundingRect(with: CGSize(width: buttonMainGRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainGFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainGRect)
        buttonMainGTextContent.draw(in: CGRect(x: buttonMainGRect.minX, y: buttonMainGRect.minY + (buttonMainGRect.height - buttonMainGTextHeight) / 2, width: buttonMainGRect.width, height: buttonMainGTextHeight), withAttributes: buttonMainGFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text G Drawing
        let buttonLowTextGRect = CGRect(x: 1047, y: 375, width: 108, height: 22)
        let buttonLowTextGTextContent = "THEN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextGStyle = NSMutableParagraphStyle()
        buttonLowTextGStyle.alignment = .center
        let buttonLowTextGFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextGStyle]

        let buttonLowTextGTextHeight: CGFloat = buttonLowTextGTextContent.boundingRect(with: CGSize(width: buttonLowTextGRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextGFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextGRect)
        buttonLowTextGTextContent.draw(in: CGRect(x: buttonLowTextGRect.minX, y: buttonLowTextGRect.minY + (buttonLowTextGRect.height - buttonLowTextGTextHeight) / 2, width: buttonLowTextGRect.width, height: buttonLowTextGTextHeight), withAttributes: buttonLowTextGFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text G Drawing
        let buttonTopTextGRect = CGRect(x: 1047, y: 355, width: 108, height: 22)
        let buttonTopTextGTextContent = "GOTO"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextGStyle = NSMutableParagraphStyle()
        buttonTopTextGStyle.alignment = .center
        let buttonTopTextGFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextGStyle]

        let buttonTopTextGTextHeight: CGFloat = buttonTopTextGTextContent.boundingRect(with: CGSize(width: buttonTopTextGRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextGFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextGRect)
        buttonTopTextGTextContent.draw(in: CGRect(x: buttonTopTextGRect.minX, y: buttonTopTextGRect.minY + (buttonTopTextGRect.height - buttonTopTextGTextHeight) / 2, width: buttonTopTextGRect.width, height: buttonTopTextGTextHeight), withAttributes: buttonTopTextGFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text G Drawing
        let buttonAboveLowTextGRect = CGRect(x: 1075, y: 326, width: 78, height: 24)
        let buttonAboveLowTextGTextContent = "}"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextGStyle = NSMutableParagraphStyle()
        buttonAboveLowTextGStyle.alignment = .left
        let buttonAboveLowTextGFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 22)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextGStyle]

        let buttonAboveLowTextGTextHeight: CGFloat = buttonAboveLowTextGTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextGRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextGFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextGRect)
        buttonAboveLowTextGTextContent.draw(in: CGRect(x: buttonAboveLowTextGRect.minX, y: buttonAboveLowTextGRect.minY + (buttonAboveLowTextGRect.height - buttonAboveLowTextGTextHeight) / 2, width: buttonAboveLowTextGRect.width, height: buttonAboveLowTextGTextHeight), withAttributes: buttonAboveLowTextGFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text G Drawing
        let buttonAboveTopTextGRect = CGRect(x: 1045, y: 306, width: 108, height: 22)
        let buttonAboveTopTextGTextContent = "ABS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextGStyle = NSMutableParagraphStyle()
        buttonAboveTopTextGStyle.alignment = .center
        let buttonAboveTopTextGFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextGStyle]

        let buttonAboveTopTextGTextHeight: CGFloat = buttonAboveTopTextGTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextGRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextGFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextGRect)
        buttonAboveTopTextGTextContent.draw(in: CGRect(x: buttonAboveTopTextGRect.minX, y: buttonAboveTopTextGRect.minY + (buttonAboveTopTextGRect.height - buttonAboveTopTextGTextHeight) / 2, width: buttonAboveTopTextGRect.width, height: buttonAboveTopTextGTextHeight), withAttributes: buttonAboveTopTextGFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// F
        //// Background F Drawing
        let backgroundFRect = CGRect(x: 874, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundFRect)
        context.translateBy(x: backgroundFRect.minX, y: backgroundFRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundFRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main F Drawing
        let buttonMainFRect = CGRect(x: 923, y: 400, width: 50, height: 34)
        let buttonMainFTextContent = "F"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainFStyle = NSMutableParagraphStyle()
        buttonMainFStyle.alignment = .center
        let buttonMainFFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainFStyle]

        let buttonMainFTextHeight: CGFloat = buttonMainFTextContent.boundingRect(with: CGSize(width: buttonMainFRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainFFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainFRect)
        buttonMainFTextContent.draw(in: CGRect(x: buttonMainFRect.minX, y: buttonMainFRect.minY + (buttonMainFRect.height - buttonMainFTextHeight) / 2, width: buttonMainFRect.width, height: buttonMainFTextHeight), withAttributes: buttonMainFFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text F Drawing
        let buttonLowTextFRect = CGRect(x: 895, y: 375, width: 108, height: 22)
        let buttonLowTextFTextContent = "TO"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextFStyle = NSMutableParagraphStyle()
        buttonLowTextFStyle.alignment = .center
        let buttonLowTextFFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextFStyle]

        let buttonLowTextFTextHeight: CGFloat = buttonLowTextFTextContent.boundingRect(with: CGSize(width: buttonLowTextFRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextFFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextFRect)
        buttonLowTextFTextContent.draw(in: CGRect(x: buttonLowTextFRect.minX, y: buttonLowTextFRect.minY + (buttonLowTextFRect.height - buttonLowTextFTextHeight) / 2, width: buttonLowTextFRect.width, height: buttonLowTextFTextHeight), withAttributes: buttonLowTextFFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text F Drawing
        let buttonTopTextFRect = CGRect(x: 895, y: 355, width: 108, height: 22)
        let buttonTopTextFTextContent = "FOR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextFStyle = NSMutableParagraphStyle()
        buttonTopTextFStyle.alignment = .center
        let buttonTopTextFFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextFStyle]

        let buttonTopTextFTextHeight: CGFloat = buttonTopTextFTextContent.boundingRect(with: CGSize(width: buttonTopTextFRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextFFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextFRect)
        buttonTopTextFTextContent.draw(in: CGRect(x: buttonTopTextFRect.minX, y: buttonTopTextFRect.minY + (buttonTopTextFRect.height - buttonTopTextFTextHeight) / 2, width: buttonTopTextFRect.width, height: buttonTopTextFTextHeight), withAttributes: buttonTopTextFFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text F Drawing
        let buttonAboveLowTextFRect = CGRect(x: 918, y: 326, width: 83, height: 24)
        let buttonAboveLowTextFTextContent = "{"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextFStyle = NSMutableParagraphStyle()
        buttonAboveLowTextFStyle.alignment = .left
        let buttonAboveLowTextFFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 22)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextFStyle]

        let buttonAboveLowTextFTextHeight: CGFloat = buttonAboveLowTextFTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextFRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextFFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextFRect)
        buttonAboveLowTextFTextContent.draw(in: CGRect(x: buttonAboveLowTextFRect.minX, y: buttonAboveLowTextFRect.minY + (buttonAboveLowTextFRect.height - buttonAboveLowTextFTextHeight) / 2, width: buttonAboveLowTextFRect.width, height: buttonAboveLowTextFTextHeight), withAttributes: buttonAboveLowTextFFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text F Drawing
        let buttonAboveTopTextFRect = CGRect(x: 893, y: 306, width: 108, height: 22)
        let buttonAboveTopTextFTextContent = "SGN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextFStyle = NSMutableParagraphStyle()
        buttonAboveTopTextFStyle.alignment = .center
        let buttonAboveTopTextFFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextFStyle]

        let buttonAboveTopTextFTextHeight: CGFloat = buttonAboveTopTextFTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextFRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextFFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextFRect)
        buttonAboveTopTextFTextContent.draw(in: CGRect(x: buttonAboveTopTextFRect.minX, y: buttonAboveTopTextFRect.minY + (buttonAboveTopTextFRect.height - buttonAboveTopTextFTextHeight) / 2, width: buttonAboveTopTextFRect.width, height: buttonAboveTopTextFTextHeight), withAttributes: buttonAboveTopTextFFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// D
        //// Background D Drawing
        let backgroundDRect = CGRect(x: 722, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundDRect)
        context.translateBy(x: backgroundDRect.minX, y: backgroundDRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundDRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main D Drawing
        let buttonMainDRect = CGRect(x: 771, y: 400, width: 50, height: 34)
        let buttonMainDTextContent = "D"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainDStyle = NSMutableParagraphStyle()
        buttonMainDStyle.alignment = .center
        let buttonMainDFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainDStyle]

        let buttonMainDTextHeight: CGFloat = buttonMainDTextContent.boundingRect(with: CGSize(width: buttonMainDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainDRect)
        buttonMainDTextContent.draw(in: CGRect(x: buttonMainDRect.minX, y: buttonMainDRect.minY + (buttonMainDRect.height - buttonMainDTextHeight) / 2, width: buttonMainDRect.width, height: buttonMainDTextHeight), withAttributes: buttonMainDFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text D Drawing
        let buttonLowTextDRect = CGRect(x: 743, y: 375, width: 108, height: 22)
        let buttonLowTextDTextContent = "STEP"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextDStyle = NSMutableParagraphStyle()
        buttonLowTextDStyle.alignment = .center
        let buttonLowTextDFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextDStyle]

        let buttonLowTextDTextHeight: CGFloat = buttonLowTextDTextContent.boundingRect(with: CGSize(width: buttonLowTextDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextDRect)
        buttonLowTextDTextContent.draw(in: CGRect(x: buttonLowTextDRect.minX, y: buttonLowTextDRect.minY + (buttonLowTextDRect.height - buttonLowTextDTextHeight) / 2, width: buttonLowTextDRect.width, height: buttonLowTextDTextHeight), withAttributes: buttonLowTextDFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text D Drawing
        let buttonTopTextDRect = CGRect(x: 743, y: 355, width: 108, height: 22)
        let buttonTopTextDTextContent = "DIM"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextDStyle = NSMutableParagraphStyle()
        buttonTopTextDStyle.alignment = .center
        let buttonTopTextDFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextDStyle]

        let buttonTopTextDTextHeight: CGFloat = buttonTopTextDTextContent.boundingRect(with: CGSize(width: buttonTopTextDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextDRect)
        buttonTopTextDTextContent.draw(in: CGRect(x: buttonTopTextDRect.minX, y: buttonTopTextDRect.minY + (buttonTopTextDRect.height - buttonTopTextDTextHeight) / 2, width: buttonTopTextDRect.width, height: buttonTopTextDTextHeight), withAttributes: buttonTopTextDFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text D Drawing
        context.saveGState()
        context.translateBy(x: 772.88, y: 338.49)
        context.rotate(by: -45 * CGFloat.pi/180)

        let buttonAboveLowTextDPath = UIBezierPath(rect: CGRect(x: -1.5, y: -9.64, width: 3, height: 19.28))
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonAboveLowTextDPath.fill()
        context.restoreGState()


        context.restoreGState()


        //// Button Above Top Text D Drawing
        let buttonAboveTopTextDRect = CGRect(x: 741, y: 306, width: 108, height: 22)
        let buttonAboveTopTextDTextContent = "DATA"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextDStyle = NSMutableParagraphStyle()
        buttonAboveTopTextDStyle.alignment = .center
        let buttonAboveTopTextDFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextDStyle]

        let buttonAboveTopTextDTextHeight: CGFloat = buttonAboveTopTextDTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextDRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextDFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextDRect)
        buttonAboveTopTextDTextContent.draw(in: CGRect(x: buttonAboveTopTextDRect.minX, y: buttonAboveTopTextDRect.minY + (buttonAboveTopTextDRect.height - buttonAboveTopTextDTextHeight) / 2, width: buttonAboveTopTextDRect.width, height: buttonAboveTopTextDTextHeight), withAttributes: buttonAboveTopTextDFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// S
        //// Background S Drawing
        let backgroundSRect = CGRect(x: 570, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundSRect)
        context.translateBy(x: backgroundSRect.minX, y: backgroundSRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundSRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main S Drawing
        let buttonMainSRect = CGRect(x: 619, y: 400, width: 50, height: 34)
        let buttonMainSTextContent = "S"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainSStyle = NSMutableParagraphStyle()
        buttonMainSStyle.alignment = .center
        let buttonMainSFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainSStyle]

        let buttonMainSTextHeight: CGFloat = buttonMainSTextContent.boundingRect(with: CGSize(width: buttonMainSRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainSFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainSRect)
        buttonMainSTextContent.draw(in: CGRect(x: buttonMainSRect.minX, y: buttonMainSRect.minY + (buttonMainSRect.height - buttonMainSTextHeight) / 2, width: buttonMainSRect.width, height: buttonMainSTextHeight), withAttributes: buttonMainSFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text S Drawing
        let buttonLowTextSRect = CGRect(x: 591, y: 375, width: 108, height: 22)
        let buttonLowTextSTextContent = "NOT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextSStyle = NSMutableParagraphStyle()
        buttonLowTextSStyle.alignment = .center
        let buttonLowTextSFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextSStyle]

        let buttonLowTextSTextHeight: CGFloat = buttonLowTextSTextContent.boundingRect(with: CGSize(width: buttonLowTextSRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextSFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextSRect)
        buttonLowTextSTextContent.draw(in: CGRect(x: buttonLowTextSRect.minX, y: buttonLowTextSRect.minY + (buttonLowTextSRect.height - buttonLowTextSTextHeight) / 2, width: buttonLowTextSRect.width, height: buttonLowTextSTextHeight), withAttributes: buttonLowTextSFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text S Drawing
        let buttonTopTextSRect = CGRect(x: 591, y: 355, width: 108, height: 22)
        let buttonTopTextSTextContent = "SAVE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextSStyle = NSMutableParagraphStyle()
        buttonTopTextSStyle.alignment = .center
        let buttonTopTextSFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextSStyle]

        let buttonTopTextSTextHeight: CGFloat = buttonTopTextSTextContent.boundingRect(with: CGSize(width: buttonTopTextSRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextSFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextSRect)
        buttonTopTextSTextContent.draw(in: CGRect(x: buttonTopTextSRect.minX, y: buttonTopTextSRect.minY + (buttonTopTextSRect.height - buttonTopTextSTextHeight) / 2, width: buttonTopTextSRect.width, height: buttonTopTextSTextHeight), withAttributes: buttonTopTextSFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text S Drawing
        let buttonAboveLowTextSPath = UIBezierPath()
        buttonAboveLowTextSPath.move(to: CGPoint(x: 626.9, y: 346))
        buttonAboveLowTextSPath.addLine(to: CGPoint(x: 626.9, y: 330.34))
        buttonAboveLowTextSPath.addLine(to: CGPoint(x: 623.03, y: 330.34))
        buttonAboveLowTextSPath.addLine(to: CGPoint(x: 623.03, y: 346))
        buttonAboveLowTextSPath.addCurve(to: CGPoint(x: 623.62, y: 346), controlPoint1: CGPoint(x: 623.03, y: 346), controlPoint2: CGPoint(x: 623.23, y: 346))
        buttonAboveLowTextSPath.addCurve(to: CGPoint(x: 624.97, y: 346), controlPoint1: CGPoint(x: 624.01, y: 346), controlPoint2: CGPoint(x: 624.46, y: 346))
        buttonAboveLowTextSPath.addCurve(to: CGPoint(x: 626.32, y: 346), controlPoint1: CGPoint(x: 625.48, y: 346), controlPoint2: CGPoint(x: 625.93, y: 346))
        buttonAboveLowTextSPath.addCurve(to: CGPoint(x: 626.9, y: 346), controlPoint1: CGPoint(x: 626.71, y: 346), controlPoint2: CGPoint(x: 626.9, y: 346))
        buttonAboveLowTextSPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonAboveLowTextSPath.fill()
        context.restoreGState()



        //// Button Above Top Text S Drawing
        let buttonAboveTopTextSRect = CGRect(x: 589, y: 306, width: 108, height: 22)
        let buttonAboveTopTextSTextContent = "RESTR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextSStyle = NSMutableParagraphStyle()
        buttonAboveTopTextSStyle.alignment = .center
        let buttonAboveTopTextSFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextSStyle]

        let buttonAboveTopTextSTextHeight: CGFloat = buttonAboveTopTextSTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextSRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextSFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextSRect)
        buttonAboveTopTextSTextContent.draw(in: CGRect(x: buttonAboveTopTextSRect.minX, y: buttonAboveTopTextSRect.minY + (buttonAboveTopTextSRect.height - buttonAboveTopTextSTextHeight) / 2, width: buttonAboveTopTextSRect.width, height: buttonAboveTopTextSTextHeight), withAttributes: buttonAboveTopTextSFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// A
        //// Background A Drawing
        let backgroundARect = CGRect(x: 418, y: 306, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundARect)
        context.translateBy(x: backgroundARect.minX, y: backgroundARect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundARect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main A Drawing
        let buttonMainARect = CGRect(x: 467, y: 400, width: 50, height: 34)
        let buttonMainATextContent = "A"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainAStyle = NSMutableParagraphStyle()
        buttonMainAStyle.alignment = .center
        let buttonMainAFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainAStyle]

        let buttonMainATextHeight: CGFloat = buttonMainATextContent.boundingRect(with: CGSize(width: buttonMainARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainARect)
        buttonMainATextContent.draw(in: CGRect(x: buttonMainARect.minX, y: buttonMainARect.minY + (buttonMainARect.height - buttonMainATextHeight) / 2, width: buttonMainARect.width, height: buttonMainATextHeight), withAttributes: buttonMainAFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text A Drawing
        let buttonLowTextARect = CGRect(x: 439, y: 375, width: 108, height: 22)
        let buttonLowTextATextContent = "STOP"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextAStyle = NSMutableParagraphStyle()
        buttonLowTextAStyle.alignment = .center
        let buttonLowTextAFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextAStyle]

        let buttonLowTextATextHeight: CGFloat = buttonLowTextATextContent.boundingRect(with: CGSize(width: buttonLowTextARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextARect)
        buttonLowTextATextContent.draw(in: CGRect(x: buttonLowTextARect.minX, y: buttonLowTextARect.minY + (buttonLowTextARect.height - buttonLowTextATextHeight) / 2, width: buttonLowTextARect.width, height: buttonLowTextATextHeight), withAttributes: buttonLowTextAFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text A Drawing
        let buttonTopTextARect = CGRect(x: 439, y: 355, width: 108, height: 22)
        let buttonTopTextATextContent = "NEW"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextAStyle = NSMutableParagraphStyle()
        buttonTopTextAStyle.alignment = .center
        let buttonTopTextAFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextAStyle]

        let buttonTopTextATextHeight: CGFloat = buttonTopTextATextContent.boundingRect(with: CGSize(width: buttonTopTextARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextARect)
        buttonTopTextATextContent.draw(in: CGRect(x: buttonTopTextARect.minX, y: buttonTopTextARect.minY + (buttonTopTextARect.height - buttonTopTextATextHeight) / 2, width: buttonTopTextARect.width, height: buttonTopTextATextHeight), withAttributes: buttonTopTextAFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text A Drawing
        let buttonAboveLowTextAPath = UIBezierPath()
        buttonAboveLowTextAPath.move(to: CGPoint(x: 476.51, y: 342.68))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 485.03, y: 334.99))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 486.13, y: 334))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 487.17, y: 335.04))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 497.45, y: 345.24))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 498.8, y: 346.58))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 496.55, y: 346.63))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 498.13, y: 344.91))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 504.3, y: 338.17))
        buttonAboveLowTextAPath.addCurve(to: CGPoint(x: 506.49, y: 338.06), controlPoint1: CGPoint(x: 504.88, y: 337.54), controlPoint2: CGPoint(x: 505.86, y: 337.49))
        buttonAboveLowTextAPath.addCurve(to: CGPoint(x: 506.6, y: 340.24), controlPoint1: CGPoint(x: 507.13, y: 338.64), controlPoint2: CGPoint(x: 507.17, y: 339.61))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 498.85, y: 348.7))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 497.75, y: 349.9))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 496.6, y: 348.76))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 486.04, y: 338.27))
        buttonAboveLowTextAPath.addLine(to: CGPoint(x: 478.59, y: 344.96))
        buttonAboveLowTextAPath.addCurve(to: CGPoint(x: 476.4, y: 344.86), controlPoint1: CGPoint(x: 477.96, y: 345.53), controlPoint2: CGPoint(x: 476.98, y: 345.48))
        buttonAboveLowTextAPath.addCurve(to: CGPoint(x: 476.51, y: 342.68), controlPoint1: CGPoint(x: 475.83, y: 344.23), controlPoint2: CGPoint(x: 475.87, y: 343.25))
        buttonAboveLowTextAPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        buttonAboveLowTextAPath.fill()
        context.restoreGState()



        //// Button Above Top Text A Drawing
        let buttonAboveTopTextARect = CGRect(x: 437, y: 306, width: 108, height: 22)
        let buttonAboveTopTextATextContent = "READ"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextAStyle = NSMutableParagraphStyle()
        buttonAboveTopTextAStyle.alignment = .center
        let buttonAboveTopTextAFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextAStyle]

        let buttonAboveTopTextATextHeight: CGFloat = buttonAboveTopTextATextContent.boundingRect(with: CGSize(width: buttonAboveTopTextARect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextAFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextARect)
        buttonAboveTopTextATextContent.draw(in: CGRect(x: buttonAboveTopTextARect.minX, y: buttonAboveTopTextARect.minY + (buttonAboveTopTextARect.height - buttonAboveTopTextATextHeight) / 2, width: buttonAboveTopTextARect.width, height: buttonAboveTopTextATextHeight), withAttributes: buttonAboveTopTextAFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Edit
        //// Symbol Edit Drawing
        let symbolEditRect = CGRect(x: 229, y: 306, width: 183, height: 142)
        context.saveGState()
        context.clip(to: symbolEditRect)
        context.translateBy(x: symbolEditRect.minX, y: symbolEditRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolEditRect.width, height: symbolEditRect.height))
        context.restoreGState()


        //// Button Upper Text Edit Drawing
        let buttonUpperTextEditRect = CGRect(x: 243, y: 376, width: 157, height: 23)
        let buttonUpperTextEditTextContent = "EDIT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextEditStyle = NSMutableParagraphStyle()
        buttonUpperTextEditStyle.alignment = .center
        let buttonUpperTextEditFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextEditStyle]

        let buttonUpperTextEditTextHeight: CGFloat = buttonUpperTextEditTextContent.boundingRect(with: CGSize(width: buttonUpperTextEditRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextEditFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextEditRect)
        buttonUpperTextEditTextContent.draw(in: CGRect(x: buttonUpperTextEditRect.minX, y: buttonUpperTextEditRect.minY + (buttonUpperTextEditRect.height - buttonUpperTextEditTextHeight) / 2, width: buttonUpperTextEditRect.width, height: buttonUpperTextEditTextHeight), withAttributes: buttonUpperTextEditFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Extend Mode
        //// Symbol Extend Mode Drawing
        let symbolExtendModeRect = CGRect(x: 1, y: 306, width: 221, height: 142)
        context.saveGState()
        context.clip(to: symbolExtendModeRect)
        context.translateBy(x: symbolExtendModeRect.minX, y: symbolExtendModeRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolExtendModeRect.width, height: symbolExtendModeRect.height))
        context.restoreGState()


        //// Button Upper Text Extend Mode Drawing
        let buttonUpperTextExtendModeRect = CGRect(x: 18, y: 380, width: 189, height: 23)
        let buttonUpperTextExtendModeTextContent = "MODE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextExtendModeStyle = NSMutableParagraphStyle()
        buttonUpperTextExtendModeStyle.alignment = .center
        let buttonUpperTextExtendModeFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextExtendModeStyle]

        let buttonUpperTextExtendModeTextHeight: CGFloat = buttonUpperTextExtendModeTextContent.boundingRect(with: CGSize(width: buttonUpperTextExtendModeRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextExtendModeFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextExtendModeRect)
        buttonUpperTextExtendModeTextContent.draw(in: CGRect(x: buttonUpperTextExtendModeRect.minX, y: buttonUpperTextExtendModeRect.minY + (buttonUpperTextExtendModeRect.height - buttonUpperTextExtendModeTextHeight) / 2, width: buttonUpperTextExtendModeRect.width, height: buttonUpperTextExtendModeTextHeight), withAttributes: buttonUpperTextExtendModeFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text Extend Mode 2 Drawing
        let buttonUpperTextExtendMode2Rect = CGRect(x: 18, y: 358, width: 189, height: 23)
        let buttonUpperTextExtendMode2TextContent = "EXTEND"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextExtendMode2Style = NSMutableParagraphStyle()
        buttonUpperTextExtendMode2Style.alignment = .center
        let buttonUpperTextExtendMode2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextExtendMode2Style]

        let buttonUpperTextExtendMode2TextHeight: CGFloat = buttonUpperTextExtendMode2TextContent.boundingRect(with: CGSize(width: buttonUpperTextExtendMode2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextExtendMode2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextExtendMode2Rect)
        buttonUpperTextExtendMode2TextContent.draw(in: CGRect(x: buttonUpperTextExtendMode2Rect.minX, y: buttonUpperTextExtendMode2Rect.minY + (buttonUpperTextExtendMode2Rect.height - buttonUpperTextExtendMode2TextHeight) / 2, width: buttonUpperTextExtendMode2Rect.width, height: buttonUpperTextExtendMode2TextHeight), withAttributes: buttonUpperTextExtendMode2FontAttributes)
        context.restoreGState()
        context.restoreGState()







        //// Row 2
        //// P
        //// Background P Drawing
        let backgroundPRect = CGRect(x: 1747, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundPRect)
        context.translateBy(x: backgroundPRect.minX, y: backgroundPRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundPRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main P Drawing
        let buttonMainPRect = CGRect(x: 1796, y: 248, width: 50, height: 34)
        let buttonMainPTextContent = "P"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainPStyle = NSMutableParagraphStyle()
        buttonMainPStyle.alignment = .center
        let buttonMainPFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainPStyle]

        let buttonMainPTextHeight: CGFloat = buttonMainPTextContent.boundingRect(with: CGSize(width: buttonMainPRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainPFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainPRect)
        buttonMainPTextContent.draw(in: CGRect(x: buttonMainPRect.minX, y: buttonMainPRect.minY + (buttonMainPRect.height - buttonMainPTextHeight) / 2, width: buttonMainPRect.width, height: buttonMainPTextHeight), withAttributes: buttonMainPFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text P Drawing
        let buttonTopTextPRect = CGRect(x: 1768, y: 203, width: 108, height: 22)
        let buttonTopTextPTextContent = "PRINT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextPStyle = NSMutableParagraphStyle()
        buttonTopTextPStyle.alignment = .center
        let buttonTopTextPFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextPStyle]

        let buttonTopTextPTextHeight: CGFloat = buttonTopTextPTextContent.boundingRect(with: CGSize(width: buttonTopTextPRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextPFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextPRect)
        buttonTopTextPTextContent.draw(in: CGRect(x: buttonTopTextPRect.minX, y: buttonTopTextPRect.minY + (buttonTopTextPRect.height - buttonTopTextPTextHeight) / 2, width: buttonTopTextPRect.width, height: buttonTopTextPTextHeight), withAttributes: buttonTopTextPFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text P Drawing
        let buttonAboveLowTextPRect = CGRect(x: 1768, y: 174, width: 106, height: 24)
        let buttonAboveLowTextPTextContent = "Â©"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextPStyle = NSMutableParagraphStyle()
        buttonAboveLowTextPStyle.alignment = .center
        let buttonAboveLowTextPFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextPStyle]

        let buttonAboveLowTextPTextHeight: CGFloat = buttonAboveLowTextPTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextPRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextPFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextPRect)
        buttonAboveLowTextPTextContent.draw(in: CGRect(x: buttonAboveLowTextPRect.minX, y: buttonAboveLowTextPRect.minY + (buttonAboveLowTextPRect.height - buttonAboveLowTextPTextHeight) / 2, width: buttonAboveLowTextPRect.width, height: buttonAboveLowTextPTextHeight), withAttributes: buttonAboveLowTextPFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text P Drawing
        let buttonAboveTopTextPRect = CGRect(x: 1766, y: 154, width: 108, height: 22)
        let buttonAboveTopTextPTextContent = "TAB"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextPStyle = NSMutableParagraphStyle()
        buttonAboveTopTextPStyle.alignment = .center
        let buttonAboveTopTextPFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextPStyle]

        let buttonAboveTopTextPTextHeight: CGFloat = buttonAboveTopTextPTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextPRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextPFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextPRect)
        buttonAboveTopTextPTextContent.draw(in: CGRect(x: buttonAboveTopTextPRect.minX, y: buttonAboveTopTextPRect.minY + (buttonAboveTopTextPRect.height - buttonAboveTopTextPTextHeight) / 2, width: buttonAboveTopTextPRect.width, height: buttonAboveTopTextPTextHeight), withAttributes: buttonAboveTopTextPFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// O
        //// Background O Drawing
        let backgroundORect = CGRect(x: 1595, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundORect)
        context.translateBy(x: backgroundORect.minX, y: backgroundORect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundORect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main O Drawing
        let buttonMainORect = CGRect(x: 1644, y: 248, width: 50, height: 34)
        let buttonMainOTextContent = "O"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainOStyle = NSMutableParagraphStyle()
        buttonMainOStyle.alignment = .center
        let buttonMainOFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainOStyle]

        let buttonMainOTextHeight: CGFloat = buttonMainOTextContent.boundingRect(with: CGSize(width: buttonMainORect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainOFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainORect)
        buttonMainOTextContent.draw(in: CGRect(x: buttonMainORect.minX, y: buttonMainORect.minY + (buttonMainORect.height - buttonMainOTextHeight) / 2, width: buttonMainORect.width, height: buttonMainOTextHeight), withAttributes: buttonMainOFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text O Drawing
        let buttonTopTextORect = CGRect(x: 1616, y: 203, width: 108, height: 22)
        let buttonTopTextOTextContent = "POKE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextOStyle = NSMutableParagraphStyle()
        buttonTopTextOStyle.alignment = .center
        let buttonTopTextOFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextOStyle]

        let buttonTopTextOTextHeight: CGFloat = buttonTopTextOTextContent.boundingRect(with: CGSize(width: buttonTopTextORect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextOFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextORect)
        buttonTopTextOTextContent.draw(in: CGRect(x: buttonTopTextORect.minX, y: buttonTopTextORect.minY + (buttonTopTextORect.height - buttonTopTextOTextHeight) / 2, width: buttonTopTextORect.width, height: buttonTopTextOTextHeight), withAttributes: buttonTopTextOFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text O Drawing
        let buttonAboveLowTextORect = CGRect(x: 1616, y: 174, width: 106, height: 24)
        let buttonAboveLowTextOTextContent = "OUT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextOStyle = NSMutableParagraphStyle()
        buttonAboveLowTextOStyle.alignment = .center
        let buttonAboveLowTextOFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextOStyle]

        let buttonAboveLowTextOTextHeight: CGFloat = buttonAboveLowTextOTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextORect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextOFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextORect)
        buttonAboveLowTextOTextContent.draw(in: CGRect(x: buttonAboveLowTextORect.minX, y: buttonAboveLowTextORect.minY + (buttonAboveLowTextORect.height - buttonAboveLowTextOTextHeight) / 2, width: buttonAboveLowTextORect.width, height: buttonAboveLowTextOTextHeight), withAttributes: buttonAboveLowTextOFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text O Drawing
        let buttonAboveTopTextORect = CGRect(x: 1614, y: 154, width: 108, height: 22)
        let buttonAboveTopTextOTextContent = "PEEK"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextOStyle = NSMutableParagraphStyle()
        buttonAboveTopTextOStyle.alignment = .center
        let buttonAboveTopTextOFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextOStyle]

        let buttonAboveTopTextOTextHeight: CGFloat = buttonAboveTopTextOTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextORect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextOFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextORect)
        buttonAboveTopTextOTextContent.draw(in: CGRect(x: buttonAboveTopTextORect.minX, y: buttonAboveTopTextORect.minY + (buttonAboveTopTextORect.height - buttonAboveTopTextOTextHeight) / 2, width: buttonAboveTopTextORect.width, height: buttonAboveTopTextOTextHeight), withAttributes: buttonAboveTopTextOFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// I
        //// Background I Drawing
        let backgroundIRect = CGRect(x: 1444, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundIRect)
        context.translateBy(x: backgroundIRect.minX, y: backgroundIRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundIRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main I Drawing
        let buttonMainIRect = CGRect(x: 1493, y: 248, width: 50, height: 34)
        let buttonMainITextContent = "I"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainIStyle = NSMutableParagraphStyle()
        buttonMainIStyle.alignment = .center
        let buttonMainIFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainIStyle]

        let buttonMainITextHeight: CGFloat = buttonMainITextContent.boundingRect(with: CGSize(width: buttonMainIRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainIFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainIRect)
        buttonMainITextContent.draw(in: CGRect(x: buttonMainIRect.minX, y: buttonMainIRect.minY + (buttonMainIRect.height - buttonMainITextHeight) / 2, width: buttonMainIRect.width, height: buttonMainITextHeight), withAttributes: buttonMainIFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text I Drawing
        let buttonLowTextIRect = CGRect(x: 1465, y: 223, width: 108, height: 22)
        let buttonLowTextITextContent = "AT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextIStyle = NSMutableParagraphStyle()
        buttonLowTextIStyle.alignment = .center
        let buttonLowTextIFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextIStyle]

        let buttonLowTextITextHeight: CGFloat = buttonLowTextITextContent.boundingRect(with: CGSize(width: buttonLowTextIRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextIFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextIRect)
        buttonLowTextITextContent.draw(in: CGRect(x: buttonLowTextIRect.minX, y: buttonLowTextIRect.minY + (buttonLowTextIRect.height - buttonLowTextITextHeight) / 2, width: buttonLowTextIRect.width, height: buttonLowTextITextHeight), withAttributes: buttonLowTextIFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text I Drawing
        let buttonTopTextIRect = CGRect(x: 1465, y: 203, width: 108, height: 22)
        let buttonTopTextITextContent = "INPUT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextIStyle = NSMutableParagraphStyle()
        buttonTopTextIStyle.alignment = .center
        let buttonTopTextIFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextIStyle]

        let buttonTopTextITextHeight: CGFloat = buttonTopTextITextContent.boundingRect(with: CGSize(width: buttonTopTextIRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextIFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextIRect)
        buttonTopTextITextContent.draw(in: CGRect(x: buttonTopTextIRect.minX, y: buttonTopTextIRect.minY + (buttonTopTextIRect.height - buttonTopTextITextHeight) / 2, width: buttonTopTextIRect.width, height: buttonTopTextITextHeight), withAttributes: buttonTopTextIFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text I Drawing
        let buttonAboveLowTextIRect = CGRect(x: 1465, y: 174, width: 106, height: 24)
        let buttonAboveLowTextITextContent = "IN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextIStyle = NSMutableParagraphStyle()
        buttonAboveLowTextIStyle.alignment = .center
        let buttonAboveLowTextIFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextIStyle]

        let buttonAboveLowTextITextHeight: CGFloat = buttonAboveLowTextITextContent.boundingRect(with: CGSize(width: buttonAboveLowTextIRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextIFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextIRect)
        buttonAboveLowTextITextContent.draw(in: CGRect(x: buttonAboveLowTextIRect.minX, y: buttonAboveLowTextIRect.minY + (buttonAboveLowTextIRect.height - buttonAboveLowTextITextHeight) / 2, width: buttonAboveLowTextIRect.width, height: buttonAboveLowTextITextHeight), withAttributes: buttonAboveLowTextIFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text I Drawing
        let buttonAboveTopTextIRect = CGRect(x: 1463, y: 154, width: 108, height: 22)
        let buttonAboveTopTextITextContent = "CODE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextIStyle = NSMutableParagraphStyle()
        buttonAboveTopTextIStyle.alignment = .center
        let buttonAboveTopTextIFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextIStyle]

        let buttonAboveTopTextITextHeight: CGFloat = buttonAboveTopTextITextContent.boundingRect(with: CGSize(width: buttonAboveTopTextIRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextIFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextIRect)
        buttonAboveTopTextITextContent.draw(in: CGRect(x: buttonAboveTopTextIRect.minX, y: buttonAboveTopTextIRect.minY + (buttonAboveTopTextIRect.height - buttonAboveTopTextITextHeight) / 2, width: buttonAboveTopTextIRect.width, height: buttonAboveTopTextITextHeight), withAttributes: buttonAboveTopTextIFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// U
        //// Background U Drawing
        let backgroundURect = CGRect(x: 1293, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundURect)
        context.translateBy(x: backgroundURect.minX, y: backgroundURect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundURect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main U Drawing
        let buttonMainURect = CGRect(x: 1342, y: 248, width: 50, height: 34)
        let buttonMainUTextContent = "U"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainUStyle = NSMutableParagraphStyle()
        buttonMainUStyle.alignment = .center
        let buttonMainUFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainUStyle]

        let buttonMainUTextHeight: CGFloat = buttonMainUTextContent.boundingRect(with: CGSize(width: buttonMainURect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainUFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainURect)
        buttonMainUTextContent.draw(in: CGRect(x: buttonMainURect.minX, y: buttonMainURect.minY + (buttonMainURect.height - buttonMainUTextHeight) / 2, width: buttonMainURect.width, height: buttonMainUTextHeight), withAttributes: buttonMainUFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text U Drawing
        let buttonLowTextURect = CGRect(x: 1314, y: 223, width: 108, height: 22)
        let buttonLowTextUTextContent = "OR"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextUStyle = NSMutableParagraphStyle()
        buttonLowTextUStyle.alignment = .center
        let buttonLowTextUFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextUStyle]

        let buttonLowTextUTextHeight: CGFloat = buttonLowTextUTextContent.boundingRect(with: CGSize(width: buttonLowTextURect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextUFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextURect)
        buttonLowTextUTextContent.draw(in: CGRect(x: buttonLowTextURect.minX, y: buttonLowTextURect.minY + (buttonLowTextURect.height - buttonLowTextUTextHeight) / 2, width: buttonLowTextURect.width, height: buttonLowTextUTextHeight), withAttributes: buttonLowTextUFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text U Drawing
        let buttonTopTextURect = CGRect(x: 1314, y: 203, width: 108, height: 22)
        let buttonTopTextUTextContent = "IF"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextUStyle = NSMutableParagraphStyle()
        buttonTopTextUStyle.alignment = .center
        let buttonTopTextUFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextUStyle]

        let buttonTopTextUTextHeight: CGFloat = buttonTopTextUTextContent.boundingRect(with: CGSize(width: buttonTopTextURect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextUFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextURect)
        buttonTopTextUTextContent.draw(in: CGRect(x: buttonTopTextURect.minX, y: buttonTopTextURect.minY + (buttonTopTextURect.height - buttonTopTextUTextHeight) / 2, width: buttonTopTextURect.width, height: buttonTopTextUTextHeight), withAttributes: buttonTopTextUFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text U Drawing
        let buttonAboveLowTextURect = CGRect(x: 1333, y: 174, width: 87, height: 24)
        let buttonAboveLowTextUTextContent = "]"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextUStyle = NSMutableParagraphStyle()
        buttonAboveLowTextUStyle.alignment = .left
        let buttonAboveLowTextUFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 17)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextUStyle]

        let buttonAboveLowTextUTextHeight: CGFloat = buttonAboveLowTextUTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextURect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextUFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextURect)
        buttonAboveLowTextUTextContent.draw(in: CGRect(x: buttonAboveLowTextURect.minX, y: buttonAboveLowTextURect.minY + (buttonAboveLowTextURect.height - buttonAboveLowTextUTextHeight) / 2, width: buttonAboveLowTextURect.width, height: buttonAboveLowTextUTextHeight), withAttributes: buttonAboveLowTextUFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text U Drawing
        let buttonAboveTopTextURect = CGRect(x: 1312, y: 154, width: 108, height: 22)
        let buttonAboveTopTextUTextContent = "CHR$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextUStyle = NSMutableParagraphStyle()
        buttonAboveTopTextUStyle.alignment = .center
        let buttonAboveTopTextUFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextUStyle]

        let buttonAboveTopTextUTextHeight: CGFloat = buttonAboveTopTextUTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextURect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextUFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextURect)
        buttonAboveTopTextUTextContent.draw(in: CGRect(x: buttonAboveTopTextURect.minX, y: buttonAboveTopTextURect.minY + (buttonAboveTopTextURect.height - buttonAboveTopTextUTextHeight) / 2, width: buttonAboveTopTextURect.width, height: buttonAboveTopTextUTextHeight), withAttributes: buttonAboveTopTextUFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Y
        //// Background Y Drawing
        let backgroundYRect = CGRect(x: 1141, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundYRect)
        context.translateBy(x: backgroundYRect.minX, y: backgroundYRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundYRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Y Drawing
        let buttonMainYRect = CGRect(x: 1190, y: 248, width: 50, height: 34)
        let buttonMainYTextContent = "Y"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainYStyle = NSMutableParagraphStyle()
        buttonMainYStyle.alignment = .center
        let buttonMainYFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainYStyle]

        let buttonMainYTextHeight: CGFloat = buttonMainYTextContent.boundingRect(with: CGSize(width: buttonMainYRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainYFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainYRect)
        buttonMainYTextContent.draw(in: CGRect(x: buttonMainYRect.minX, y: buttonMainYRect.minY + (buttonMainYRect.height - buttonMainYTextHeight) / 2, width: buttonMainYRect.width, height: buttonMainYTextHeight), withAttributes: buttonMainYFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text Y Drawing
        let buttonLowTextYRect = CGRect(x: 1162, y: 223, width: 108, height: 22)
        let buttonLowTextYTextContent = "AND"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextYStyle = NSMutableParagraphStyle()
        buttonLowTextYStyle.alignment = .center
        let buttonLowTextYFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextYStyle]

        let buttonLowTextYTextHeight: CGFloat = buttonLowTextYTextContent.boundingRect(with: CGSize(width: buttonLowTextYRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextYFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextYRect)
        buttonLowTextYTextContent.draw(in: CGRect(x: buttonLowTextYRect.minX, y: buttonLowTextYRect.minY + (buttonLowTextYRect.height - buttonLowTextYTextHeight) / 2, width: buttonLowTextYRect.width, height: buttonLowTextYTextHeight), withAttributes: buttonLowTextYFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text Y Drawing
        let buttonTopTextYRect = CGRect(x: 1162, y: 203, width: 108, height: 22)
        let buttonTopTextYTextContent = "RETURN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextYStyle = NSMutableParagraphStyle()
        buttonTopTextYStyle.alignment = .center
        let buttonTopTextYFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextYStyle]

        let buttonTopTextYTextHeight: CGFloat = buttonTopTextYTextContent.boundingRect(with: CGSize(width: buttonTopTextYRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextYFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextYRect)
        buttonTopTextYTextContent.draw(in: CGRect(x: buttonTopTextYRect.minX, y: buttonTopTextYRect.minY + (buttonTopTextYRect.height - buttonTopTextYTextHeight) / 2, width: buttonTopTextYRect.width, height: buttonTopTextYTextHeight), withAttributes: buttonTopTextYFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text Y Drawing
        let buttonAboveLowTextYRect = CGRect(x: 1181, y: 174, width: 87, height: 24)
        let buttonAboveLowTextYTextContent = "["
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextYStyle = NSMutableParagraphStyle()
        buttonAboveLowTextYStyle.alignment = .left
        let buttonAboveLowTextYFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 17)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextYStyle]

        let buttonAboveLowTextYTextHeight: CGFloat = buttonAboveLowTextYTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextYRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextYFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextYRect)
        buttonAboveLowTextYTextContent.draw(in: CGRect(x: buttonAboveLowTextYRect.minX, y: buttonAboveLowTextYRect.minY + (buttonAboveLowTextYRect.height - buttonAboveLowTextYTextHeight) / 2, width: buttonAboveLowTextYRect.width, height: buttonAboveLowTextYTextHeight), withAttributes: buttonAboveLowTextYFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text Y Drawing
        let buttonAboveTopTextYRect = CGRect(x: 1160, y: 154, width: 108, height: 22)
        let buttonAboveTopTextYTextContent = "STR$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextYStyle = NSMutableParagraphStyle()
        buttonAboveTopTextYStyle.alignment = .center
        let buttonAboveTopTextYFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextYStyle]

        let buttonAboveTopTextYTextHeight: CGFloat = buttonAboveTopTextYTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextYRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextYFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextYRect)
        buttonAboveTopTextYTextContent.draw(in: CGRect(x: buttonAboveTopTextYRect.minX, y: buttonAboveTopTextYRect.minY + (buttonAboveTopTextYRect.height - buttonAboveTopTextYTextHeight) / 2, width: buttonAboveTopTextYRect.width, height: buttonAboveTopTextYTextHeight), withAttributes: buttonAboveTopTextYFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// T
        //// Background T Drawing
        let backgroundTRect = CGRect(x: 989, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundTRect)
        context.translateBy(x: backgroundTRect.minX, y: backgroundTRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundTRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main T Drawing
        let buttonMainTRect = CGRect(x: 1038, y: 248, width: 50, height: 34)
        let buttonMainTTextContent = "T"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainTStyle = NSMutableParagraphStyle()
        buttonMainTStyle.alignment = .center
        let buttonMainTFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainTStyle]

        let buttonMainTTextHeight: CGFloat = buttonMainTTextContent.boundingRect(with: CGSize(width: buttonMainTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainTRect)
        buttonMainTTextContent.draw(in: CGRect(x: buttonMainTRect.minX, y: buttonMainTRect.minY + (buttonMainTRect.height - buttonMainTTextHeight) / 2, width: buttonMainTRect.width, height: buttonMainTTextHeight), withAttributes: buttonMainTFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text T Drawing
        let buttonLowTextTRect = CGRect(x: 1010, y: 222, width: 88, height: 22)
        let buttonLowTextTTextContent = ">"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextTStyle = NSMutableParagraphStyle()
        buttonLowTextTStyle.alignment = .right
        let buttonLowTextTFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextTStyle]

        let buttonLowTextTTextHeight: CGFloat = buttonLowTextTTextContent.boundingRect(with: CGSize(width: buttonLowTextTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextTRect)
        buttonLowTextTTextContent.draw(in: CGRect(x: buttonLowTextTRect.minX, y: buttonLowTextTRect.minY + (buttonLowTextTRect.height - buttonLowTextTTextHeight) / 2, width: buttonLowTextTRect.width, height: buttonLowTextTTextHeight), withAttributes: buttonLowTextTFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text T Drawing
        let buttonTopTextTRect = CGRect(x: 1010, y: 203, width: 108, height: 22)
        let buttonTopTextTTextContent = "RAND"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextTStyle = NSMutableParagraphStyle()
        buttonTopTextTStyle.alignment = .center
        let buttonTopTextTFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextTStyle]

        let buttonTopTextTTextHeight: CGFloat = buttonTopTextTTextContent.boundingRect(with: CGSize(width: buttonTopTextTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextTRect)
        buttonTopTextTTextContent.draw(in: CGRect(x: buttonTopTextTRect.minX, y: buttonTopTextTRect.minY + (buttonTopTextTRect.height - buttonTopTextTTextHeight) / 2, width: buttonTopTextTRect.width, height: buttonTopTextTTextHeight), withAttributes: buttonTopTextTFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text T Drawing
        let buttonAboveLowTextTRect = CGRect(x: 1008, y: 176, width: 108, height: 22)
        let buttonAboveLowTextTTextContent = "MERGE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextTStyle = NSMutableParagraphStyle()
        buttonAboveLowTextTStyle.alignment = .center
        let buttonAboveLowTextTFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextTStyle]

        let buttonAboveLowTextTTextHeight: CGFloat = buttonAboveLowTextTTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextTRect)
        buttonAboveLowTextTTextContent.draw(in: CGRect(x: buttonAboveLowTextTRect.minX, y: buttonAboveLowTextTRect.minY + (buttonAboveLowTextTRect.height - buttonAboveLowTextTTextHeight) / 2, width: buttonAboveLowTextTRect.width, height: buttonAboveLowTextTTextHeight), withAttributes: buttonAboveLowTextTFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text T Drawing
        let buttonAboveTopTextTRect = CGRect(x: 1008, y: 154, width: 108, height: 22)
        let buttonAboveTopTextTTextContent = "RND"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextTStyle = NSMutableParagraphStyle()
        buttonAboveTopTextTStyle.alignment = .center
        let buttonAboveTopTextTFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextTStyle]

        let buttonAboveTopTextTTextHeight: CGFloat = buttonAboveTopTextTTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextTRect)
        buttonAboveTopTextTTextContent.draw(in: CGRect(x: buttonAboveTopTextTRect.minX, y: buttonAboveTopTextTRect.minY + (buttonAboveTopTextTRect.height - buttonAboveTopTextTTextHeight) / 2, width: buttonAboveTopTextTRect.width, height: buttonAboveTopTextTTextHeight), withAttributes: buttonAboveTopTextTFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// R
        //// Background R Drawing
        let backgroundRRect = CGRect(x: 837, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundRRect)
        context.translateBy(x: backgroundRRect.minX, y: backgroundRRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundRRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main R Drawing
        let buttonMainRRect = CGRect(x: 886, y: 248, width: 50, height: 34)
        let buttonMainRTextContent = "R"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainRStyle = NSMutableParagraphStyle()
        buttonMainRStyle.alignment = .center
        let buttonMainRFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainRStyle]

        let buttonMainRTextHeight: CGFloat = buttonMainRTextContent.boundingRect(with: CGSize(width: buttonMainRRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainRFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainRRect)
        buttonMainRTextContent.draw(in: CGRect(x: buttonMainRRect.minX, y: buttonMainRRect.minY + (buttonMainRRect.height - buttonMainRTextHeight) / 2, width: buttonMainRRect.width, height: buttonMainRTextHeight), withAttributes: buttonMainRFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text R Drawing
        let buttonLowTextRRect = CGRect(x: 858, y: 222, width: 88, height: 22)
        let buttonLowTextRTextContent = "<"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextRStyle = NSMutableParagraphStyle()
        buttonLowTextRStyle.alignment = .right
        let buttonLowTextRFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextRStyle]

        let buttonLowTextRTextHeight: CGFloat = buttonLowTextRTextContent.boundingRect(with: CGSize(width: buttonLowTextRRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextRFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextRRect)
        buttonLowTextRTextContent.draw(in: CGRect(x: buttonLowTextRRect.minX, y: buttonLowTextRRect.minY + (buttonLowTextRRect.height - buttonLowTextRTextHeight) / 2, width: buttonLowTextRRect.width, height: buttonLowTextRTextHeight), withAttributes: buttonLowTextRFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text R Drawing
        let buttonTopTextRRect = CGRect(x: 858, y: 203, width: 108, height: 22)
        let buttonTopTextRTextContent = "RUN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextRStyle = NSMutableParagraphStyle()
        buttonTopTextRStyle.alignment = .center
        let buttonTopTextRFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextRStyle]

        let buttonTopTextRTextHeight: CGFloat = buttonTopTextRTextContent.boundingRect(with: CGSize(width: buttonTopTextRRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextRFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextRRect)
        buttonTopTextRTextContent.draw(in: CGRect(x: buttonTopTextRRect.minX, y: buttonTopTextRRect.minY + (buttonTopTextRRect.height - buttonTopTextRTextHeight) / 2, width: buttonTopTextRRect.width, height: buttonTopTextRTextHeight), withAttributes: buttonTopTextRFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text R Drawing
        let buttonAboveLowTextRRect = CGRect(x: 856, y: 176, width: 108, height: 22)
        let buttonAboveLowTextRTextContent = "VERIFY"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextRStyle = NSMutableParagraphStyle()
        buttonAboveLowTextRStyle.alignment = .center
        let buttonAboveLowTextRFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextRStyle]

        let buttonAboveLowTextRTextHeight: CGFloat = buttonAboveLowTextRTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextRRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextRFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextRRect)
        buttonAboveLowTextRTextContent.draw(in: CGRect(x: buttonAboveLowTextRRect.minX, y: buttonAboveLowTextRRect.minY + (buttonAboveLowTextRRect.height - buttonAboveLowTextRTextHeight) / 2, width: buttonAboveLowTextRRect.width, height: buttonAboveLowTextRTextHeight), withAttributes: buttonAboveLowTextRFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text R Drawing
        let buttonAboveTopTextRRect = CGRect(x: 856, y: 154, width: 108, height: 22)
        let buttonAboveTopTextRTextContent = "INT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextRStyle = NSMutableParagraphStyle()
        buttonAboveTopTextRStyle.alignment = .center
        let buttonAboveTopTextRFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextRStyle]

        let buttonAboveTopTextRTextHeight: CGFloat = buttonAboveTopTextRTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextRRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextRFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextRRect)
        buttonAboveTopTextRTextContent.draw(in: CGRect(x: buttonAboveTopTextRRect.minX, y: buttonAboveTopTextRRect.minY + (buttonAboveTopTextRRect.height - buttonAboveTopTextRTextHeight) / 2, width: buttonAboveTopTextRRect.width, height: buttonAboveTopTextRTextHeight), withAttributes: buttonAboveTopTextRFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// E
        //// Background E Drawing
        let backgroundERect = CGRect(x: 685, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundERect)
        context.translateBy(x: backgroundERect.minX, y: backgroundERect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundERect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main E Drawing
        let buttonMainERect = CGRect(x: 734, y: 248, width: 50, height: 34)
        let buttonMainETextContent = "E"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainEStyle = NSMutableParagraphStyle()
        buttonMainEStyle.alignment = .center
        let buttonMainEFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainEStyle]

        let buttonMainETextHeight: CGFloat = buttonMainETextContent.boundingRect(with: CGSize(width: buttonMainERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainERect)
        buttonMainETextContent.draw(in: CGRect(x: buttonMainERect.minX, y: buttonMainERect.minY + (buttonMainERect.height - buttonMainETextHeight) / 2, width: buttonMainERect.width, height: buttonMainETextHeight), withAttributes: buttonMainEFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text E Drawing
        let buttonLowTextERect = CGRect(x: 706, y: 222, width: 99, height: 22)
        let buttonLowTextETextContent = ">="
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextEStyle = NSMutableParagraphStyle()
        buttonLowTextEStyle.alignment = .right
        let buttonLowTextEFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextEStyle]

        let buttonLowTextETextHeight: CGFloat = buttonLowTextETextContent.boundingRect(with: CGSize(width: buttonLowTextERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextERect)
        buttonLowTextETextContent.draw(in: CGRect(x: buttonLowTextERect.minX, y: buttonLowTextERect.minY + (buttonLowTextERect.height - buttonLowTextETextHeight) / 2, width: buttonLowTextERect.width, height: buttonLowTextETextHeight), withAttributes: buttonLowTextEFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text E Drawing
        let buttonTopTextERect = CGRect(x: 706, y: 203, width: 108, height: 22)
        let buttonTopTextETextContent = "REM"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextEStyle = NSMutableParagraphStyle()
        buttonTopTextEStyle.alignment = .center
        let buttonTopTextEFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextEStyle]

        let buttonTopTextETextHeight: CGFloat = buttonTopTextETextContent.boundingRect(with: CGSize(width: buttonTopTextERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextERect)
        buttonTopTextETextContent.draw(in: CGRect(x: buttonTopTextERect.minX, y: buttonTopTextERect.minY + (buttonTopTextERect.height - buttonTopTextETextHeight) / 2, width: buttonTopTextERect.width, height: buttonTopTextETextHeight), withAttributes: buttonTopTextEFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text E Drawing
        let buttonAboveLowTextERect = CGRect(x: 704, y: 176, width: 108, height: 22)
        let buttonAboveLowTextETextContent = "ATN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextEStyle = NSMutableParagraphStyle()
        buttonAboveLowTextEStyle.alignment = .center
        let buttonAboveLowTextEFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextEStyle]

        let buttonAboveLowTextETextHeight: CGFloat = buttonAboveLowTextETextContent.boundingRect(with: CGSize(width: buttonAboveLowTextERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextERect)
        buttonAboveLowTextETextContent.draw(in: CGRect(x: buttonAboveLowTextERect.minX, y: buttonAboveLowTextERect.minY + (buttonAboveLowTextERect.height - buttonAboveLowTextETextHeight) / 2, width: buttonAboveLowTextERect.width, height: buttonAboveLowTextETextHeight), withAttributes: buttonAboveLowTextEFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text E Drawing
        let buttonAboveTopTextERect = CGRect(x: 704, y: 154, width: 108, height: 22)
        let buttonAboveTopTextETextContent = "TAN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextEStyle = NSMutableParagraphStyle()
        buttonAboveTopTextEStyle.alignment = .center
        let buttonAboveTopTextEFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextEStyle]

        let buttonAboveTopTextETextHeight: CGFloat = buttonAboveTopTextETextContent.boundingRect(with: CGSize(width: buttonAboveTopTextERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextERect)
        buttonAboveTopTextETextContent.draw(in: CGRect(x: buttonAboveTopTextERect.minX, y: buttonAboveTopTextERect.minY + (buttonAboveTopTextERect.height - buttonAboveTopTextETextHeight) / 2, width: buttonAboveTopTextERect.width, height: buttonAboveTopTextETextHeight), withAttributes: buttonAboveTopTextEFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// W
        //// Background Q 2 Drawing
        let backgroundQ2Rect = CGRect(x: 533, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundQ2Rect)
        context.translateBy(x: backgroundQ2Rect.minX, y: backgroundQ2Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundQ2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Q 2 Drawing
        let buttonMainQ2Rect = CGRect(x: 582, y: 248, width: 50, height: 34)
        let buttonMainQ2TextContent = "W"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainQ2Style = NSMutableParagraphStyle()
        buttonMainQ2Style.alignment = .center
        let buttonMainQ2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainQ2Style]

        let buttonMainQ2TextHeight: CGFloat = buttonMainQ2TextContent.boundingRect(with: CGSize(width: buttonMainQ2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainQ2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainQ2Rect)
        buttonMainQ2TextContent.draw(in: CGRect(x: buttonMainQ2Rect.minX, y: buttonMainQ2Rect.minY + (buttonMainQ2Rect.height - buttonMainQ2TextHeight) / 2, width: buttonMainQ2Rect.width, height: buttonMainQ2TextHeight), withAttributes: buttonMainQ2FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text W Drawing
        let buttonLowTextWRect = CGRect(x: 554, y: 222, width: 99, height: 22)
        let buttonLowTextWTextContent = "<>"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextWStyle = NSMutableParagraphStyle()
        buttonLowTextWStyle.alignment = .right
        let buttonLowTextWFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextWStyle]

        let buttonLowTextWTextHeight: CGFloat = buttonLowTextWTextContent.boundingRect(with: CGSize(width: buttonLowTextWRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextWFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextWRect)
        buttonLowTextWTextContent.draw(in: CGRect(x: buttonLowTextWRect.minX, y: buttonLowTextWRect.minY + (buttonLowTextWRect.height - buttonLowTextWTextHeight) / 2, width: buttonLowTextWRect.width, height: buttonLowTextWTextHeight), withAttributes: buttonLowTextWFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text W Drawing
        let buttonTopTextWRect = CGRect(x: 554, y: 203, width: 108, height: 22)
        let buttonTopTextWTextContent = "DRAW"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextWStyle = NSMutableParagraphStyle()
        buttonTopTextWStyle.alignment = .center
        let buttonTopTextWFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextWStyle]

        let buttonTopTextWTextHeight: CGFloat = buttonTopTextWTextContent.boundingRect(with: CGSize(width: buttonTopTextWRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextWFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextWRect)
        buttonTopTextWTextContent.draw(in: CGRect(x: buttonTopTextWRect.minX, y: buttonTopTextWRect.minY + (buttonTopTextWRect.height - buttonTopTextWTextHeight) / 2, width: buttonTopTextWRect.width, height: buttonTopTextWTextHeight), withAttributes: buttonTopTextWFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text W Drawing
        let buttonAboveLowTextWRect = CGRect(x: 552, y: 176, width: 108, height: 22)
        let buttonAboveLowTextWTextContent = "ACS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextWStyle = NSMutableParagraphStyle()
        buttonAboveLowTextWStyle.alignment = .center
        let buttonAboveLowTextWFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextWStyle]

        let buttonAboveLowTextWTextHeight: CGFloat = buttonAboveLowTextWTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextWRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextWFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextWRect)
        buttonAboveLowTextWTextContent.draw(in: CGRect(x: buttonAboveLowTextWRect.minX, y: buttonAboveLowTextWRect.minY + (buttonAboveLowTextWRect.height - buttonAboveLowTextWTextHeight) / 2, width: buttonAboveLowTextWRect.width, height: buttonAboveLowTextWTextHeight), withAttributes: buttonAboveLowTextWFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text W Drawing
        let buttonAboveTopTextWRect = CGRect(x: 552, y: 154, width: 108, height: 22)
        let buttonAboveTopTextWTextContent = "COS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextWStyle = NSMutableParagraphStyle()
        buttonAboveTopTextWStyle.alignment = .center
        let buttonAboveTopTextWFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextWStyle]

        let buttonAboveTopTextWTextHeight: CGFloat = buttonAboveTopTextWTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextWRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextWFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextWRect)
        buttonAboveTopTextWTextContent.draw(in: CGRect(x: buttonAboveTopTextWRect.minX, y: buttonAboveTopTextWRect.minY + (buttonAboveTopTextWRect.height - buttonAboveTopTextWTextHeight) / 2, width: buttonAboveTopTextWRect.width, height: buttonAboveTopTextWTextHeight), withAttributes: buttonAboveTopTextWFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Q
        //// Background Q Drawing
        let backgroundQRect = CGRect(x: 381, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundQRect)
        context.translateBy(x: backgroundQRect.minX, y: backgroundQRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundQRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Q Drawing
        let buttonMainQRect = CGRect(x: 430, y: 248, width: 50, height: 34)
        let buttonMainQTextContent = "Q"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainQStyle = NSMutableParagraphStyle()
        buttonMainQStyle.alignment = .center
        let buttonMainQFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainQStyle]

        let buttonMainQTextHeight: CGFloat = buttonMainQTextContent.boundingRect(with: CGSize(width: buttonMainQRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainQFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainQRect)
        buttonMainQTextContent.draw(in: CGRect(x: buttonMainQRect.minX, y: buttonMainQRect.minY + (buttonMainQRect.height - buttonMainQTextHeight) / 2, width: buttonMainQRect.width, height: buttonMainQTextHeight), withAttributes: buttonMainQFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Low Text Q Drawing
        let buttonLowTextQRect = CGRect(x: 402, y: 222, width: 99, height: 22)
        let buttonLowTextQTextContent = "<="
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowTextQStyle = NSMutableParagraphStyle()
        buttonLowTextQStyle.alignment = .right
        let buttonLowTextQFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 30)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowTextQStyle]

        let buttonLowTextQTextHeight: CGFloat = buttonLowTextQTextContent.boundingRect(with: CGSize(width: buttonLowTextQRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowTextQFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowTextQRect)
        buttonLowTextQTextContent.draw(in: CGRect(x: buttonLowTextQRect.minX, y: buttonLowTextQRect.minY + (buttonLowTextQRect.height - buttonLowTextQTextHeight) / 2, width: buttonLowTextQRect.width, height: buttonLowTextQTextHeight), withAttributes: buttonLowTextQFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Top Text Q Drawing
        let buttonTopTextQRect = CGRect(x: 402, y: 203, width: 108, height: 22)
        let buttonTopTextQTextContent = "PLOT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonTopTextQStyle = NSMutableParagraphStyle()
        buttonTopTextQStyle.alignment = .center
        let buttonTopTextQFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonTopTextQStyle]

        let buttonTopTextQTextHeight: CGFloat = buttonTopTextQTextContent.boundingRect(with: CGSize(width: buttonTopTextQRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonTopTextQFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonTopTextQRect)
        buttonTopTextQTextContent.draw(in: CGRect(x: buttonTopTextQRect.minX, y: buttonTopTextQRect.minY + (buttonTopTextQRect.height - buttonTopTextQTextHeight) / 2, width: buttonTopTextQRect.width, height: buttonTopTextQTextHeight), withAttributes: buttonTopTextQFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text Q Drawing
        let buttonAboveLowTextQRect = CGRect(x: 400, y: 176, width: 108, height: 22)
        let buttonAboveLowTextQTextContent = "ASN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextQStyle = NSMutableParagraphStyle()
        buttonAboveLowTextQStyle.alignment = .center
        let buttonAboveLowTextQFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextQStyle]

        let buttonAboveLowTextQTextHeight: CGFloat = buttonAboveLowTextQTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextQRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextQFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextQRect)
        buttonAboveLowTextQTextContent.draw(in: CGRect(x: buttonAboveLowTextQRect.minX, y: buttonAboveLowTextQRect.minY + (buttonAboveLowTextQRect.height - buttonAboveLowTextQTextHeight) / 2, width: buttonAboveLowTextQRect.width, height: buttonAboveLowTextQTextHeight), withAttributes: buttonAboveLowTextQFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text Q Drawing
        let buttonAboveTopTextQRect = CGRect(x: 400, y: 154, width: 108, height: 22)
        let buttonAboveTopTextQTextContent = "SIN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextQStyle = NSMutableParagraphStyle()
        buttonAboveTopTextQStyle.alignment = .center
        let buttonAboveTopTextQFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextQStyle]

        let buttonAboveTopTextQTextHeight: CGFloat = buttonAboveTopTextQTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextQRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextQFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextQRect)
        buttonAboveTopTextQTextContent.draw(in: CGRect(x: buttonAboveTopTextQRect.minX, y: buttonAboveTopTextQRect.minY + (buttonAboveTopTextQRect.height - buttonAboveTopTextQTextHeight) / 2, width: buttonAboveTopTextQRect.width, height: buttonAboveTopTextQTextHeight), withAttributes: buttonAboveTopTextQFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Graph
        //// Background Graph Drawing
        let backgroundGraphRect = CGRect(x: 229, y: 154, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundGraphRect)
        context.translateBy(x: backgroundGraphRect.minX, y: backgroundGraphRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundGraphRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text Graph Drawing
        let buttonLowerTextGraphRect = CGRect(x: 250, y: 222, width: 108, height: 23)
        let buttonLowerTextGraphTextContent = "GRAPH"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextGraphStyle = NSMutableParagraphStyle()
        buttonLowerTextGraphStyle.alignment = .center
        let buttonLowerTextGraphFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextGraphStyle]

        let buttonLowerTextGraphTextHeight: CGFloat = buttonLowerTextGraphTextContent.boundingRect(with: CGSize(width: buttonLowerTextGraphRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextGraphFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextGraphRect)
        buttonLowerTextGraphTextContent.draw(in: CGRect(x: buttonLowerTextGraphRect.minX, y: buttonLowerTextGraphRect.minY + (buttonLowerTextGraphRect.height - buttonLowerTextGraphTextHeight) / 2, width: buttonLowerTextGraphRect.width, height: buttonLowerTextGraphTextHeight), withAttributes: buttonLowerTextGraphFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// Delete
        //// Symbol Delete Drawing
        let symbolDeleteRect = CGRect(x: 1, y: 154, width: 221, height: 142)
        context.saveGState()
        context.clip(to: symbolDeleteRect)
        context.translateBy(x: symbolDeleteRect.minX, y: symbolDeleteRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolDeleteRect.width, height: symbolDeleteRect.height))
        context.restoreGState()


        //// Button Upper Text Delete Drawing
        let buttonUpperTextDeleteRect = CGRect(x: 18, y: 224, width: 189, height: 23)
        let buttonUpperTextDeleteTextContent = "DELETE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextDeleteStyle = NSMutableParagraphStyle()
        buttonUpperTextDeleteStyle.alignment = .center
        let buttonUpperTextDeleteFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextDeleteStyle]

        let buttonUpperTextDeleteTextHeight: CGFloat = buttonUpperTextDeleteTextContent.boundingRect(with: CGSize(width: buttonUpperTextDeleteRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextDeleteFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextDeleteRect)
        buttonUpperTextDeleteTextContent.draw(in: CGRect(x: buttonUpperTextDeleteRect.minX, y: buttonUpperTextDeleteRect.minY + (buttonUpperTextDeleteRect.height - buttonUpperTextDeleteTextHeight) / 2, width: buttonUpperTextDeleteRect.width, height: buttonUpperTextDeleteTextHeight), withAttributes: buttonUpperTextDeleteFontAttributes)
        context.restoreGState()
        context.restoreGState()







        //// Row 1
        //// Brk
        //// Symbol Brk Drawing
        let symbolBrkRect = CGRect(x: 1822, y: 2, width: 218, height: 142)
        context.saveGState()
        context.clip(to: symbolBrkRect)
        context.translateBy(x: symbolBrkRect.minX, y: symbolBrkRect.minY)

        ZX128KeyboardStyleKit.drawResizableKey(frame: CGRect(x: 0, y: 0, width: symbolBrkRect.width, height: symbolBrkRect.height))
        context.restoreGState()


        //// Button Upper Text Brk Drawing
        let buttonUpperTextBrkRect = CGRect(x: 1839, y: 72, width: 184, height: 23)
        let buttonUpperTextBrkTextContent = "BREAK"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextBrkStyle = NSMutableParagraphStyle()
        buttonUpperTextBrkStyle.alignment = .center
        let buttonUpperTextBrkFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextBrkStyle]

        let buttonUpperTextBrkTextHeight: CGFloat = buttonUpperTextBrkTextContent.boundingRect(with: CGSize(width: buttonUpperTextBrkRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextBrkFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextBrkRect)
        buttonUpperTextBrkTextContent.draw(in: CGRect(x: buttonUpperTextBrkRect.minX, y: buttonUpperTextBrkRect.minY + (buttonUpperTextBrkRect.height - buttonUpperTextBrkTextHeight) / 2, width: buttonUpperTextBrkRect.width, height: buttonUpperTextBrkTextHeight), withAttributes: buttonUpperTextBrkFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// 0
        //// Background 0 Drawing
        let background0Rect = CGRect(x: 1671, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background0Rect)
        context.translateBy(x: background0Rect.minX, y: background0Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background0Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 0 Drawing
        let buttonMain0Rect = CGRect(x: 1720, y: 96, width: 50, height: 34)
        let buttonMain0TextContent = "0"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain0Style = NSMutableParagraphStyle()
        buttonMain0Style.alignment = .center
        let buttonMain0FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain0Style]

        let buttonMain0TextHeight: CGFloat = buttonMain0TextContent.boundingRect(with: CGSize(width: buttonMain0Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain0FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain0Rect)
        buttonMain0TextContent.draw(in: CGRect(x: buttonMain0Rect.minX, y: buttonMain0Rect.minY + (buttonMain0Rect.height - buttonMain0TextHeight) / 2, width: buttonMain0Rect.width, height: buttonMain0TextHeight), withAttributes: buttonMain0FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 0 Drawing
        let buttonAboveLowText0Rect = CGRect(x: 1690, y: 24, width: 108, height: 22)
        let buttonAboveLowText0TextContent = "FORMAT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText0Style = NSMutableParagraphStyle()
        buttonAboveLowText0Style.alignment = .center
        let buttonAboveLowText0FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText0Style]

        let buttonAboveLowText0TextHeight: CGFloat = buttonAboveLowText0TextContent.boundingRect(with: CGSize(width: buttonAboveLowText0Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText0FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText0Rect)
        buttonAboveLowText0TextContent.draw(in: CGRect(x: buttonAboveLowText0Rect.minX, y: buttonAboveLowText0Rect.minY + (buttonAboveLowText0Rect.height - buttonAboveLowText0TextHeight) / 2, width: buttonAboveLowText0Rect.width, height: buttonAboveLowText0TextHeight), withAttributes: buttonAboveLowText0FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 0 Drawing
        let buttonAboveTopText0Rect = CGRect(x: 1690, y: 2, width: 108, height: 22)
        let buttonAboveTopText0TextContent = "BLACK"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText0Style = NSMutableParagraphStyle()
        buttonAboveTopText0Style.alignment = .center
        let buttonAboveTopText0FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText0Style]

        let buttonAboveTopText0TextHeight: CGFloat = buttonAboveTopText0TextContent.boundingRect(with: CGSize(width: buttonAboveTopText0Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText0FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText0Rect)
        buttonAboveTopText0TextContent.draw(in: CGRect(x: buttonAboveTopText0Rect.minX, y: buttonAboveTopText0Rect.minY + (buttonAboveTopText0Rect.height - buttonAboveTopText0TextHeight) / 2, width: buttonAboveTopText0Rect.width, height: buttonAboveTopText0TextHeight), withAttributes: buttonAboveTopText0FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1755.5, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1775.12, y: 70.63), controlPoint1: CGPoint(x: 1769.75, y: 70.63), controlPoint2: CGPoint(x: 1769.75, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.23, y: 70.63), controlPoint1: CGPoint(x: 1776.63, y: 70.63), controlPoint2: CGPoint(x: 1776.63, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.48, y: 70.63), controlPoint1: CGPoint(x: 1777.41, y: 70.63), controlPoint2: CGPoint(x: 1777.41, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.51, y: 70.63), controlPoint1: CGPoint(x: 1777.5, y: 70.63), controlPoint2: CGPoint(x: 1777.5, y: 70.63))
        bezierPath.addLine(to: CGPoint(x: 1777.51, y: 70.63))
        bezierPath.addLine(to: CGPoint(x: 1777.51, y: 73.47))
        bezierPath.addLine(to: CGPoint(x: 1777.51, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1777.5, y: 73.47), controlPoint1: CGPoint(x: 1777.5, y: 73.47), controlPoint2: CGPoint(x: 1777.5, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1777.5, y: 73.47), controlPoint1: CGPoint(x: 1777.5, y: 73.47), controlPoint2: CGPoint(x: 1777.5, y: 73.47))
        bezierPath.addLine(to: CGPoint(x: 1777.5, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.5, y: 70.63), controlPoint1: CGPoint(x: 1777.5, y: 70.63), controlPoint2: CGPoint(x: 1777.5, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.51, y: 70.63), controlPoint1: CGPoint(x: 1777.5, y: 70.63), controlPoint2: CGPoint(x: 1777.5, y: 70.63))
        bezierPath.addLine(to: CGPoint(x: 1777.51, y: 70.63))
        bezierPath.addLine(to: CGPoint(x: 1777.51, y: 70.63))
        bezierPath.addCurve(to: CGPoint(x: 1777.51, y: 73.47), controlPoint1: CGPoint(x: 1777.51, y: 73.47), controlPoint2: CGPoint(x: 1777.51, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1777.48, y: 73.47), controlPoint1: CGPoint(x: 1777.5, y: 73.47), controlPoint2: CGPoint(x: 1777.5, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1777.23, y: 73.47), controlPoint1: CGPoint(x: 1777.41, y: 73.47), controlPoint2: CGPoint(x: 1777.41, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1775.12, y: 73.47), controlPoint1: CGPoint(x: 1776.63, y: 73.47), controlPoint2: CGPoint(x: 1776.63, y: 73.47))
        bezierPath.addCurve(to: CGPoint(x: 1755.5, y: 73.47), controlPoint1: CGPoint(x: 1769.75, y: 73.47), controlPoint2: CGPoint(x: 1769.75, y: 73.47))
        bezierPath.addLine(to: CGPoint(x: 1755.5, y: 70.63))
        bezierPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        bezierPath.fill()
        context.restoreGState()





        //// 9
        //// Background 9 Drawing
        let background9Rect = CGRect(x: 1518, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background9Rect)
        context.translateBy(x: background9Rect.minX, y: background9Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background9Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 9 Drawing
        let buttonMain9Rect = CGRect(x: 1567, y: 96, width: 50, height: 34)
        let buttonMain9TextContent = "9"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain9Style = NSMutableParagraphStyle()
        buttonMain9Style.alignment = .center
        let buttonMain9FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain9Style]

        let buttonMain9TextHeight: CGFloat = buttonMain9TextContent.boundingRect(with: CGSize(width: buttonMain9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain9Rect)
        buttonMain9TextContent.draw(in: CGRect(x: buttonMain9Rect.minX, y: buttonMain9Rect.minY + (buttonMain9Rect.height - buttonMain9TextHeight) / 2, width: buttonMain9Rect.width, height: buttonMain9TextHeight), withAttributes: buttonMain9FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 9 Drawing
        let buttonUpperShift9Rect = CGRect(x: 1591, y: 42, width: 56, height: 52)
        let buttonUpperShift9TextContent = ")"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift9Style = NSMutableParagraphStyle()
        buttonUpperShift9Style.alignment = .center
        let buttonUpperShift9FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 42)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift9Style]

        let buttonUpperShift9TextHeight: CGFloat = buttonUpperShift9TextContent.boundingRect(with: CGSize(width: buttonUpperShift9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift9Rect)
        buttonUpperShift9TextContent.draw(in: CGRect(x: buttonUpperShift9Rect.minX, y: buttonUpperShift9Rect.minY + (buttonUpperShift9Rect.height - buttonUpperShift9TextHeight) / 2, width: buttonUpperShift9Rect.width, height: buttonUpperShift9TextHeight), withAttributes: buttonUpperShift9FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 9 Drawing
        let buttonAboveLowText9Rect = CGRect(x: 1537, y: 24, width: 108, height: 22)
        let buttonAboveLowText9TextContent = "CAT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText9Style = NSMutableParagraphStyle()
        buttonAboveLowText9Style.alignment = .center
        let buttonAboveLowText9FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText9Style]

        let buttonAboveLowText9TextHeight: CGFloat = buttonAboveLowText9TextContent.boundingRect(with: CGSize(width: buttonAboveLowText9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText9Rect)
        buttonAboveLowText9TextContent.draw(in: CGRect(x: buttonAboveLowText9Rect.minX, y: buttonAboveLowText9Rect.minY + (buttonAboveLowText9Rect.height - buttonAboveLowText9TextHeight) / 2, width: buttonAboveLowText9Rect.width, height: buttonAboveLowText9TextHeight), withAttributes: buttonAboveLowText9FontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// 8
        //// Background 8 Drawing
        let background8Rect = CGRect(x: 1367, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background8Rect)
        context.translateBy(x: background8Rect.minX, y: background8Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background8Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 8 Drawing
        let buttonMain8Rect = CGRect(x: 1415, y: 96, width: 50, height: 34)
        let buttonMain8TextContent = "8"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain8Style = NSMutableParagraphStyle()
        buttonMain8Style.alignment = .center
        let buttonMain8FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain8Style]

        let buttonMain8TextHeight: CGFloat = buttonMain8TextContent.boundingRect(with: CGSize(width: buttonMain8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain8Rect)
        buttonMain8TextContent.draw(in: CGRect(x: buttonMain8Rect.minX, y: buttonMain8Rect.minY + (buttonMain8Rect.height - buttonMain8TextHeight) / 2, width: buttonMain8Rect.width, height: buttonMain8TextHeight), withAttributes: buttonMain8FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 8 Drawing
        let buttonUpperShift8Rect = CGRect(x: 1437, y: 42, width: 56, height: 53)
        let buttonUpperShift8TextContent = "("
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift8Style = NSMutableParagraphStyle()
        buttonUpperShift8Style.alignment = .center
        let buttonUpperShift8FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 42)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift8Style]

        let buttonUpperShift8TextHeight: CGFloat = buttonUpperShift8TextContent.boundingRect(with: CGSize(width: buttonUpperShift8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift8Rect)
        buttonUpperShift8TextContent.draw(in: CGRect(x: buttonUpperShift8Rect.minX, y: buttonUpperShift8Rect.minY + (buttonUpperShift8Rect.height - buttonUpperShift8TextHeight) / 2, width: buttonUpperShift8Rect.width, height: buttonUpperShift8TextHeight), withAttributes: buttonUpperShift8FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 8 Drawing
        let buttonAboveLowText8Rect = CGRect(x: 1386, y: 24, width: 108, height: 22)
        let buttonAboveLowText8TextContent = "POINT"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText8Style = NSMutableParagraphStyle()
        buttonAboveLowText8Style.alignment = .center
        let buttonAboveLowText8FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText8Style]

        let buttonAboveLowText8TextHeight: CGFloat = buttonAboveLowText8TextContent.boundingRect(with: CGSize(width: buttonAboveLowText8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText8Rect)
        buttonAboveLowText8TextContent.draw(in: CGRect(x: buttonAboveLowText8Rect.minX, y: buttonAboveLowText8Rect.minY + (buttonAboveLowText8Rect.height - buttonAboveLowText8TextHeight) / 2, width: buttonAboveLowText8Rect.width, height: buttonAboveLowText8TextHeight), withAttributes: buttonAboveLowText8FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 8 Drawing
        let symbol8Path = UIBezierPath()
        symbol8Path.move(to: CGPoint(x: 1400, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 55.01))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 55.01))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 56.91))
        symbol8Path.close()
        symbol8Path.move(to: CGPoint(x: 1400, y: 85.31))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 85.31))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 85.31))
        symbol8Path.close()
        symbol8Path.move(to: CGPoint(x: 1400, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1402, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1402, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1400, y: 83.41))
        symbol8Path.close()
        symbol8Path.move(to: CGPoint(x: 1430, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 83.41))
        symbol8Path.addLine(to: CGPoint(x: 1432, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1430, y: 56.91))
        symbol8Path.addLine(to: CGPoint(x: 1430, y: 83.41))
        symbol8Path.close()
        buttonTextColor.setFill()
        symbol8Path.fill()




        //// 7
        //// Background 7 Drawing
        let background7Rect = CGRect(x: 1215, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background7Rect)
        context.translateBy(x: background7Rect.minX, y: background7Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background7Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 7 Drawing
        let buttonMain7Rect = CGRect(x: 1264, y: 96, width: 50, height: 34)
        let buttonMain7TextContent = "7"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain7Style = NSMutableParagraphStyle()
        buttonMain7Style.alignment = .center
        let buttonMain7FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain7Style]

        let buttonMain7TextHeight: CGFloat = buttonMain7TextContent.boundingRect(with: CGSize(width: buttonMain7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain7Rect)
        buttonMain7TextContent.draw(in: CGRect(x: buttonMain7Rect.minX, y: buttonMain7Rect.minY + (buttonMain7Rect.height - buttonMain7TextHeight) / 2, width: buttonMain7Rect.width, height: buttonMain7TextHeight), withAttributes: buttonMain7FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 7 Drawing
        let buttonUpperShift7Rect = CGRect(x: 1288, y: 64, width: 43, height: 31)
        let buttonUpperShift7TextContent = "â"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift7Style = NSMutableParagraphStyle()
        buttonUpperShift7Style.alignment = .center
        let buttonUpperShift7FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-MediumItalic", size: 41)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift7Style]

        let buttonUpperShift7TextHeight: CGFloat = buttonUpperShift7TextContent.boundingRect(with: CGSize(width: buttonUpperShift7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift7Rect)
        buttonUpperShift7TextContent.draw(in: CGRect(x: buttonUpperShift7Rect.minX, y: buttonUpperShift7Rect.minY + (buttonUpperShift7Rect.height - buttonUpperShift7TextHeight) / 2, width: buttonUpperShift7Rect.width, height: buttonUpperShift7TextHeight), withAttributes: buttonUpperShift7FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 7 Drawing
        let buttonAboveLowText7Rect = CGRect(x: 1234, y: 24, width: 108, height: 22)
        let buttonAboveLowText7TextContent = "ERASE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText7Style = NSMutableParagraphStyle()
        buttonAboveLowText7Style.alignment = .center
        let buttonAboveLowText7FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText7Style]

        let buttonAboveLowText7TextHeight: CGFloat = buttonAboveLowText7TextContent.boundingRect(with: CGSize(width: buttonAboveLowText7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText7Rect)
        buttonAboveLowText7TextContent.draw(in: CGRect(x: buttonAboveLowText7Rect.minX, y: buttonAboveLowText7Rect.minY + (buttonAboveLowText7Rect.height - buttonAboveLowText7TextHeight) / 2, width: buttonAboveLowText7Rect.width, height: buttonAboveLowText7TextHeight), withAttributes: buttonAboveLowText7FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 7 Drawing
        let buttonAboveTopText7Rect = CGRect(x: 1234, y: 2, width: 108, height: 22)
        let buttonAboveTopText7TextContent = "WHITE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText7Style = NSMutableParagraphStyle()
        buttonAboveTopText7Style.alignment = .center
        let buttonAboveTopText7FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText7Style]

        let buttonAboveTopText7TextHeight: CGFloat = buttonAboveTopText7TextContent.boundingRect(with: CGSize(width: buttonAboveTopText7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText7Rect)
        buttonAboveTopText7TextContent.draw(in: CGRect(x: buttonAboveTopText7Rect.minX, y: buttonAboveTopText7Rect.minY + (buttonAboveTopText7Rect.height - buttonAboveTopText7TextHeight) / 2, width: buttonAboveTopText7Rect.width, height: buttonAboveTopText7TextHeight), withAttributes: buttonAboveTopText7FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 7 Drawing
        let symbol7Path = UIBezierPath()
        symbol7Path.move(to: CGPoint(x: 1266, y: 57.85))
        symbol7Path.addCurve(to: CGPoint(x: 1265, y: 57.85), controlPoint1: CGPoint(x: 1266, y: 57.85), controlPoint2: CGPoint(x: 1265.63, y: 57.85))
        symbol7Path.addCurve(to: CGPoint(x: 1265, y: 70.16), controlPoint1: CGPoint(x: 1265, y: 60.88), controlPoint2: CGPoint(x: 1265, y: 70.16))
        symbol7Path.addLine(to: CGPoint(x: 1252, y: 70.16))
        symbol7Path.addCurve(to: CGPoint(x: 1252, y: 84.36), controlPoint1: CGPoint(x: 1252, y: 77.09), controlPoint2: CGPoint(x: 1252, y: 84.36))
        symbol7Path.addLine(to: CGPoint(x: 1266, y: 84.36))
        symbol7Path.addCurve(to: CGPoint(x: 1266, y: 57.85), controlPoint1: CGPoint(x: 1266, y: 84.36), controlPoint2: CGPoint(x: 1266, y: 62.68))
        symbol7Path.close()
        symbol7Path.move(to: CGPoint(x: 1282, y: 55.96))
        symbol7Path.addLine(to: CGPoint(x: 1282, y: 57.85))
        symbol7Path.addLine(to: CGPoint(x: 1282, y: 84.36))
        symbol7Path.addLine(to: CGPoint(x: 1281, y: 84.36))
        symbol7Path.addLine(to: CGPoint(x: 1282, y: 84.36))
        symbol7Path.addCurve(to: CGPoint(x: 1282, y: 86.25), controlPoint1: CGPoint(x: 1282, y: 84.36), controlPoint2: CGPoint(x: 1282, y: 86.25))
        symbol7Path.addLine(to: CGPoint(x: 1250, y: 86.25))
        symbol7Path.addLine(to: CGPoint(x: 1250, y: 84.36))
        symbol7Path.addCurve(to: CGPoint(x: 1250, y: 70.16), controlPoint1: CGPoint(x: 1250, y: 84.36), controlPoint2: CGPoint(x: 1250, y: 77.09))
        symbol7Path.addCurve(to: CGPoint(x: 1250, y: 57.85), controlPoint1: CGPoint(x: 1250, y: 70.16), controlPoint2: CGPoint(x: 1250, y: 60.89))
        symbol7Path.addCurve(to: CGPoint(x: 1250, y: 56.91), controlPoint1: CGPoint(x: 1250, y: 57.85), controlPoint2: CGPoint(x: 1250, y: 57.38))
        symbol7Path.addCurve(to: CGPoint(x: 1250, y: 55.96), controlPoint1: CGPoint(x: 1250, y: 56.43), controlPoint2: CGPoint(x: 1250, y: 55.96))
        symbol7Path.addLine(to: CGPoint(x: 1282, y: 55.96))
        symbol7Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol7Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol7Path.lineWidth = 2
        symbol7Path.stroke()




        //// 6
        //// Background 6 Drawing
        let background6Rect = CGRect(x: 1062, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background6Rect)
        context.translateBy(x: background6Rect.minX, y: background6Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 6 Drawing
        let buttonMain6Rect = CGRect(x: 1111, y: 96, width: 50, height: 34)
        let buttonMain6TextContent = "6"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain6Style = NSMutableParagraphStyle()
        buttonMain6Style.alignment = .center
        let buttonMain6FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain6Style]

        let buttonMain6TextHeight: CGFloat = buttonMain6TextContent.boundingRect(with: CGSize(width: buttonMain6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain6Rect)
        buttonMain6TextContent.draw(in: CGRect(x: buttonMain6Rect.minX, y: buttonMain6Rect.minY + (buttonMain6Rect.height - buttonMain6TextHeight) / 2, width: buttonMain6Rect.width, height: buttonMain6TextHeight), withAttributes: buttonMain6FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 6 Drawing
        let buttonUpperShift6Rect = CGRect(x: 1135, y: 55, width: 56, height: 36)
        let buttonUpperShift6TextContent = "&"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift6Style = NSMutableParagraphStyle()
        buttonUpperShift6Style.alignment = .center
        let buttonUpperShift6FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 36)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift6Style]

        let buttonUpperShift6TextHeight: CGFloat = buttonUpperShift6TextContent.boundingRect(with: CGSize(width: buttonUpperShift6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift6Rect)
        buttonUpperShift6TextContent.draw(in: CGRect(x: buttonUpperShift6Rect.minX, y: buttonUpperShift6Rect.minY + (buttonUpperShift6Rect.height - buttonUpperShift6TextHeight) / 2, width: buttonUpperShift6Rect.width, height: buttonUpperShift6TextHeight), withAttributes: buttonUpperShift6FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 6 Drawing
        let buttonAboveLowText6Rect = CGRect(x: 1081, y: 24, width: 108, height: 22)
        let buttonAboveLowText6TextContent = "MOVE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText6Style = NSMutableParagraphStyle()
        buttonAboveLowText6Style.alignment = .center
        let buttonAboveLowText6FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText6Style]

        let buttonAboveLowText6TextHeight: CGFloat = buttonAboveLowText6TextContent.boundingRect(with: CGSize(width: buttonAboveLowText6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText6Rect)
        buttonAboveLowText6TextContent.draw(in: CGRect(x: buttonAboveLowText6Rect.minX, y: buttonAboveLowText6Rect.minY + (buttonAboveLowText6Rect.height - buttonAboveLowText6TextHeight) / 2, width: buttonAboveLowText6Rect.width, height: buttonAboveLowText6TextHeight), withAttributes: buttonAboveLowText6FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 6 Drawing
        let buttonAboveTopText6Rect = CGRect(x: 1081, y: 2, width: 108, height: 22)
        let buttonAboveTopText6TextContent = "YELLOW"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText6Style = NSMutableParagraphStyle()
        buttonAboveTopText6Style.alignment = .center
        let buttonAboveTopText6FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText6Style]

        let buttonAboveTopText6TextHeight: CGFloat = buttonAboveTopText6TextContent.boundingRect(with: CGSize(width: buttonAboveTopText6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText6Rect)
        buttonAboveTopText6TextContent.draw(in: CGRect(x: buttonAboveTopText6Rect.minX, y: buttonAboveTopText6Rect.minY + (buttonAboveTopText6Rect.height - buttonAboveTopText6TextHeight) / 2, width: buttonAboveTopText6Rect.width, height: buttonAboveTopText6TextHeight), withAttributes: buttonAboveTopText6FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 6 Drawing
        let symbol6Path = UIBezierPath()
        symbol6Path.move(to: CGPoint(x: 1127, y: 56.91))
        symbol6Path.addLine(to: CGPoint(x: 1112, y: 56.91))
        symbol6Path.addCurve(to: CGPoint(x: 1112, y: 69.21), controlPoint1: CGPoint(x: 1112, y: 59.94), controlPoint2: CGPoint(x: 1112, y: 69.21))
        symbol6Path.addLine(to: CGPoint(x: 1099, y: 69.21))
        symbol6Path.addCurve(to: CGPoint(x: 1099, y: 83.41), controlPoint1: CGPoint(x: 1099, y: 76.14), controlPoint2: CGPoint(x: 1099, y: 83.41))
        symbol6Path.addLine(to: CGPoint(x: 1113, y: 83.41))
        symbol6Path.addCurve(to: CGPoint(x: 1113, y: 71.11), controlPoint1: CGPoint(x: 1113, y: 80.38), controlPoint2: CGPoint(x: 1113, y: 71.11))
        symbol6Path.addLine(to: CGPoint(x: 1127, y: 71.11))
        symbol6Path.addCurve(to: CGPoint(x: 1127, y: 56.91), controlPoint1: CGPoint(x: 1127, y: 64.18), controlPoint2: CGPoint(x: 1127, y: 56.91))
        symbol6Path.close()
        symbol6Path.move(to: CGPoint(x: 1129, y: 55.01))
        symbol6Path.addLine(to: CGPoint(x: 1129, y: 56.91))
        symbol6Path.addLine(to: CGPoint(x: 1129, y: 83.41))
        symbol6Path.addLine(to: CGPoint(x: 1128, y: 83.41))
        symbol6Path.addLine(to: CGPoint(x: 1129, y: 83.41))
        symbol6Path.addLine(to: CGPoint(x: 1129, y: 85.31))
        symbol6Path.addLine(to: CGPoint(x: 1097, y: 85.31))
        symbol6Path.addLine(to: CGPoint(x: 1097, y: 83.41))
        symbol6Path.addCurve(to: CGPoint(x: 1097, y: 69.21), controlPoint1: CGPoint(x: 1097, y: 83.41), controlPoint2: CGPoint(x: 1097, y: 76.14))
        symbol6Path.addCurve(to: CGPoint(x: 1097, y: 56.91), controlPoint1: CGPoint(x: 1097, y: 69.21), controlPoint2: CGPoint(x: 1097, y: 59.94))
        symbol6Path.addCurve(to: CGPoint(x: 1097, y: 55.96), controlPoint1: CGPoint(x: 1097, y: 56.91), controlPoint2: CGPoint(x: 1097, y: 56.43))
        symbol6Path.addCurve(to: CGPoint(x: 1097, y: 55.01), controlPoint1: CGPoint(x: 1097, y: 55.49), controlPoint2: CGPoint(x: 1097, y: 55.01))
        symbol6Path.addLine(to: CGPoint(x: 1129, y: 55.01))
        symbol6Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol6Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol6Path.lineWidth = 2
        symbol6Path.stroke()




        //// 5
        //// Background 5 Drawing
        let background5Rect = CGRect(x: 911, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background5Rect)
        context.translateBy(x: background5Rect.minX, y: background5Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 5 Drawing
        let buttonMain5Rect = CGRect(x: 960, y: 96, width: 50, height: 34)
        let buttonMain5TextContent = "5"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain5Style = NSMutableParagraphStyle()
        buttonMain5Style.alignment = .center
        let buttonMain5FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain5Style]

        let buttonMain5TextHeight: CGFloat = buttonMain5TextContent.boundingRect(with: CGSize(width: buttonMain5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain5Rect)
        buttonMain5TextContent.draw(in: CGRect(x: buttonMain5Rect.minX, y: buttonMain5Rect.minY + (buttonMain5Rect.height - buttonMain5TextHeight) / 2, width: buttonMain5Rect.width, height: buttonMain5TextHeight), withAttributes: buttonMain5FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 5 Drawing
        let buttonUpperShift5Rect = CGRect(x: 982, y: 54, width: 56, height: 36)
        let buttonUpperShift5TextContent = "%"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift5Style = NSMutableParagraphStyle()
        buttonUpperShift5Style.alignment = .center
        let buttonUpperShift5FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 36)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift5Style]

        let buttonUpperShift5TextHeight: CGFloat = buttonUpperShift5TextContent.boundingRect(with: CGSize(width: buttonUpperShift5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift5Rect)
        buttonUpperShift5TextContent.draw(in: CGRect(x: buttonUpperShift5Rect.minX, y: buttonUpperShift5Rect.minY + (buttonUpperShift5Rect.height - buttonUpperShift5TextHeight) / 2, width: buttonUpperShift5Rect.width, height: buttonUpperShift5TextHeight), withAttributes: buttonUpperShift5FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 5 Drawing
        let buttonAboveLowText5Rect = CGRect(x: 930, y: 24, width: 108, height: 22)
        let buttonAboveLowText5TextContent = "CLOSE #"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText5Style = NSMutableParagraphStyle()
        buttonAboveLowText5Style.alignment = .center
        let buttonAboveLowText5FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText5Style]

        let buttonAboveLowText5TextHeight: CGFloat = buttonAboveLowText5TextContent.boundingRect(with: CGSize(width: buttonAboveLowText5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText5Rect)
        buttonAboveLowText5TextContent.draw(in: CGRect(x: buttonAboveLowText5Rect.minX, y: buttonAboveLowText5Rect.minY + (buttonAboveLowText5Rect.height - buttonAboveLowText5TextHeight) / 2, width: buttonAboveLowText5Rect.width, height: buttonAboveLowText5TextHeight), withAttributes: buttonAboveLowText5FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 5 Drawing
        let buttonAboveTopText5Rect = CGRect(x: 930, y: 2, width: 108, height: 22)
        let buttonAboveTopText5TextContent = "CYAN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText5Style = NSMutableParagraphStyle()
        buttonAboveTopText5Style.alignment = .center
        let buttonAboveTopText5FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText5Style]

        let buttonAboveTopText5TextHeight: CGFloat = buttonAboveTopText5TextContent.boundingRect(with: CGSize(width: buttonAboveTopText5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText5Rect)
        buttonAboveTopText5TextContent.draw(in: CGRect(x: buttonAboveTopText5Rect.minX, y: buttonAboveTopText5Rect.minY + (buttonAboveTopText5Rect.height - buttonAboveTopText5TextHeight) / 2, width: buttonAboveTopText5Rect.width, height: buttonAboveTopText5TextHeight), withAttributes: buttonAboveTopText5FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 5 Drawing
        let symbol5Path = UIBezierPath()
        symbol5Path.move(to: CGPoint(x: 962, y: 56.91))
        symbol5Path.addCurve(to: CGPoint(x: 947.96, y: 56.91), controlPoint1: CGPoint(x: 961.95, y: 56.91), controlPoint2: CGPoint(x: 947.96, y: 56.91))
        symbol5Path.addCurve(to: CGPoint(x: 946, y: 56.91), controlPoint1: CGPoint(x: 948, y: 56.91), controlPoint2: CGPoint(x: 946, y: 56.91))
        symbol5Path.addLine(to: CGPoint(x: 948, y: 56.91))
        symbol5Path.addLine(to: CGPoint(x: 948, y: 83.41))
        symbol5Path.addLine(to: CGPoint(x: 962, y: 83.41))
        symbol5Path.addCurve(to: CGPoint(x: 962, y: 56.91), controlPoint1: CGPoint(x: 962, y: 83.41), controlPoint2: CGPoint(x: 962, y: 61.74))
        symbol5Path.close()
        symbol5Path.move(to: CGPoint(x: 978, y: 55.01))
        symbol5Path.addLine(to: CGPoint(x: 978, y: 56.91))
        symbol5Path.addLine(to: CGPoint(x: 978, y: 83.41))
        symbol5Path.addLine(to: CGPoint(x: 978, y: 85.31))
        symbol5Path.addLine(to: CGPoint(x: 946, y: 85.31))
        symbol5Path.addLine(to: CGPoint(x: 946, y: 83.41))
        symbol5Path.addLine(to: CGPoint(x: 946, y: 56.91))
        symbol5Path.addLine(to: CGPoint(x: 946, y: 55.01))
        symbol5Path.addLine(to: CGPoint(x: 978, y: 55.01))
        symbol5Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol5Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol5Path.lineWidth = 2
        symbol5Path.stroke()




        //// 4
        //// Background Drawing
        let backgroundRect = CGRect(x: 758, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundRect)
        context.translateBy(x: backgroundRect.minX, y: backgroundRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main Drawing
        let buttonMainRect = CGRect(x: 807, y: 96, width: 50, height: 34)
        let buttonMainTextContent = "4"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMainStyle = NSMutableParagraphStyle()
        buttonMainStyle.alignment = .center
        let buttonMainFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMainStyle]

        let buttonMainTextHeight: CGFloat = buttonMainTextContent.boundingRect(with: CGSize(width: buttonMainRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMainFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMainRect)
        buttonMainTextContent.draw(in: CGRect(x: buttonMainRect.minX, y: buttonMainRect.minY + (buttonMainRect.height - buttonMainTextHeight) / 2, width: buttonMainRect.width, height: buttonMainTextHeight), withAttributes: buttonMainFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift Drawing
        let buttonUpperShiftRect = CGRect(x: 831, y: 55, width: 56, height: 36)
        let buttonUpperShiftTextContent = "$"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShiftStyle = NSMutableParagraphStyle()
        buttonUpperShiftStyle.alignment = .center
        let buttonUpperShiftFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 36)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShiftStyle]

        let buttonUpperShiftTextHeight: CGFloat = buttonUpperShiftTextContent.boundingRect(with: CGSize(width: buttonUpperShiftRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShiftFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShiftRect)
        buttonUpperShiftTextContent.draw(in: CGRect(x: buttonUpperShiftRect.minX, y: buttonUpperShiftRect.minY + (buttonUpperShiftRect.height - buttonUpperShiftTextHeight) / 2, width: buttonUpperShiftRect.width, height: buttonUpperShiftTextHeight), withAttributes: buttonUpperShiftFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text Drawing
        let buttonAboveLowTextRect = CGRect(x: 777, y: 24, width: 108, height: 22)
        let buttonAboveLowTextTextContent = "OPEN #"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowTextStyle = NSMutableParagraphStyle()
        buttonAboveLowTextStyle.alignment = .center
        let buttonAboveLowTextFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowTextStyle]

        let buttonAboveLowTextTextHeight: CGFloat = buttonAboveLowTextTextContent.boundingRect(with: CGSize(width: buttonAboveLowTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowTextRect)
        buttonAboveLowTextTextContent.draw(in: CGRect(x: buttonAboveLowTextRect.minX, y: buttonAboveLowTextRect.minY + (buttonAboveLowTextRect.height - buttonAboveLowTextTextHeight) / 2, width: buttonAboveLowTextRect.width, height: buttonAboveLowTextTextHeight), withAttributes: buttonAboveLowTextFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text Drawing
        let buttonAboveTopTextRect = CGRect(x: 777, y: 2, width: 108, height: 22)
        let buttonAboveTopTextTextContent = "GREEN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopTextStyle = NSMutableParagraphStyle()
        buttonAboveTopTextStyle.alignment = .center
        let buttonAboveTopTextFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopTextStyle]

        let buttonAboveTopTextTextHeight: CGFloat = buttonAboveTopTextTextContent.boundingRect(with: CGSize(width: buttonAboveTopTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopTextRect)
        buttonAboveTopTextTextContent.draw(in: CGRect(x: buttonAboveTopTextRect.minX, y: buttonAboveTopTextRect.minY + (buttonAboveTopTextRect.height - buttonAboveTopTextTextHeight) / 2, width: buttonAboveTopTextRect.width, height: buttonAboveTopTextTextHeight), withAttributes: buttonAboveTopTextFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 809, y: 71.11)
        context.rotate(by: 90 * CGFloat.pi/180)

        let symbolPath = UIBezierPath()
        symbolPath.move(to: CGPoint(x: 0, y: -14))
        symbolPath.addCurve(to: CGPoint(x: -13.29, y: -14), controlPoint1: CGPoint(x: -0.04, y: -14), controlPoint2: CGPoint(x: -13.29, y: -14))
        symbolPath.addCurve(to: CGPoint(x: -15.15, y: -14), controlPoint1: CGPoint(x: -13.25, y: -14), controlPoint2: CGPoint(x: -15.15, y: -14))
        symbolPath.addLine(to: CGPoint(x: -13.25, y: -14))
        symbolPath.addLine(to: CGPoint(x: -13.25, y: 14))
        symbolPath.addLine(to: CGPoint(x: 13.25, y: 14))
        symbolPath.addCurve(to: CGPoint(x: 13.25, y: 12.13), controlPoint1: CGPoint(x: 13.25, y: 14), controlPoint2: CGPoint(x: 13.25, y: 13.3))
        symbolPath.addCurve(to: CGPoint(x: 13.25, y: -1), controlPoint1: CGPoint(x: 13.25, y: 9.4), controlPoint2: CGPoint(x: 13.25, y: 4.11))
        symbolPath.addLine(to: CGPoint(x: 0, y: -1))
        symbolPath.addCurve(to: CGPoint(x: 0, y: -14), controlPoint1: CGPoint(x: 0, y: -1), controlPoint2: CGPoint(x: 0, y: -10.8))
        symbolPath.close()
        symbolPath.move(to: CGPoint(x: 15.15, y: -16))
        symbolPath.addLine(to: CGPoint(x: 15.15, y: -14))
        symbolPath.addLine(to: CGPoint(x: 15.15, y: 14))
        symbolPath.addLine(to: CGPoint(x: 15.15, y: 16))
        symbolPath.addLine(to: CGPoint(x: -15.15, y: 16))
        symbolPath.addLine(to: CGPoint(x: -15.15, y: 14))
        symbolPath.addLine(to: CGPoint(x: -15.15, y: -14))
        symbolPath.addLine(to: CGPoint(x: -15.15, y: -16))
        symbolPath.addLine(to: CGPoint(x: 15.15, y: -16))
        symbolPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbolPath.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbolPath.lineWidth = 2
        symbolPath.stroke()

        context.restoreGState()




        //// 3
        //// Background 3 Drawing
        let background3Rect = CGRect(x: 606, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background3Rect)
        context.translateBy(x: background3Rect.minX, y: background3Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 3 Drawing
        let buttonMain3Rect = CGRect(x: 655, y: 96, width: 50, height: 34)
        let buttonMain3TextContent = "3"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain3Style = NSMutableParagraphStyle()
        buttonMain3Style.alignment = .center
        let buttonMain3FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain3Style]

        let buttonMain3TextHeight: CGFloat = buttonMain3TextContent.boundingRect(with: CGSize(width: buttonMain3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain3Rect)
        buttonMain3TextContent.draw(in: CGRect(x: buttonMain3Rect.minX, y: buttonMain3Rect.minY + (buttonMain3Rect.height - buttonMain3TextHeight) / 2, width: buttonMain3Rect.width, height: buttonMain3TextHeight), withAttributes: buttonMain3FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 3 Drawing
        let buttonUpperShift3Rect = CGRect(x: 677, y: 53, width: 56, height: 36)
        let buttonUpperShift3TextContent = "#"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift3Style = NSMutableParagraphStyle()
        buttonUpperShift3Style.alignment = .center
        let buttonUpperShift3FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-MediumItalic", size: 46)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift3Style]

        let buttonUpperShift3TextHeight: CGFloat = buttonUpperShift3TextContent.boundingRect(with: CGSize(width: buttonUpperShift3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift3Rect)
        buttonUpperShift3TextContent.draw(in: CGRect(x: buttonUpperShift3Rect.minX, y: buttonUpperShift3Rect.minY + (buttonUpperShift3Rect.height - buttonUpperShift3TextHeight) / 2, width: buttonUpperShift3Rect.width, height: buttonUpperShift3TextHeight), withAttributes: buttonUpperShift3FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 3 Drawing
        let buttonAboveLowText3Rect = CGRect(x: 625, y: 24, width: 108, height: 22)
        let buttonAboveLowText3TextContent = "LINE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText3Style = NSMutableParagraphStyle()
        buttonAboveLowText3Style.alignment = .center
        let buttonAboveLowText3FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText3Style]

        let buttonAboveLowText3TextHeight: CGFloat = buttonAboveLowText3TextContent.boundingRect(with: CGSize(width: buttonAboveLowText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText3Rect)
        buttonAboveLowText3TextContent.draw(in: CGRect(x: buttonAboveLowText3Rect.minX, y: buttonAboveLowText3Rect.minY + (buttonAboveLowText3Rect.height - buttonAboveLowText3TextHeight) / 2, width: buttonAboveLowText3Rect.width, height: buttonAboveLowText3TextHeight), withAttributes: buttonAboveLowText3FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 3 Drawing
        let buttonAboveTopText3Rect = CGRect(x: 606, y: 2, width: 146, height: 22)
        let buttonAboveTopText3TextContent = "MGNTA"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText3Style = NSMutableParagraphStyle()
        buttonAboveTopText3Style.alignment = .center
        let buttonAboveTopText3FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText3Style]

        let buttonAboveTopText3TextHeight: CGFloat = buttonAboveTopText3TextContent.boundingRect(with: CGSize(width: buttonAboveTopText3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText3Rect)
        buttonAboveTopText3TextContent.draw(in: CGRect(x: buttonAboveTopText3Rect.minX, y: buttonAboveTopText3Rect.minY + (buttonAboveTopText3Rect.height - buttonAboveTopText3TextHeight) / 2, width: buttonAboveTopText3Rect.width, height: buttonAboveTopText3TextHeight), withAttributes: buttonAboveTopText3FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 3 Drawing
        let symbol3Path = UIBezierPath()
        symbol3Path.move(to: CGPoint(x: 643, y: 56.91))
        symbol3Path.addLine(to: CGPoint(x: 641, y: 56.91))
        symbol3Path.addLine(to: CGPoint(x: 643, y: 56.91))
        symbol3Path.close()
        symbol3Path.move(to: CGPoint(x: 671, y: 69.21))
        symbol3Path.addLine(to: CGPoint(x: 643, y: 69.21))
        symbol3Path.addCurve(to: CGPoint(x: 643, y: 83.41), controlPoint1: CGPoint(x: 643, y: 76.14), controlPoint2: CGPoint(x: 643, y: 83.41))
        symbol3Path.addLine(to: CGPoint(x: 671, y: 83.41))
        symbol3Path.addCurve(to: CGPoint(x: 671, y: 81.64), controlPoint1: CGPoint(x: 671, y: 83.41), controlPoint2: CGPoint(x: 671, y: 82.75))
        symbol3Path.addCurve(to: CGPoint(x: 671, y: 69.21), controlPoint1: CGPoint(x: 671, y: 79.06), controlPoint2: CGPoint(x: 671, y: 74.05))
        symbol3Path.close()
        symbol3Path.move(to: CGPoint(x: 673, y: 55.01))
        symbol3Path.addLine(to: CGPoint(x: 673, y: 56.91))
        symbol3Path.addLine(to: CGPoint(x: 673, y: 83.41))
        symbol3Path.addLine(to: CGPoint(x: 673, y: 85.31))
        symbol3Path.addLine(to: CGPoint(x: 641, y: 85.31))
        symbol3Path.addLine(to: CGPoint(x: 641, y: 83.41))
        symbol3Path.addLine(to: CGPoint(x: 641, y: 56.91))
        symbol3Path.addLine(to: CGPoint(x: 641, y: 55.01))
        symbol3Path.addLine(to: CGPoint(x: 673, y: 55.01))
        symbol3Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol3Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol3Path.lineWidth = 2
        symbol3Path.stroke()




        //// 2
        //// Background 2 Drawing
        let background2Rect = CGRect(x: 455, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background2Rect)
        context.translateBy(x: background2Rect.minX, y: background2Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 2 Drawing
        let buttonMain2Rect = CGRect(x: 504, y: 96, width: 50, height: 34)
        let buttonMain2TextContent = "2"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain2Style = NSMutableParagraphStyle()
        buttonMain2Style.alignment = .center
        let buttonMain2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain2Style]

        let buttonMain2TextHeight: CGFloat = buttonMain2TextContent.boundingRect(with: CGSize(width: buttonMain2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain2Rect)
        buttonMain2TextContent.draw(in: CGRect(x: buttonMain2Rect.minX, y: buttonMain2Rect.minY + (buttonMain2Rect.height - buttonMain2TextHeight) / 2, width: buttonMain2Rect.width, height: buttonMain2TextHeight), withAttributes: buttonMain2FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 2 Drawing
        let buttonUpperShift2Rect = CGRect(x: 528, y: 55, width: 56, height: 36)
        let buttonUpperShift2TextContent = "@"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift2Style = NSMutableParagraphStyle()
        buttonUpperShift2Style.alignment = .center
        let buttonUpperShift2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 36)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift2Style]

        let buttonUpperShift2TextHeight: CGFloat = buttonUpperShift2TextContent.boundingRect(with: CGSize(width: buttonUpperShift2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift2Rect)
        buttonUpperShift2TextContent.draw(in: CGRect(x: buttonUpperShift2Rect.minX, y: buttonUpperShift2Rect.minY + (buttonUpperShift2Rect.height - buttonUpperShift2TextHeight) / 2, width: buttonUpperShift2Rect.width, height: buttonUpperShift2TextHeight), withAttributes: buttonUpperShift2FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 2 Drawing
        let buttonAboveLowText2Rect = CGRect(x: 474, y: 24, width: 108, height: 22)
        let buttonAboveLowText2TextContent = "FN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText2Style = NSMutableParagraphStyle()
        buttonAboveLowText2Style.alignment = .center
        let buttonAboveLowText2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText2Style]

        let buttonAboveLowText2TextHeight: CGFloat = buttonAboveLowText2TextContent.boundingRect(with: CGSize(width: buttonAboveLowText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText2Rect)
        buttonAboveLowText2TextContent.draw(in: CGRect(x: buttonAboveLowText2Rect.minX, y: buttonAboveLowText2Rect.minY + (buttonAboveLowText2Rect.height - buttonAboveLowText2TextHeight) / 2, width: buttonAboveLowText2Rect.width, height: buttonAboveLowText2TextHeight), withAttributes: buttonAboveLowText2FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 2 Drawing
        let buttonAboveTopText2Rect = CGRect(x: 474, y: 2, width: 108, height: 22)
        let buttonAboveTopText2TextContent = "RED"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText2Style = NSMutableParagraphStyle()
        buttonAboveTopText2Style.alignment = .center
        let buttonAboveTopText2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText2Style]

        let buttonAboveTopText2TextHeight: CGFloat = buttonAboveTopText2TextContent.boundingRect(with: CGSize(width: buttonAboveTopText2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText2Rect)
        buttonAboveTopText2TextContent.draw(in: CGRect(x: buttonAboveTopText2Rect.minX, y: buttonAboveTopText2Rect.minY + (buttonAboveTopText2Rect.height - buttonAboveTopText2TextHeight) / 2, width: buttonAboveTopText2Rect.width, height: buttonAboveTopText2TextHeight), withAttributes: buttonAboveTopText2FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 2 Drawing
        context.saveGState()
        context.translateBy(x: 488, y: 86.25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let symbol2Path = UIBezierPath()
        symbol2Path.move(to: CGPoint(x: 15.15, y: 2))
        symbol2Path.addCurve(to: CGPoint(x: 1.86, y: 2), controlPoint1: CGPoint(x: 15.1, y: 2), controlPoint2: CGPoint(x: 1.86, y: 2))
        symbol2Path.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 1.89, y: 2), controlPoint2: CGPoint(x: 0, y: 2))
        symbol2Path.addLine(to: CGPoint(x: 1.89, y: 2))
        symbol2Path.addLine(to: CGPoint(x: 1.89, y: 30))
        symbol2Path.addLine(to: CGPoint(x: 28.4, y: 30))
        symbol2Path.addCurve(to: CGPoint(x: 28.4, y: 28.13), controlPoint1: CGPoint(x: 28.4, y: 30), controlPoint2: CGPoint(x: 28.4, y: 29.3))
        symbol2Path.addCurve(to: CGPoint(x: 28.4, y: 15), controlPoint1: CGPoint(x: 28.4, y: 25.4), controlPoint2: CGPoint(x: 28.4, y: 20.11))
        symbol2Path.addLine(to: CGPoint(x: 15.15, y: 15))
        symbol2Path.addCurve(to: CGPoint(x: 15.15, y: 2), controlPoint1: CGPoint(x: 15.15, y: 15), controlPoint2: CGPoint(x: 15.15, y: 5.2))
        symbol2Path.close()
        symbol2Path.move(to: CGPoint(x: 30.29, y: 0))
        symbol2Path.addLine(to: CGPoint(x: 30.29, y: 2))
        symbol2Path.addLine(to: CGPoint(x: 30.29, y: 30))
        symbol2Path.addLine(to: CGPoint(x: 30.29, y: 32))
        symbol2Path.addLine(to: CGPoint(x: 0, y: 32))
        symbol2Path.addLine(to: CGPoint(x: 0, y: 30))
        symbol2Path.addLine(to: CGPoint(x: 0, y: 2))
        symbol2Path.addLine(to: CGPoint(x: 0, y: 0))
        symbol2Path.addLine(to: CGPoint(x: 30.29, y: 0))
        symbol2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol2Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol2Path.lineWidth = 2
        symbol2Path.stroke()

        context.restoreGState()




        //// 1
        //// Background 1 Drawing
        let background1Rect = CGRect(x: 304, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: background1Rect)
        context.translateBy(x: background1Rect.minX, y: background1Rect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: background1Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Main 1 Drawing
        let buttonMain1Rect = CGRect(x: 353, y: 96, width: 50, height: 34)
        let buttonMain1TextContent = "1"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonMain1Style = NSMutableParagraphStyle()
        buttonMain1Style.alignment = .center
        let buttonMain1FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: mainFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonMain1Style]

        let buttonMain1TextHeight: CGFloat = buttonMain1TextContent.boundingRect(with: CGSize(width: buttonMain1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonMain1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonMain1Rect)
        buttonMain1TextContent.draw(in: CGRect(x: buttonMain1Rect.minX, y: buttonMain1Rect.minY + (buttonMain1Rect.height - buttonMain1TextHeight) / 2, width: buttonMain1Rect.width, height: buttonMain1TextHeight), withAttributes: buttonMain1FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Shift 1 Drawing
        let buttonUpperShift1Rect = CGRect(x: 374, y: 63, width: 56, height: 22)
        let buttonUpperShift1TextContent = "!"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperShift1Style = NSMutableParagraphStyle()
        buttonUpperShift1Style.alignment = .center
        let buttonUpperShift1FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: shiftFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperShift1Style]

        let buttonUpperShift1TextHeight: CGFloat = buttonUpperShift1TextContent.boundingRect(with: CGSize(width: buttonUpperShift1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperShift1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperShift1Rect)
        buttonUpperShift1TextContent.draw(in: CGRect(x: buttonUpperShift1Rect.minX, y: buttonUpperShift1Rect.minY + (buttonUpperShift1Rect.height - buttonUpperShift1TextHeight) / 2, width: buttonUpperShift1Rect.width, height: buttonUpperShift1TextHeight), withAttributes: buttonUpperShift1FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Low Text 1 Drawing
        let buttonAboveLowText1Rect = CGRect(x: 323, y: 24, width: 108, height: 22)
        let buttonAboveLowText1TextContent = "DEF FN"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveLowText1Style = NSMutableParagraphStyle()
        buttonAboveLowText1Style.alignment = .center
        let buttonAboveLowText1FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveLowText1Style]

        let buttonAboveLowText1TextHeight: CGFloat = buttonAboveLowText1TextContent.boundingRect(with: CGSize(width: buttonAboveLowText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveLowText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveLowText1Rect)
        buttonAboveLowText1TextContent.draw(in: CGRect(x: buttonAboveLowText1Rect.minX, y: buttonAboveLowText1Rect.minY + (buttonAboveLowText1Rect.height - buttonAboveLowText1TextHeight) / 2, width: buttonAboveLowText1Rect.width, height: buttonAboveLowText1TextHeight), withAttributes: buttonAboveLowText1FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Above Top Text 1 Drawing
        let buttonAboveTopText1Rect = CGRect(x: 323, y: 2, width: 108, height: 22)
        let buttonAboveTopText1TextContent = "BLUE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonAboveTopText1Style = NSMutableParagraphStyle()
        buttonAboveTopText1Style.alignment = .center
        let buttonAboveTopText1FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonAboveTopText1Style]

        let buttonAboveTopText1TextHeight: CGFloat = buttonAboveTopText1TextContent.boundingRect(with: CGSize(width: buttonAboveTopText1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonAboveTopText1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonAboveTopText1Rect)
        buttonAboveTopText1TextContent.draw(in: CGRect(x: buttonAboveTopText1Rect.minX, y: buttonAboveTopText1Rect.minY + (buttonAboveTopText1Rect.height - buttonAboveTopText1TextHeight) / 2, width: buttonAboveTopText1Rect.width, height: buttonAboveTopText1TextHeight), withAttributes: buttonAboveTopText1FontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Symbol 1 Drawing
        let symbol1Path = UIBezierPath()
        symbol1Path.move(to: CGPoint(x: 353, y: 57.85))
        symbol1Path.addCurve(to: CGPoint(x: 338.96, y: 57.85), controlPoint1: CGPoint(x: 352.95, y: 57.85), controlPoint2: CGPoint(x: 338.96, y: 57.85))
        symbol1Path.addCurve(to: CGPoint(x: 337, y: 57.85), controlPoint1: CGPoint(x: 339, y: 57.85), controlPoint2: CGPoint(x: 337, y: 57.85))
        symbol1Path.addLine(to: CGPoint(x: 339, y: 57.85))
        symbol1Path.addLine(to: CGPoint(x: 339, y: 84.36))
        symbol1Path.addLine(to: CGPoint(x: 367, y: 84.36))
        symbol1Path.addCurve(to: CGPoint(x: 367, y: 82.59), controlPoint1: CGPoint(x: 367, y: 84.36), controlPoint2: CGPoint(x: 367, y: 83.7))
        symbol1Path.addCurve(to: CGPoint(x: 367, y: 70.16), controlPoint1: CGPoint(x: 367, y: 80.01), controlPoint2: CGPoint(x: 367, y: 75))
        symbol1Path.addLine(to: CGPoint(x: 353, y: 70.16))
        symbol1Path.addCurve(to: CGPoint(x: 353, y: 57.85), controlPoint1: CGPoint(x: 353, y: 70.16), controlPoint2: CGPoint(x: 353, y: 60.89))
        symbol1Path.close()
        symbol1Path.move(to: CGPoint(x: 369, y: 55.96))
        symbol1Path.addLine(to: CGPoint(x: 369, y: 57.85))
        symbol1Path.addLine(to: CGPoint(x: 369, y: 84.36))
        symbol1Path.addLine(to: CGPoint(x: 369, y: 86.25))
        symbol1Path.addLine(to: CGPoint(x: 337, y: 86.25))
        symbol1Path.addLine(to: CGPoint(x: 337, y: 84.36))
        symbol1Path.addLine(to: CGPoint(x: 337, y: 57.85))
        symbol1Path.addLine(to: CGPoint(x: 337, y: 55.96))
        symbol1Path.addLine(to: CGPoint(x: 369, y: 55.96))
        symbol1Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        buttonTextColor.setFill()
        symbol1Path.fill()
        context.restoreGState()

        buttonTextColor.setStroke()
        symbol1Path.lineWidth = 2
        symbol1Path.stroke()




        //// Inv Video
        //// Background Inv Video Drawing
        let backgroundInvVideoRect = CGRect(x: 153, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundInvVideoRect)
        context.translateBy(x: backgroundInvVideoRect.minX, y: backgroundInvVideoRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundInvVideoRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text Inv Video Drawing
        let buttonLowerTextInvVideoRect = CGRect(x: 172, y: 73, width: 108, height: 23)
        let buttonLowerTextInvVideoTextContent = "VIDEO"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextInvVideoStyle = NSMutableParagraphStyle()
        buttonLowerTextInvVideoStyle.alignment = .center
        let buttonLowerTextInvVideoFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextInvVideoStyle]

        let buttonLowerTextInvVideoTextHeight: CGFloat = buttonLowerTextInvVideoTextContent.boundingRect(with: CGSize(width: buttonLowerTextInvVideoRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextInvVideoFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextInvVideoRect)
        buttonLowerTextInvVideoTextContent.draw(in: CGRect(x: buttonLowerTextInvVideoRect.minX, y: buttonLowerTextInvVideoRect.minY + (buttonLowerTextInvVideoRect.height - buttonLowerTextInvVideoTextHeight) / 2, width: buttonLowerTextInvVideoRect.width, height: buttonLowerTextInvVideoTextHeight), withAttributes: buttonLowerTextInvVideoFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text Inv Video Drawing
        let buttonUpperTextInvVideoRect = CGRect(x: 172, y: 51, width: 108, height: 23)
        let buttonUpperTextInvVideoTextContent = "INV"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextInvVideoStyle = NSMutableParagraphStyle()
        buttonUpperTextInvVideoStyle.alignment = .center
        let buttonUpperTextInvVideoFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextInvVideoStyle]

        let buttonUpperTextInvVideoTextHeight: CGFloat = buttonUpperTextInvVideoTextContent.boundingRect(with: CGSize(width: buttonUpperTextInvVideoRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextInvVideoFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextInvVideoRect)
        buttonUpperTextInvVideoTextContent.draw(in: CGRect(x: buttonUpperTextInvVideoRect.minX, y: buttonUpperTextInvVideoRect.minY + (buttonUpperTextInvVideoRect.height - buttonUpperTextInvVideoTextHeight) / 2, width: buttonUpperTextInvVideoRect.width, height: buttonUpperTextInvVideoTextHeight), withAttributes: buttonUpperTextInvVideoFontAttributes)
        context.restoreGState()
        context.restoreGState()





        //// True Video
        //// Background True Video Drawing
        let backgroundTrueVideoRect = CGRect(x: 0, y: 2, width: 146, height: 142)
        context.saveGState()
        context.clip(to: backgroundTrueVideoRect)
        context.translateBy(x: backgroundTrueVideoRect.minX, y: backgroundTrueVideoRect.minY)

        ZX128KeyboardStyleKit.drawKey(frame: CGRect(origin: .zero, size: backgroundTrueVideoRect.size), resizing: .stretch)
        context.restoreGState()


        //// Button Lower Text True Video Drawing
        let buttonLowerTextTrueVideoRect = CGRect(x: 21, y: 73, width: 108, height: 23)
        let buttonLowerTextTrueVideoTextContent = "VIDEO"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonLowerTextTrueVideoStyle = NSMutableParagraphStyle()
        buttonLowerTextTrueVideoStyle.alignment = .center
        let buttonLowerTextTrueVideoFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonLowerTextTrueVideoStyle]

        let buttonLowerTextTrueVideoTextHeight: CGFloat = buttonLowerTextTrueVideoTextContent.boundingRect(with: CGSize(width: buttonLowerTextTrueVideoRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonLowerTextTrueVideoFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonLowerTextTrueVideoRect)
        buttonLowerTextTrueVideoTextContent.draw(in: CGRect(x: buttonLowerTextTrueVideoRect.minX, y: buttonLowerTextTrueVideoRect.minY + (buttonLowerTextTrueVideoRect.height - buttonLowerTextTrueVideoTextHeight) / 2, width: buttonLowerTextTrueVideoRect.width, height: buttonLowerTextTrueVideoTextHeight), withAttributes: buttonLowerTextTrueVideoFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Button Upper Text True Video Drawing
        let buttonUpperTextTrueVideoRect = CGRect(x: 21, y: 51, width: 108, height: 23)
        let buttonUpperTextTrueVideoTextContent = "TRUE"
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTextShadow.shadowOffset.width * resizedShadowScale, height: buttonTextShadow.shadowOffset.height * resizedShadowScale), blur: buttonTextShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTextShadow.shadowColor as! UIColor).cgColor)
        let buttonUpperTextTrueVideoStyle = NSMutableParagraphStyle()
        buttonUpperTextTrueVideoStyle.alignment = .center
        let buttonUpperTextTrueVideoFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: smallFontSize)!, NSForegroundColorAttributeName: buttonTextColor, NSParagraphStyleAttributeName: buttonUpperTextTrueVideoStyle]

        let buttonUpperTextTrueVideoTextHeight: CGFloat = buttonUpperTextTrueVideoTextContent.boundingRect(with: CGSize(width: buttonUpperTextTrueVideoRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: buttonUpperTextTrueVideoFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: buttonUpperTextTrueVideoRect)
        buttonUpperTextTrueVideoTextContent.draw(in: CGRect(x: buttonUpperTextTrueVideoRect.minX, y: buttonUpperTextTrueVideoRect.minY + (buttonUpperTextTrueVideoRect.height - buttonUpperTextTrueVideoTextHeight) / 2, width: buttonUpperTextTrueVideoRect.width, height: buttonUpperTextTrueVideoTextHeight), withAttributes: buttonUpperTextTrueVideoFontAttributes)
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawKey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 146, height: 142), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 146, height: 142), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 146, y: resizedFrame.height / 142)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 146, resizedFrame.height / 142)


        //// Color Declarations
        let buttonBackgroundColor = UIColor(red: 0.314, green: 0.314, blue: 0.314, alpha: 1.000)
        let buttonBackgroundLightColor = buttonBackgroundColor.withBrightness(0.443)
        let buttonTouchBackgroundColor = UIColor(red: 0.208, green: 0.208, blue: 0.208, alpha: 1.000)
        let buttonTouchBackgroundLightColor = buttonTouchBackgroundColor.withBrightness(0.443)

        //// Gradient Declarations
        let buttonBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonBackgroundColor.cgColor, buttonBackgroundColor.blended(withFraction: 0.5, of: buttonBackgroundLightColor).cgColor, buttonBackgroundLightColor.cgColor] as CFArray, locations: [0, 0.73, 1])!
        let buttonTouchBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonTouchBackgroundColor.cgColor, buttonTouchBackgroundLightColor.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let buttonTouchShadow = NSShadow()
        buttonTouchShadow.shadowColor = UIColor.black
        buttonTouchShadow.shadowOffset = CGSize(width: 0, height: 0)
        buttonTouchShadow.shadowBlurRadius = 11

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 146, height: 142), cornerRadius: 4)
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(buttonBackgroundGradient, start: CGPoint(x: 143.83, y: 0.17), end: CGPoint(x: 2.17, y: 141.83), options: [])
        context.restoreGState()


        //// Touch Drawing
        let touchPath = UIBezierPath()
        touchPath.move(to: CGPoint(x: 120.75, y: 47))
        touchPath.addCurve(to: CGPoint(x: 121.76, y: 48.4), controlPoint1: CGPoint(x: 120.75, y: 47), controlPoint2: CGPoint(x: 121.43, y: 47.93))
        touchPath.addCurve(to: CGPoint(x: 132, y: 80.76), controlPoint1: CGPoint(x: 128.22, y: 57.6), controlPoint2: CGPoint(x: 132, y: 68.75))
        touchPath.addCurve(to: CGPoint(x: 73.5, y: 138), controlPoint1: CGPoint(x: 132, y: 112.37), controlPoint2: CGPoint(x: 105.81, y: 138))
        touchPath.addLine(to: CGPoint(x: 73.55, y: 138))
        touchPath.addLine(to: CGPoint(x: 73.47, y: 138))
        touchPath.addLine(to: CGPoint(x: 73.5, y: 138))
        touchPath.addCurve(to: CGPoint(x: 15, y: 80.76), controlPoint1: CGPoint(x: 41.19, y: 138), controlPoint2: CGPoint(x: 15, y: 112.37))
        touchPath.addCurve(to: CGPoint(x: 25.24, y: 48.4), controlPoint1: CGPoint(x: 15, y: 68.75), controlPoint2: CGPoint(x: 18.78, y: 57.6))
        touchPath.addCurve(to: CGPoint(x: 26.25, y: 47), controlPoint1: CGPoint(x: 25.32, y: 48.29), controlPoint2: CGPoint(x: 26.25, y: 47))
        touchPath.addLine(to: CGPoint(x: 73.5, y: 47))
        touchPath.addLine(to: CGPoint(x: 120.75, y: 47))
        touchPath.addLine(to: CGPoint(x: 120.75, y: 47))
        touchPath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: buttonTouchShadow.shadowOffset.width * resizedShadowScale, height: buttonTouchShadow.shadowOffset.height * resizedShadowScale), blur: buttonTouchShadow.shadowBlurRadius * resizedShadowScale, color: (buttonTouchShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        touchPath.addClip()
        context.drawLinearGradient(buttonTouchBackgroundGradient, start: CGPoint(x: 26.75, y: 115.27), end: CGPoint(x: 121.92, y: 48.63), options: [])
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawResizableKey(frame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 142)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let buttonBackgroundColor = UIColor(red: 0.314, green: 0.314, blue: 0.314, alpha: 1.000)
        let buttonBackgroundLightColor = buttonBackgroundColor.withBrightness(0.443)
        let buttonTouchBackgroundColor = UIColor(red: 0.208, green: 0.208, blue: 0.208, alpha: 1.000)
        let buttonTouchBackgroundLightColor = buttonTouchBackgroundColor.withBrightness(0.443)

        //// Gradient Declarations
        let buttonBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonBackgroundColor.cgColor, buttonBackgroundColor.blended(withFraction: 0.5, of: buttonBackgroundLightColor).cgColor, buttonBackgroundLightColor.cgColor] as CFArray, locations: [0, 0.73, 1])!
        let buttonTouchBackgroundGradient = CGGradient(colorsSpace: nil, colors: [buttonTouchBackgroundColor.cgColor, buttonTouchBackgroundLightColor.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let buttonTouchShadow = NSShadow()
        buttonTouchShadow.shadowColor = UIColor.black
        buttonTouchShadow.shadowOffset = CGSize(width: 0, height: 0)
        buttonTouchShadow.shadowBlurRadius = 11

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height), cornerRadius: 4)
        context.saveGState()
        rectanglePath.addClip()
        let rectangleRotatedPath = UIBezierPath()
        rectangleRotatedPath.append(rectanglePath)
        var rectangleTransform = CGAffineTransform(rotationAngle: 135 * -CGFloat.pi/180)
        rectangleRotatedPath.apply(rectangleTransform)
        let rectangleBounds = rectangleRotatedPath.cgPath.boundingBoxOfPath
        rectangleTransform = rectangleTransform.inverted()
        context.drawLinearGradient(buttonBackgroundGradient,
            start: CGPoint(x: rectangleBounds.minX, y: rectangleBounds.midY).applying(rectangleTransform),
            end: CGPoint(x: rectangleBounds.maxX, y: rectangleBounds.midY).applying(rectangleTransform),
            options: [])
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: frame.maxX - 26.31, y: frame.minY + 47))
        bezier3Path.addCurve(to: CGPoint(x: frame.maxX - 25.24, y: frame.minY + 48.53), controlPoint1: CGPoint(x: frame.maxX - 26.25, y: frame.minY + 47), controlPoint2: CGPoint(x: frame.maxX - 25.32, y: frame.minY + 48.41))
        bezier3Path.addCurve(to: CGPoint(x: frame.maxX - 15, y: frame.minY + 0.55552 * frame.height), controlPoint1: CGPoint(x: frame.maxX - 18.78, y: frame.minY + 58.62), controlPoint2: CGPoint(x: frame.maxX - 15, y: frame.minY + 0.46772 * frame.height))
        bezier3Path.addCurve(to: CGPoint(x: frame.maxX - 73, y: frame.maxY - 4), controlPoint1: CGPoint(x: frame.maxX - 15, y: frame.minY + 0.78539 * frame.height), controlPoint2: CGPoint(x: frame.maxX - 40.92, y: frame.maxY - 4.29))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 74.03, y: frame.maxY - 4), controlPoint1: CGPoint(x: frame.maxX - 73.04, y: frame.maxY - 4), controlPoint2: CGPoint(x: frame.minX + 74.03, y: frame.maxY - 4))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 73, y: frame.maxY - 4), controlPoint1: CGPoint(x: frame.minX + 74, y: frame.maxY - 4), controlPoint2: CGPoint(x: frame.minX + 73, y: frame.maxY - 4))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 15, y: frame.minY + 84.02), controlPoint1: CGPoint(x: frame.minX + 40.92, y: frame.maxY - 4.29), controlPoint2: CGPoint(x: frame.minX + 15, y: frame.minY + 118.5))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 25.24, y: frame.minY + 48.53), controlPoint1: CGPoint(x: frame.minX + 15, y: frame.minY + 70.85), controlPoint2: CGPoint(x: frame.minX + 18.78, y: frame.minY + 58.62))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 26.25, y: frame.minY + 47), controlPoint1: CGPoint(x: frame.minX + 25.32, y: frame.minY + 48.41), controlPoint2: CGPoint(x: frame.minX + 26.25, y: frame.minY + 47))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 73, y: frame.minY + 47.01), controlPoint1: CGPoint(x: frame.minX + 26.25, y: frame.minY + 47), controlPoint2: CGPoint(x: frame.minX + 67.94, y: frame.minY + 47))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 73, y: frame.minY + 47))
        bezier3Path.addCurve(to: CGPoint(x: frame.minX + 265.72, y: frame.minY + 47), controlPoint1: CGPoint(x: frame.maxX - 68.01, y: frame.minY + 47), controlPoint2: CGPoint(x: frame.minX + 264.72, y: frame.minY + 47))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 26.31, y: frame.minY + 47))
        bezier3Path.close()
        context.saveGState()
        context.setShadow(offset: buttonTouchShadow.shadowOffset, blur: buttonTouchShadow.shadowBlurRadius, color: (buttonTouchShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        bezier3Path.addClip()
        let bezier3RotatedPath = UIBezierPath()
        bezier3RotatedPath.append(bezier3Path)
        var bezier3Transform = CGAffineTransform(rotationAngle: -35 * -CGFloat.pi/180)
        bezier3RotatedPath.apply(bezier3Transform)
        let bezier3Bounds = bezier3RotatedPath.cgPath.boundingBoxOfPath
        bezier3Transform = bezier3Transform.inverted()
        context.drawLinearGradient(buttonTouchBackgroundGradient,
            start: CGPoint(x: bezier3Bounds.minX, y: bezier3Bounds.midY).applying(bezier3Transform),
            end: CGPoint(x: bezier3Bounds.maxX, y: bezier3Bounds.midY).applying(bezier3Transform),
            options: [])
        context.endTransparencyLayer()
        context.restoreGState()
    }




    @objc(ZX128KeyboardStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
