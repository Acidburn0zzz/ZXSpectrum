//
//  IconsStyleKit.swift
//  ZX Spectrum
//
//  Created by Tomaz Kragelj on 13.09.17.
//  Copyright Â© 2017 Gentle Bytes. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class IconsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let sinclairBlackColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let sinclairRedColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let sinclairYellowColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        static let sinclairGreenColor: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        static let sinclairBlueColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        static var imageOfIcon: UIImage?
        static var iconTargets: [AnyObject]?
        static var imageOfIconTrash: UIImage?
        static var iconTrashTargets: [AnyObject]?
        static var imageOfIconGear: UIImage?
        static var iconGearTargets: [AnyObject]?
        static var imageOfKeyboard: UIImage?
        static var keyboardTargets: [AnyObject]?
        static var imageOfIconKeyboardShow: UIImage?
        static var iconKeyboardShowTargets: [AnyObject]?
        static var imageOfIconKeyboardHide: UIImage?
        static var iconKeyboardHideTargets: [AnyObject]?
        static var imageOfIconReset: UIImage?
        static var iconResetTargets: [AnyObject]?
        static var imageOfIconTape: UIImage?
        static var iconTapeTargets: [AnyObject]?
        static var imageOfIconInsert: UIImage?
        static var iconInsertTargets: [AnyObject]?
        static var imageOfJoystick: UIImage?
        static var joystickTargets: [AnyObject]?
        static var imageOfIconJoystickHide: UIImage?
        static var iconJoystickHideTargets: [AnyObject]?
        static var imageOfIconJoystickShow: UIImage?
        static var iconJoystickShowTargets: [AnyObject]?
        static var imageOfTape: UIImage?
        static var tapeTargets: [AnyObject]?
        static var imageOfIconTapeHide: UIImage?
        static var iconTapeHideTargets: [AnyObject]?
        static var imageOfIconTapeShow: UIImage?
        static var iconTapeShowTargets: [AnyObject]?
        static var imageOfIconUpload: UIImage?
        static var iconUploadTargets: [AnyObject]?
        static var imageOfIconDownload: UIImage?
        static var iconDownloadTargets: [AnyObject]?
        static var imageOfIconTrashSnapshot: UIImage?
        static var iconTrashSnapshotTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var sinclairBlackColor: UIColor { return Cache.sinclairBlackColor }
    @objc dynamic public class var sinclairRedColor: UIColor { return Cache.sinclairRedColor }
    @objc dynamic public class var sinclairYellowColor: UIColor { return Cache.sinclairYellowColor }
    @objc dynamic public class var sinclairGreenColor: UIColor { return Cache.sinclairGreenColor }
    @objc dynamic public class var sinclairBlueColor: UIColor { return Cache.sinclairBlueColor }

    //// Drawing Methods

    @objc dynamic public class func drawIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)


        //// Surface Drawing
        let surfacePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 1024, height: 1024), cornerRadius: 50)
        IconsStyleKit.sinclairBlackColor.setFill()
        surfacePath.fill()


        //// Rainbow
        //// Red Drawing
        context.saveGState()
        context.translateBy(x: 1060.26, y: 464.26)
        context.rotate(by: 45 * CGFloat.pi/180)

        let redPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 70, height: 923.84))
        IconsStyleKit.sinclairRedColor.setFill()
        redPath.fill()

        context.restoreGState()


        //// Yellow Drawing
        context.saveGState()
        context.translateBy(x: 1099.26, y: 524.26)
        context.rotate(by: 45 * CGFloat.pi/180)

        let yellowPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 70, height: 923.84))
        IconsStyleKit.sinclairYellowColor.setFill()
        yellowPath.fill()

        context.restoreGState()


        //// Green Drawing
        context.saveGState()
        context.translateBy(x: 1148.26, y: 574.26)
        context.rotate(by: 45 * CGFloat.pi/180)

        let greenPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 70, height: 923.84))
        IconsStyleKit.sinclairGreenColor.setFill()
        greenPath.fill()

        context.restoreGState()


        //// Blue Drawing
        context.saveGState()
        context.translateBy(x: 1197.26, y: 624.26)
        context.rotate(by: 45 * CGFloat.pi/180)

        let bluePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 70, height: 923.84))
        IconsStyleKit.sinclairBlueColor.setFill()
        bluePath.fill()

        context.restoreGState()




        //// ZX Drawing
        let zXRect = CGRect(x: 345, y: 112, width: 334, height: 256)
        let zXTextContent = "ZX"
        let zXStyle = NSMutableParagraphStyle()
        zXStyle.alignment = .center
        let zXFontAttributes = [
            NSFontAttributeName: UIFont.boldSystemFont(ofSize: 250),
            NSForegroundColorAttributeName: UIColor.white,
            NSParagraphStyleAttributeName: zXStyle,
        ]

        let zXTextHeight: CGFloat = zXTextContent.boundingRect(with: CGSize(width: zXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: zXFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: zXRect)
        zXTextContent.draw(in: CGRect(x: zXRect.minX, y: zXRect.minY + (zXRect.height - zXTextHeight) / 2, width: zXRect.width, height: zXTextHeight), withAttributes: zXFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconTrash(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.5, y: 3.13))
        bezierPath.addCurve(to: CGPoint(x: 19.5, y: 3.13), controlPoint1: CGPoint(x: 17.8, y: 3.13), controlPoint2: CGPoint(x: 19.5, y: 3.13))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Canister Drawing
        let canisterPath = UIBezierPath()
        canisterPath.move(to: CGPoint(x: 3.64, y: 3.13))
        canisterPath.addCurve(to: CGPoint(x: 4.56, y: 20.65), controlPoint1: CGPoint(x: 3.64, y: 3.13), controlPoint2: CGPoint(x: 4.54, y: 19.67))
        canisterPath.addCurve(to: CGPoint(x: 5.47, y: 21.52), controlPoint1: CGPoint(x: 4.57, y: 21.62), controlPoint2: CGPoint(x: 5.47, y: 21.52))
        canisterPath.addLine(to: CGPoint(x: 16.42, y: 21.52))
        canisterPath.addCurve(to: CGPoint(x: 17.33, y: 20.65), controlPoint1: CGPoint(x: 16.42, y: 21.52), controlPoint2: CGPoint(x: 17.31, y: 21.62))
        canisterPath.addCurve(to: CGPoint(x: 18.24, y: 3.13), controlPoint1: CGPoint(x: 17.35, y: 19.67), controlPoint2: CGPoint(x: 18.24, y: 3.13))
        UIColor.black.setStroke()
        canisterPath.lineWidth = 1
        canisterPath.stroke()


        //// Cover Drawing
        let coverPath = UIBezierPath()
        coverPath.move(to: CGPoint(x: 7.29, y: 3.13))
        coverPath.addLine(to: CGPoint(x: 7.29, y: 1.38))
        coverPath.addCurve(to: CGPoint(x: 8.21, y: 0.5), controlPoint1: CGPoint(x: 7.29, y: 1.38), controlPoint2: CGPoint(x: 7.23, y: 0.5))
        coverPath.addCurve(to: CGPoint(x: 13.68, y: 0.5), controlPoint1: CGPoint(x: 9.19, y: 0.5), controlPoint2: CGPoint(x: 12.7, y: 0.5))
        coverPath.addCurve(to: CGPoint(x: 14.59, y: 1.38), controlPoint1: CGPoint(x: 14.66, y: 0.5), controlPoint2: CGPoint(x: 14.59, y: 1.38))
        coverPath.addLine(to: CGPoint(x: 14.59, y: 3.13))
        UIColor.black.setStroke()
        coverPath.lineWidth = 1
        coverPath.stroke()


        //// Inner Lines
        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 11, y: 5))
        bezier5Path.addLine(to: CGPoint(x: 11, y: 19.67))
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 7.63, y: 19.67))
        bezier6Path.addLine(to: CGPoint(x: 7.2, y: 5))
        UIColor.black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 14.37, y: 19.67))
        bezier7Path.addLine(to: CGPoint(x: 14.8, y: 5))
        UIColor.black.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconGear(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 6.5, y: 6.5, width: 9, height: 9))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 11)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -5.74, y: -9.25))
        polygonPath.addLine(to: CGPoint(x: -2.74, y: -10.5))
        polygonPath.addCurve(to: CGPoint(x: 0, y: -9), controlPoint1: CGPoint(x: -2.74, y: -10.5), controlPoint2: CGPoint(x: -1.37, y: -9))
        polygonPath.addCurve(to: CGPoint(x: 2.74, y: -10.5), controlPoint1: CGPoint(x: 1.37, y: -9), controlPoint2: CGPoint(x: 2.74, y: -10.5))
        polygonPath.addLine(to: CGPoint(x: 5.72, y: -9.25))
        polygonPath.addCurve(to: CGPoint(x: 6.4, y: -6.4), controlPoint1: CGPoint(x: 5.72, y: -9.25), controlPoint2: CGPoint(x: 5.51, y: -7.33))
        polygonPath.addCurve(to: CGPoint(x: 9.28, y: -5.53), controlPoint1: CGPoint(x: 7.29, y: -5.47), controlPoint2: CGPoint(x: 9.28, y: -5.53))
        polygonPath.addLine(to: CGPoint(x: 10.5, y: -2.57))
        polygonPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 10.5, y: -2.57), controlPoint2: CGPoint(x: 9, y: -1.3))
        polygonPath.addCurve(to: CGPoint(x: 10.48, y: 2.62), controlPoint1: CGPoint(x: 9, y: 1.3), controlPoint2: CGPoint(x: 10.48, y: 2.62))
        polygonPath.addLine(to: CGPoint(x: 9.24, y: 5.63))
        polygonPath.addCurve(to: CGPoint(x: 6.4, y: 6.4), controlPoint1: CGPoint(x: 9.24, y: 5.63), controlPoint2: CGPoint(x: 7.27, y: 5.5))
        polygonPath.addCurve(to: CGPoint(x: 5.76, y: 9.24), controlPoint1: CGPoint(x: 5.53, y: 7.3), controlPoint2: CGPoint(x: 5.76, y: 9.24))
        polygonPath.addLine(to: CGPoint(x: 2.73, y: 10.5))
        polygonPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 2.73, y: 10.5), controlPoint2: CGPoint(x: 1.37, y: 9))
        polygonPath.addCurve(to: CGPoint(x: -2.76, y: 10.49), controlPoint1: CGPoint(x: -1.37, y: 9), controlPoint2: CGPoint(x: -2.76, y: 10.49))
        polygonPath.addLine(to: CGPoint(x: -5.78, y: 9.23))
        polygonPath.addCurve(to: CGPoint(x: -6.4, y: 6.4), controlPoint1: CGPoint(x: -5.78, y: 9.23), controlPoint2: CGPoint(x: -5.55, y: 7.25))
        polygonPath.addCurve(to: CGPoint(x: -9.16, y: 5.85), controlPoint1: CGPoint(x: -7.25, y: 5.55), controlPoint2: CGPoint(x: -9.16, y: 5.85))
        polygonPath.addLine(to: CGPoint(x: -10.43, y: 2.76))
        polygonPath.addCurve(to: CGPoint(x: -9, y: 0), controlPoint1: CGPoint(x: -10.43, y: 2.76), controlPoint2: CGPoint(x: -8.98, y: 1.34))
        polygonPath.addCurve(to: CGPoint(x: -10.5, y: -2.6), controlPoint1: CGPoint(x: -9.02, y: -1.34), controlPoint2: CGPoint(x: -10.5, y: -2.6))
        polygonPath.addLine(to: CGPoint(x: -9.28, y: -5.57))
        polygonPath.addCurve(to: CGPoint(x: -6.4, y: -6.4), controlPoint1: CGPoint(x: -9.28, y: -5.57), controlPoint2: CGPoint(x: -7.28, y: -5.48))
        polygonPath.addCurve(to: CGPoint(x: -5.74, y: -9.25), controlPoint1: CGPoint(x: -5.52, y: -7.32), controlPoint2: CGPoint(x: -5.74, y: -9.25))
        polygonPath.close()
        UIColor.black.setStroke()
        polygonPath.lineWidth = 1
        polygonPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawKeyboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 22)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 5, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 10, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 15, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 20, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 25, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 7, width: 5, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(roundedRect: CGRect(x: 7, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(roundedRect: CGRect(x: 12, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(roundedRect: CGRect(x: 17, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(roundedRect: CGRect(x: 22, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(roundedRect: CGRect(x: 27, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 37, y: 7, width: 6, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 12, width: 6, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle15Path.fill()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(roundedRect: CGRect(x: 8, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle16Path.fill()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(roundedRect: CGRect(x: 13, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle17Path.fill()


        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(roundedRect: CGRect(x: 18, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle18Path.fill()


        //// Rectangle 19 Drawing
        let rectangle19Path = UIBezierPath(roundedRect: CGRect(x: 23, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle19Path.fill()


        //// Rectangle 20 Drawing
        let rectangle20Path = UIBezierPath(roundedRect: CGRect(x: 28, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle20Path.fill()


        //// Rectangle 21 Drawing
        let rectangle21Path = UIBezierPath(roundedRect: CGRect(x: 38, y: 12, width: 5, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle21Path.fill()


        //// Rectangle 22 Drawing
        let rectangle22Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 17, width: 7, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle22Path.fill()


        //// Rectangle 23 Drawing
        let rectangle23Path = UIBezierPath(roundedRect: CGRect(x: 9, y: 17, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle23Path.fill()


        //// Rectangle 24 Drawing
        let rectangle24Path = UIBezierPath(roundedRect: CGRect(x: 14, y: 17, width: 17, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle24Path.fill()


        //// Rectangle 27 Drawing
        let rectangle27Path = UIBezierPath(roundedRect: CGRect(x: 33, y: 17, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle27Path.fill()


        //// Rectangle 28 Drawing
        let rectangle28Path = UIBezierPath(roundedRect: CGRect(x: 38, y: 17, width: 5, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle28Path.fill()


        //// Rectangle 25 Drawing
        let rectangle25Path = UIBezierPath(roundedRect: CGRect(x: 35, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle25Path.fill()


        //// Rectangle 26 Drawing
        let rectangle26Path = UIBezierPath(roundedRect: CGRect(x: 40, y: 2, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle26Path.fill()


        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(roundedRect: CGRect(x: 32, y: 7, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle29Path.fill()


        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(roundedRect: CGRect(x: 33, y: 12, width: 3, height: 3), cornerRadius: 0.5)
        UIColor.black.setFill()
        rectangle30Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconKeyboardShow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 8, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawKeyboard(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 22, y: 1.5))
        polygonPath.addLine(to: CGPoint(x: 25.03, y: 6.75))
        polygonPath.addLine(to: CGPoint(x: 18.97, y: 6.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconKeyboardHide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawKeyboard(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 22, y: 24.25)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 3.03, y: -1.75))
        polygonPath.addLine(to: CGPoint(x: -3.03, y: -1.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconReset(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Oval Drawing
        let ovalRect = CGRect(x: 2, y: 3, width: 18, height: 17)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint.zero, radius: ovalRect.width / 2, startAngle: -48 * CGFloat.pi/180, endAngle: 270 * CGFloat.pi/180, clockwise: true)

        var ovalTransform = CGAffineTransform(translationX: ovalRect.midX, y: ovalRect.midY)
        ovalTransform = ovalTransform.scaledBy(x: 1, y: ovalRect.height / ovalRect.width)
        ovalPath.apply(ovalTransform)

        UIColor.black.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 16, y: 4.3)
        context.rotate(by: -45 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -3.38))
        polygonPath.addLine(to: CGPoint(x: 5.02, y: 1.69))
        polygonPath.addLine(to: CGPoint(x: -5.02, y: 1.69))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconTape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Group 3
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1.5, y: 3))
        bezier3Path.addLine(to: CGPoint(x: 20.5, y: 3))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 1.5, y: 7))
        bezier4Path.addLine(to: CGPoint(x: 20.5, y: 7))
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 1.5, y: 11))
        bezier5Path.addLine(to: CGPoint(x: 20.5, y: 11))
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 1.5, y: 15))
        bezier6Path.addLine(to: CGPoint(x: 20.5, y: 15))
        UIColor.black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 1.5, y: 19))
        bezier7Path.addLine(to: CGPoint(x: 20.5, y: 19))
        UIColor.black.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconInsert(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0.5, y: 0.5, width: 21, height: 21))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 11)
        context.rotate(by: -33 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: -7.75))
        polygonPath.addLine(to: CGPoint(x: 7.36, y: 3.87))
        polygonPath.addLine(to: CGPoint(x: -7.36, y: 3.88))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawJoystick(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 22)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.5, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 23.5, y: 2.5), controlPoint1: CGPoint(x: 21.5, y: 4.5), controlPoint2: CGPoint(x: 21.5, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 2.5), controlPoint1: CGPoint(x: 25.5, y: 2.5), controlPoint2: CGPoint(x: 24.5, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 28.5, y: 0.5), controlPoint1: CGPoint(x: 28.5, y: 2.5), controlPoint2: CGPoint(x: 28.5, y: 0.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 40, y: 12.5))
        bezier2Path.addCurve(to: CGPoint(x: 32.5, y: 20), controlPoint1: CGPoint(x: 40, y: 16.64), controlPoint2: CGPoint(x: 36.64, y: 20))
        bezier2Path.addCurve(to: CGPoint(x: 26.5, y: 17), controlPoint1: CGPoint(x: 30.05, y: 20), controlPoint2: CGPoint(x: 27.87, y: 18.82))
        bezier2Path.addCurve(to: CGPoint(x: 16.5, y: 17), controlPoint1: CGPoint(x: 26.5, y: 17), controlPoint2: CGPoint(x: 20.96, y: 17))
        bezier2Path.addCurve(to: CGPoint(x: 10.5, y: 20), controlPoint1: CGPoint(x: 15.13, y: 18.82), controlPoint2: CGPoint(x: 12.95, y: 20))
        bezier2Path.addCurve(to: CGPoint(x: 3, y: 12.5), controlPoint1: CGPoint(x: 6.36, y: 20), controlPoint2: CGPoint(x: 3, y: 16.64))
        bezier2Path.addCurve(to: CGPoint(x: 7.72, y: 5.53), controlPoint1: CGPoint(x: 3, y: 9.34), controlPoint2: CGPoint(x: 4.96, y: 6.64))
        bezier2Path.addCurve(to: CGPoint(x: 10.5, y: 5), controlPoint1: CGPoint(x: 8.58, y: 5.19), controlPoint2: CGPoint(x: 9.52, y: 5))
        bezier2Path.addCurve(to: CGPoint(x: 32.5, y: 5), controlPoint1: CGPoint(x: 10.67, y: 5), controlPoint2: CGPoint(x: 31.99, y: 5))
        bezier2Path.addCurve(to: CGPoint(x: 40, y: 12.5), controlPoint1: CGPoint(x: 36.64, y: 5), controlPoint2: CGPoint(x: 40, y: 8.36))
        bezier2Path.close()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 10, y: 9, width: 2, height: 7))
        UIColor.black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 12.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -1, y: -3.5, width: 2, height: 7))
        UIColor.black.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 30, y: 8, width: 3, height: 3))
        UIColor.black.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 30, y: 13, width: 3, height: 3))
        UIColor.black.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 27, y: 10.5, width: 3, height: 3))
        UIColor.black.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 33, y: 10.5, width: 3, height: 3))
        UIColor.black.setFill()
        oval4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconJoystickHide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 22, y: 24.25)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 3.03, y: -1.75))
        polygonPath.addLine(to: CGPoint(x: -3.03, y: -1.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 1, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawJoystick(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconJoystickShow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 22, y: 1.5))
        polygonPath.addLine(to: CGPoint(x: 25.03, y: 6.75))
        polygonPath.addLine(to: CGPoint(x: 18.97, y: 6.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 7, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawJoystick(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 22)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 5, y: 2, width: 34, height: 17), cornerRadius: 1)
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath()
        rectangle2Path.move(to: CGPoint(x: 15.5, y: 18.5))
        rectangle2Path.addLine(to: CGPoint(x: 28.5, y: 18.5))
        rectangle2Path.addLine(to: CGPoint(x: 27.42, y: 17))
        rectangle2Path.addLine(to: CGPoint(x: 16.58, y: 17))
        rectangle2Path.addLine(to: CGPoint(x: 15.5, y: 18.5))
        rectangle2Path.close()
        UIColor.black.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()


        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 11, y: 7, width: 6, height: 6))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 27, y: 7, width: 6, height: 6))
        UIColor.black.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.86, y: 7))
        bezierPath.addLine(to: CGPoint(x: 29.86, y: 7))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 13.86, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 29.86, y: 13))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconTapeHide(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 22, y: 24.25)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: 3.5))
        polygonPath.addLine(to: CGPoint(x: 3.03, y: -1.75))
        polygonPath.addLine(to: CGPoint(x: -3.03, y: -1.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawTape(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconTapeShow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 30)


        //// Polygon Drawing
        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 22, y: 1.5))
        polygonPath.addLine(to: CGPoint(x: 25.03, y: 6.75))
        polygonPath.addLine(to: CGPoint(x: 18.97, y: 6.75))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 8, width: 44, height: 22)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        IconsStyleKit.drawTape(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconUpload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1, y: 7, width: 20, height: 12), cornerRadius: 2)
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 6, y: 21, width: 10, height: 1), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 0.5, height: 0.5))
        rectangle2Path.close()
        UIColor.black.setFill()
        rectangle2Path.fill()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 3.3)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -3.38))
        polygonPath.addLine(to: CGPoint(x: 5.02, y: 1.69))
        polygonPath.addLine(to: CGPoint(x: -5.02, y: 1.69))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath()
        rectangle3Path.move(to: CGPoint(x: 8, y: 21))
        rectangle3Path.addLine(to: CGPoint(x: 14, y: 21))
        rectangle3Path.addLine(to: CGPoint(x: 13, y: 18))
        rectangle3Path.addLine(to: CGPoint(x: 9, y: 18))
        rectangle3Path.addLine(to: CGPoint(x: 8, y: 21))
        rectangle3Path.close()
        UIColor.black.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 2, y: 16, width: 19, height: 3))
        UIColor.black.setFill()
        rectangle4Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 17, width: 2, height: 2))
        UIColor.white.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconDownload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.94, y: 1.01))
        bezierPath.addCurve(to: CGPoint(x: 11.68, y: 2.2), controlPoint1: CGPoint(x: 10.02, y: 1.06), controlPoint2: CGPoint(x: 10.98, y: 1.51))
        bezierPath.addCurve(to: CGPoint(x: 12.06, y: 2.64), controlPoint1: CGPoint(x: 11.82, y: 2.34), controlPoint2: CGPoint(x: 11.95, y: 2.49))
        bezierPath.addCurve(to: CGPoint(x: 14.18, y: 1.87), controlPoint1: CGPoint(x: 12.64, y: 2.15), controlPoint2: CGPoint(x: 13.37, y: 1.87))
        bezierPath.addCurve(to: CGPoint(x: 17.36, y: 4.9), controlPoint1: CGPoint(x: 15.94, y: 1.87), controlPoint2: CGPoint(x: 17.36, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 17.32, y: 5.41), controlPoint1: CGPoint(x: 17.36, y: 5.07), controlPoint2: CGPoint(x: 17.35, y: 5.25))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 9.67), controlPoint1: CGPoint(x: 19.42, y: 5.8), controlPoint2: CGPoint(x: 21, y: 7.56))
        bezierPath.addCurve(to: CGPoint(x: 16.45, y: 14), controlPoint1: CGPoint(x: 21, y: 12.06), controlPoint2: CGPoint(x: 18.96, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5.55, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 9.67), controlPoint1: CGPoint(x: 3.04, y: 14), controlPoint2: CGPoint(x: 1, y: 12.06))
        bezierPath.addCurve(to: CGPoint(x: 4.67, y: 5.41), controlPoint1: CGPoint(x: 1, y: 7.56), controlPoint2: CGPoint(x: 2.58, y: 5.8))
        bezierPath.addCurve(to: CGPoint(x: 4.64, y: 4.9), controlPoint1: CGPoint(x: 4.65, y: 5.25), controlPoint2: CGPoint(x: 4.64, y: 5.07))
        bezierPath.addCurve(to: CGPoint(x: 6.99, y: 1.37), controlPoint1: CGPoint(x: 4.64, y: 3.34), controlPoint2: CGPoint(x: 5.6, y: 1.99))
        bezierPath.addCurve(to: CGPoint(x: 8.73, y: 1), controlPoint1: CGPoint(x: 7.52, y: 1.13), controlPoint2: CGPoint(x: 8.11, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 8.94, y: 1.01), controlPoint1: CGPoint(x: 8.8, y: 1), controlPoint2: CGPoint(x: 8.87, y: 1))
        bezierPath.close()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 18.3)
        context.rotate(by: -180 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -3.38))
        polygonPath.addLine(to: CGPoint(x: 5.02, y: 1.69))
        polygonPath.addLine(to: CGPoint(x: -5.02, y: 1.69))
        polygonPath.close()
        UIColor.black.setFill()
        polygonPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconTrashSnapshot(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.5, y: 3.13))
        bezierPath.addCurve(to: CGPoint(x: 19.5, y: 3.13), controlPoint1: CGPoint(x: 17.8, y: 3.13), controlPoint2: CGPoint(x: 19.5, y: 3.13))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Canister Drawing
        let canisterPath = UIBezierPath()
        canisterPath.move(to: CGPoint(x: 3.64, y: 3.13))
        canisterPath.addCurve(to: CGPoint(x: 4.56, y: 20.65), controlPoint1: CGPoint(x: 3.64, y: 3.13), controlPoint2: CGPoint(x: 4.54, y: 19.67))
        canisterPath.addCurve(to: CGPoint(x: 5.47, y: 21.52), controlPoint1: CGPoint(x: 4.57, y: 21.62), controlPoint2: CGPoint(x: 5.47, y: 21.52))
        canisterPath.addLine(to: CGPoint(x: 9.5, y: 21.5))
        canisterPath.move(to: CGPoint(x: 17.82, y: 10.96))
        canisterPath.addCurve(to: CGPoint(x: 18.24, y: 3.13), controlPoint1: CGPoint(x: 18.04, y: 6.91), controlPoint2: CGPoint(x: 18.24, y: 3.13))
        UIColor.black.setStroke()
        canisterPath.lineWidth = 1
        canisterPath.stroke()


        //// Cover Drawing
        let coverPath = UIBezierPath()
        coverPath.move(to: CGPoint(x: 7.29, y: 3.13))
        coverPath.addLine(to: CGPoint(x: 7.29, y: 1.38))
        coverPath.addCurve(to: CGPoint(x: 8.21, y: 0.5), controlPoint1: CGPoint(x: 7.29, y: 1.38), controlPoint2: CGPoint(x: 7.23, y: 0.5))
        coverPath.addCurve(to: CGPoint(x: 13.68, y: 0.5), controlPoint1: CGPoint(x: 9.19, y: 0.5), controlPoint2: CGPoint(x: 12.7, y: 0.5))
        coverPath.addCurve(to: CGPoint(x: 14.59, y: 1.38), controlPoint1: CGPoint(x: 14.66, y: 0.5), controlPoint2: CGPoint(x: 14.59, y: 1.38))
        coverPath.addLine(to: CGPoint(x: 14.59, y: 3.13))
        UIColor.black.setStroke()
        coverPath.lineWidth = 1
        coverPath.stroke()


        //// Inner Lines
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 11, y: 5))
        bezier3Path.addLine(to: CGPoint(x: 11, y: 11.5))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 7.45, y: 13.64))
        bezier4Path.addLine(to: CGPoint(x: 7.2, y: 5))
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 14.8, y: 5))
        bezier11Path.addCurve(to: CGPoint(x: 14.67, y: 9.5), controlPoint1: CGPoint(x: 14.8, y: 5), controlPoint2: CGPoint(x: 14.74, y: 6.99))
        bezier11Path.addCurve(to: CGPoint(x: 14.8, y: 5), controlPoint1: CGPoint(x: 14.74, y: 6.99), controlPoint2: CGPoint(x: 14.8, y: 5))
        bezier11Path.addLine(to: CGPoint(x: 14.8, y: 5))
        bezier11Path.close()
        UIColor.white.setFill()
        bezier11Path.fill()
        UIColor.black.setStroke()
        bezier11Path.lineWidth = 1
        bezier11Path.stroke()






        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 18, y: 11.68))
        bezier2Path.addLine(to: CGPoint(x: 19.72, y: 11.68))
        bezier2Path.addCurve(to: CGPoint(x: 20.72, y: 11.75), controlPoint1: CGPoint(x: 20.23, y: 11.68), controlPoint2: CGPoint(x: 20.49, y: 11.68))
        bezier2Path.addLine(to: CGPoint(x: 20.76, y: 11.76))
        bezier2Path.addCurve(to: CGPoint(x: 21.41, y: 12.37), controlPoint1: CGPoint(x: 21.07, y: 11.87), controlPoint2: CGPoint(x: 21.3, y: 12.09))
        bezier2Path.addCurve(to: CGPoint(x: 21.5, y: 13.35), controlPoint1: CGPoint(x: 21.5, y: 12.63), controlPoint2: CGPoint(x: 21.5, y: 12.87))
        bezier2Path.addLine(to: CGPoint(x: 21.5, y: 19.83))
        bezier2Path.addCurve(to: CGPoint(x: 21.42, y: 20.77), controlPoint1: CGPoint(x: 21.5, y: 20.31), controlPoint2: CGPoint(x: 21.5, y: 20.55))
        bezier2Path.addLine(to: CGPoint(x: 21.41, y: 20.81))
        bezier2Path.addCurve(to: CGPoint(x: 20.76, y: 21.42), controlPoint1: CGPoint(x: 21.3, y: 21.09), controlPoint2: CGPoint(x: 21.07, y: 21.32))
        bezier2Path.addCurve(to: CGPoint(x: 19.72, y: 21.5), controlPoint1: CGPoint(x: 20.49, y: 21.5), controlPoint2: CGPoint(x: 20.23, y: 21.5))
        bezier2Path.addLine(to: CGPoint(x: 9.28, y: 21.5))
        bezier2Path.addCurve(to: CGPoint(x: 8.28, y: 21.43), controlPoint1: CGPoint(x: 8.77, y: 21.5), controlPoint2: CGPoint(x: 8.51, y: 21.5))
        bezier2Path.addLine(to: CGPoint(x: 8.24, y: 21.42))
        bezier2Path.addCurve(to: CGPoint(x: 7.59, y: 20.81), controlPoint1: CGPoint(x: 7.93, y: 21.32), controlPoint2: CGPoint(x: 7.7, y: 21.09))
        bezier2Path.addCurve(to: CGPoint(x: 7.5, y: 19.83), controlPoint1: CGPoint(x: 7.5, y: 20.55), controlPoint2: CGPoint(x: 7.5, y: 20.31))
        bezier2Path.addLine(to: CGPoint(x: 7.5, y: 13.35))
        bezier2Path.addCurve(to: CGPoint(x: 7.58, y: 12.41), controlPoint1: CGPoint(x: 7.5, y: 12.87), controlPoint2: CGPoint(x: 7.5, y: 12.63))
        bezier2Path.addLine(to: CGPoint(x: 7.59, y: 12.37))
        bezier2Path.addCurve(to: CGPoint(x: 8.24, y: 11.76), controlPoint1: CGPoint(x: 7.7, y: 12.09), controlPoint2: CGPoint(x: 7.93, y: 11.87))
        bezier2Path.addCurve(to: CGPoint(x: 9.28, y: 11.68), controlPoint1: CGPoint(x: 8.51, y: 11.68), controlPoint2: CGPoint(x: 8.77, y: 11.68))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 11.68))
        bezier2Path.move(to: CGPoint(x: 18, y: 11.68))
        bezier2Path.addLine(to: CGPoint(x: 16.83, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 12.17, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 11.68))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 17.42, y: 16.41))
        ovalPath.addCurve(to: CGPoint(x: 14.5, y: 19.32), controlPoint1: CGPoint(x: 17.42, y: 18.02), controlPoint2: CGPoint(x: 16.11, y: 19.32))
        ovalPath.addCurve(to: CGPoint(x: 11.58, y: 16.41), controlPoint1: CGPoint(x: 12.89, y: 19.32), controlPoint2: CGPoint(x: 11.58, y: 18.02))
        ovalPath.addCurve(to: CGPoint(x: 14.5, y: 13.5), controlPoint1: CGPoint(x: 11.58, y: 14.8), controlPoint2: CGPoint(x: 12.89, y: 13.5))
        ovalPath.addCurve(to: CGPoint(x: 17.42, y: 16.41), controlPoint1: CGPoint(x: 16.11, y: 13.5), controlPoint2: CGPoint(x: 17.42, y: 14.8))
        ovalPath.close()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 19.75, y: 13.86))
        oval2Path.addCurve(to: CGPoint(x: 19.17, y: 14.41), controlPoint1: CGPoint(x: 19.75, y: 14.16), controlPoint2: CGPoint(x: 19.49, y: 14.41))
        oval2Path.addCurve(to: CGPoint(x: 18.58, y: 13.86), controlPoint1: CGPoint(x: 18.84, y: 14.41), controlPoint2: CGPoint(x: 18.58, y: 14.16))
        oval2Path.addCurve(to: CGPoint(x: 19.17, y: 13.32), controlPoint1: CGPoint(x: 18.58, y: 13.56), controlPoint2: CGPoint(x: 18.84, y: 13.32))
        oval2Path.addCurve(to: CGPoint(x: 19.75, y: 13.86), controlPoint1: CGPoint(x: 19.49, y: 13.32), controlPoint2: CGPoint(x: 19.75, y: 13.56))
        oval2Path.close()
        UIColor.black.setFill()
        oval2Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfIcon: UIImage {
        if Cache.imageOfIcon != nil {
            return Cache.imageOfIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1024, height: 1024), false, 0)
            IconsStyleKit.drawIcon()

        Cache.imageOfIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon!
    }

    @objc dynamic public class var imageOfIconTrash: UIImage {
        if Cache.imageOfIconTrash != nil {
            return Cache.imageOfIconTrash!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconTrash()

        Cache.imageOfIconTrash = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconTrash!
    }

    @objc dynamic public class var imageOfIconGear: UIImage {
        if Cache.imageOfIconGear != nil {
            return Cache.imageOfIconGear!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconGear()

        Cache.imageOfIconGear = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconGear!
    }

    @objc dynamic public class var imageOfKeyboard: UIImage {
        if Cache.imageOfKeyboard != nil {
            return Cache.imageOfKeyboard!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 22), false, 0)
            IconsStyleKit.drawKeyboard()

        Cache.imageOfKeyboard = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfKeyboard!
    }

    @objc dynamic public class var imageOfIconKeyboardShow: UIImage {
        if Cache.imageOfIconKeyboardShow != nil {
            return Cache.imageOfIconKeyboardShow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconKeyboardShow()

        Cache.imageOfIconKeyboardShow = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconKeyboardShow!
    }

    @objc dynamic public class var imageOfIconKeyboardHide: UIImage {
        if Cache.imageOfIconKeyboardHide != nil {
            return Cache.imageOfIconKeyboardHide!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconKeyboardHide()

        Cache.imageOfIconKeyboardHide = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconKeyboardHide!
    }

    @objc dynamic public class var imageOfIconReset: UIImage {
        if Cache.imageOfIconReset != nil {
            return Cache.imageOfIconReset!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconReset()

        Cache.imageOfIconReset = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconReset!
    }

    @objc dynamic public class var imageOfIconTape: UIImage {
        if Cache.imageOfIconTape != nil {
            return Cache.imageOfIconTape!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconTape()

        Cache.imageOfIconTape = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconTape!
    }

    @objc dynamic public class var imageOfIconInsert: UIImage {
        if Cache.imageOfIconInsert != nil {
            return Cache.imageOfIconInsert!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconInsert()

        Cache.imageOfIconInsert = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconInsert!
    }

    @objc dynamic public class var imageOfJoystick: UIImage {
        if Cache.imageOfJoystick != nil {
            return Cache.imageOfJoystick!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 22), false, 0)
            IconsStyleKit.drawJoystick()

        Cache.imageOfJoystick = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfJoystick!
    }

    @objc dynamic public class var imageOfIconJoystickHide: UIImage {
        if Cache.imageOfIconJoystickHide != nil {
            return Cache.imageOfIconJoystickHide!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconJoystickHide()

        Cache.imageOfIconJoystickHide = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconJoystickHide!
    }

    @objc dynamic public class var imageOfIconJoystickShow: UIImage {
        if Cache.imageOfIconJoystickShow != nil {
            return Cache.imageOfIconJoystickShow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconJoystickShow()

        Cache.imageOfIconJoystickShow = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconJoystickShow!
    }

    @objc dynamic public class var imageOfTape: UIImage {
        if Cache.imageOfTape != nil {
            return Cache.imageOfTape!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 22), false, 0)
            IconsStyleKit.drawTape()

        Cache.imageOfTape = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfTape!
    }

    @objc dynamic public class var imageOfIconTapeHide: UIImage {
        if Cache.imageOfIconTapeHide != nil {
            return Cache.imageOfIconTapeHide!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconTapeHide()

        Cache.imageOfIconTapeHide = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconTapeHide!
    }

    @objc dynamic public class var imageOfIconTapeShow: UIImage {
        if Cache.imageOfIconTapeShow != nil {
            return Cache.imageOfIconTapeShow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 30), false, 0)
            IconsStyleKit.drawIconTapeShow()

        Cache.imageOfIconTapeShow = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconTapeShow!
    }

    @objc dynamic public class var imageOfIconUpload: UIImage {
        if Cache.imageOfIconUpload != nil {
            return Cache.imageOfIconUpload!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconUpload()

        Cache.imageOfIconUpload = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconUpload!
    }

    @objc dynamic public class var imageOfIconDownload: UIImage {
        if Cache.imageOfIconDownload != nil {
            return Cache.imageOfIconDownload!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconDownload()

        Cache.imageOfIconDownload = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconDownload!
    }

    @objc dynamic public class var imageOfIconTrashSnapshot: UIImage {
        if Cache.imageOfIconTrashSnapshot != nil {
            return Cache.imageOfIconTrashSnapshot!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            IconsStyleKit.drawIconTrashSnapshot()

        Cache.imageOfIconTrashSnapshot = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfIconTrashSnapshot!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var iconTargets: [AnyObject]! {
        get { return Cache.iconTargets }
        set {
            Cache.iconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var iconTrashTargets: [AnyObject]! {
        get { return Cache.iconTrashTargets }
        set {
            Cache.iconTrashTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconTrash)
            }
        }
    }

    @objc @IBOutlet dynamic var iconGearTargets: [AnyObject]! {
        get { return Cache.iconGearTargets }
        set {
            Cache.iconGearTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconGear)
            }
        }
    }

    @objc @IBOutlet dynamic var keyboardTargets: [AnyObject]! {
        get { return Cache.keyboardTargets }
        set {
            Cache.keyboardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfKeyboard)
            }
        }
    }

    @objc @IBOutlet dynamic var iconKeyboardShowTargets: [AnyObject]! {
        get { return Cache.iconKeyboardShowTargets }
        set {
            Cache.iconKeyboardShowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconKeyboardShow)
            }
        }
    }

    @objc @IBOutlet dynamic var iconKeyboardHideTargets: [AnyObject]! {
        get { return Cache.iconKeyboardHideTargets }
        set {
            Cache.iconKeyboardHideTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconKeyboardHide)
            }
        }
    }

    @objc @IBOutlet dynamic var iconResetTargets: [AnyObject]! {
        get { return Cache.iconResetTargets }
        set {
            Cache.iconResetTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconReset)
            }
        }
    }

    @objc @IBOutlet dynamic var iconTapeTargets: [AnyObject]! {
        get { return Cache.iconTapeTargets }
        set {
            Cache.iconTapeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconTape)
            }
        }
    }

    @objc @IBOutlet dynamic var iconInsertTargets: [AnyObject]! {
        get { return Cache.iconInsertTargets }
        set {
            Cache.iconInsertTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconInsert)
            }
        }
    }

    @objc @IBOutlet dynamic var joystickTargets: [AnyObject]! {
        get { return Cache.joystickTargets }
        set {
            Cache.joystickTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfJoystick)
            }
        }
    }

    @objc @IBOutlet dynamic var iconJoystickHideTargets: [AnyObject]! {
        get { return Cache.iconJoystickHideTargets }
        set {
            Cache.iconJoystickHideTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconJoystickHide)
            }
        }
    }

    @objc @IBOutlet dynamic var iconJoystickShowTargets: [AnyObject]! {
        get { return Cache.iconJoystickShowTargets }
        set {
            Cache.iconJoystickShowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconJoystickShow)
            }
        }
    }

    @objc @IBOutlet dynamic var tapeTargets: [AnyObject]! {
        get { return Cache.tapeTargets }
        set {
            Cache.tapeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfTape)
            }
        }
    }

    @objc @IBOutlet dynamic var iconTapeHideTargets: [AnyObject]! {
        get { return Cache.iconTapeHideTargets }
        set {
            Cache.iconTapeHideTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconTapeHide)
            }
        }
    }

    @objc @IBOutlet dynamic var iconTapeShowTargets: [AnyObject]! {
        get { return Cache.iconTapeShowTargets }
        set {
            Cache.iconTapeShowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconTapeShow)
            }
        }
    }

    @objc @IBOutlet dynamic var iconUploadTargets: [AnyObject]! {
        get { return Cache.iconUploadTargets }
        set {
            Cache.iconUploadTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconUpload)
            }
        }
    }

    @objc @IBOutlet dynamic var iconDownloadTargets: [AnyObject]! {
        get { return Cache.iconDownloadTargets }
        set {
            Cache.iconDownloadTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconDownload)
            }
        }
    }

    @objc @IBOutlet dynamic var iconTrashSnapshotTargets: [AnyObject]! {
        get { return Cache.iconTrashSnapshotTargets }
        set {
            Cache.iconTrashSnapshotTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IconsStyleKit.imageOfIconTrashSnapshot)
            }
        }
    }




    @objc(IconsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
