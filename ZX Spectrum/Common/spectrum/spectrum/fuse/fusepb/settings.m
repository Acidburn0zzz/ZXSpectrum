/* settings.m: Handling configuration settings
   Copyright (c) 2002 Philip Kendall, Fredrick Meunier

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

   Author contact information:

   E-mail: philip-fuse@shadowmagic.org.uk

*/

/* This file is autogenerated from settings.dat by settings.pl.
   Do not edit unless you know what will happen! */

#include <config.h>

#include <stdio.h>
#include <string.h>

#import <Foundation/NSDictionary.h>
#import <Foundation/NSEnumerator.h>
#import <Foundation/NSString.h>
#import <Foundation/NSUserDefaults.h>

#import "FuseController.h"
#import "CAMachines.h"

#ifdef HAVE_GETOPT_LONG		/* Did our libc include getopt_long? */
#include <getopt.h>
#elif defined AMIGA || defined __MORPHOS__            /* #ifdef HAVE_GETOPT_LONG */
/* The platform uses GNU getopt, but not getopt_long, so we get
   symbol clashes on this platform. Just use getopt */
#else				/* #ifdef HAVE_GETOPT_LONG */
#include "compat.h"		/* If not, use ours */
#endif				/* #ifdef HAVE_GETOPT_LONG */

#include "fuse.h"
#include "infrastructure/startup_manager.h"
#include "machine.h"
#include "options.h"
#include "settings.h"
#include "settings_cocoa.h"
#include "spectrum.h"
#include "ui/ui.h"

/* The current settings of options, etc */
#include "utils.h"
settings_info settings_current;

/* The default settings of options, etc */
settings_info settings_default = {
  /* accelerate_loader */ 1,
  /* aspect_hint */ 1,
  /* auto_load */ 1,
  /* autosave_settings */ 1,
  /* beta128 */ 0,
  /* beta128_48boot */ 1,
  /* betadisk_file */ (char *)NULL,
  /* bilinear_filter */ 0,
  /* bw_tv */ 0,
  /* competition_code */ 0,
  /* competition_mode */ 0,
  /* confirm_actions */ 1,
  /* dck_file */ (char *)NULL,
  /* debugger_command */ (char *)NULL,
  /* detect_loader */ 1,
  /* didaktik80 */ 0,
  /* didaktik80disk_file */ (char *)NULL,
  /* disciple */ 0,
  /* discipledisk_file */ (char *)NULL,
  /* disk_ask_merge */ 1,
  /* disk_try_merge */ (char *)"With single-sided drives",
  /* divide_enabled */ 0,
  /* divide_master_file */ (char *)NULL,
  /* divide_slave_file */ (char *)NULL,
  /* divide_wp */ 0,
  /* doublescan_mode */ 1,
  /* drive_40_max_track */ 42,
  /* drive_80_max_track */ 84,
  /* drive_beta128a_type */ (char *)"Double-sided 80 track",
  /* drive_beta128b_type */ (char *)"Double-sided 80 track",
  /* drive_beta128c_type */ (char *)"Double-sided 80 track",
  /* drive_beta128d_type */ (char *)"Double-sided 80 track",
  /* drive_didaktik80a_type */ (char *)"Double-sided 80 track",
  /* drive_didaktik80b_type */ (char *)"Double-sided 80 track",
  /* drive_disciple1_type */ (char *)"Double-sided 80 track",
  /* drive_disciple2_type */ (char *)"Double-sided 80 track",
  /* drive_opus1_type */ (char *)"Single-sided 40 track",
  /* drive_opus2_type */ (char *)"Single-sided 40 track",
  /* drive_plus3a_type */ (char *)"Single-sided 40 track",
  /* drive_plus3b_type */ (char *)"Double-sided 80 track",
  /* drive_plusd1_type */ (char *)"Double-sided 80 track",
  /* drive_plusd2_type */ (char *)"Double-sided 80 track",
  /* embed_snapshot */ 1,
  /* emulation_speed */ 100,
  /* fastload */ 1,
  /* fb_mode */ 320,
  /* frame_rate */ 1,
  /* full_screen */ 0,
  /* full_screen_panorama */ 1,
  /* fuller */ 0,
  /* if2_file */ (char *)NULL,
  /* interface1 */ 0,
  /* interface2 */ 1,
  /* issue2 */ 0,
  /* joy1_number */ 0,
  /* joy1_xaxis */ 0,
  /* joy1_yaxis */ 1,
  /* joy2_number */ 0,
  /* joy2_xaxis */ 0,
  /* joy2_yaxis */ 1,
  /* joy_kempston */ 0,
  /* joy_keyboard */ 0,
  /* joy_prompt */ 1,
  /* joystick_1 */ (char *)NULL,
  /* joystick_1_fire_1 */ 4096,
  /* joystick_1_fire_10 */ 4096,
  /* joystick_1_fire_11 */ 4096,
  /* joystick_1_fire_12 */ 4096,
  /* joystick_1_fire_13 */ 4096,
  /* joystick_1_fire_14 */ 4096,
  /* joystick_1_fire_15 */ 4096,
  /* joystick_1_fire_2 */ 4096,
  /* joystick_1_fire_3 */ 4096,
  /* joystick_1_fire_4 */ 4096,
  /* joystick_1_fire_5 */ 4096,
  /* joystick_1_fire_6 */ 4096,
  /* joystick_1_fire_7 */ 4096,
  /* joystick_1_fire_8 */ 4096,
  /* joystick_1_fire_9 */ 4096,
  /* joystick_1_output */ 0,
  /* joystick_2 */ (char *)NULL,
  /* joystick_2_fire_1 */ 4096,
  /* joystick_2_fire_10 */ 4096,
  /* joystick_2_fire_11 */ 4096,
  /* joystick_2_fire_12 */ 4096,
  /* joystick_2_fire_13 */ 4096,
  /* joystick_2_fire_14 */ 4096,
  /* joystick_2_fire_15 */ 4096,
  /* joystick_2_fire_2 */ 4096,
  /* joystick_2_fire_3 */ 4096,
  /* joystick_2_fire_4 */ 4096,
  /* joystick_2_fire_5 */ 4096,
  /* joystick_2_fire_6 */ 4096,
  /* joystick_2_fire_7 */ 4096,
  /* joystick_2_fire_8 */ 4096,
  /* joystick_2_fire_9 */ 4096,
  /* joystick_2_output */ 0,
  /* joystick_keyboard_down */ 97,
  /* joystick_keyboard_fire */ 32,
  /* joystick_keyboard_left */ 111,
  /* joystick_keyboard_output */ 0,
  /* joystick_keyboard_right */ 112,
  /* joystick_keyboard_up */ 113,
  /* kempston_mouse */ 0,
  /* late_timings */ 0,
  /* mdr_file */ (char *)NULL,
  /* mdr_file2 */ (char *)NULL,
  /* mdr_file3 */ (char *)NULL,
  /* mdr_file4 */ (char *)NULL,
  /* mdr_file5 */ (char *)NULL,
  /* mdr_file6 */ (char *)NULL,
  /* mdr_file7 */ (char *)NULL,
  /* mdr_file8 */ (char *)NULL,
  /* mdr_len */ 180,
  /* mdr_random_len */ 1,
  /* melodik */ 0,
  /* mouse_swap_buttons */ 0,
  /* movie_compr */ (char *)NULL,
  /* movie_start */ (char *)NULL,
  /* movie_stop_after_rzx */ 1,
  /* opus */ 0,
  /* opusdisk_file */ (char *)NULL,
  /* pal_tv2x */ 0,
  /* playback_file */ (char *)NULL,
  /* plus3_detect_speedlock */ 1,
  /* plus3disk_file */ (char *)NULL,
  /* plusd */ 0,
  /* plusddisk_file */ (char *)NULL,
  /* preferences_tab */ 0,
  /* printer */ 0,
  /* printer_graphics_filename */ (char *)"printout.pbm",
  /* printer_text_filename */ (char *)"printout.txt",
  /* raw_s_net */ 0,
  /* record_file */ (char *)NULL,
  /* recreated_spectrum */ 0,
  /* rom_128_0 */ (char *)"128-0.rom",
  /* rom_128_1 */ (char *)"128-1.rom",
  /* rom_16_0 */ (char *)"48.rom",
  /* rom_2048_0 */ (char *)"tc2048.rom",
  /* rom_2068_0 */ (char *)"tc2068-0.rom",
  /* rom_2068_1 */ (char *)"tc2068-1.rom",
  /* rom_48_0 */ (char *)"48.rom",
  /* rom_beta128 */ (char *)"trdos.rom",
  /* rom_didaktik80 */ (char *)"didaktik80.rom",
  /* rom_disciple */ (char *)"disciple.rom",
  /* rom_interface1 */ (char *)"if1-2.rom",
  /* rom_opus */ (char *)"opus.rom",
  /* rom_pentagon1024_0 */ (char *)"128p-0.rom",
  /* rom_pentagon1024_1 */ (char *)"128p-1.rom",
  /* rom_pentagon1024_2 */ (char *)"trdos.rom",
  /* rom_pentagon1024_3 */ (char *)"gluck.rom",
  /* rom_pentagon512_0 */ (char *)"128p-0.rom",
  /* rom_pentagon512_1 */ (char *)"128p-1.rom",
  /* rom_pentagon512_2 */ (char *)"trdos.rom",
  /* rom_pentagon512_3 */ (char *)"gluck.rom",
  /* rom_pentagon_0 */ (char *)"128p-0.rom",
  /* rom_pentagon_1 */ (char *)"128p-1.rom",
  /* rom_pentagon_2 */ (char *)"trdos.rom",
  /* rom_plus2_0 */ (char *)"plus2-0.rom",
  /* rom_plus2_1 */ (char *)"plus2-1.rom",
  /* rom_plus2a_0 */ (char *)"plus3-0.rom",
  /* rom_plus2a_1 */ (char *)"plus3-1.rom",
  /* rom_plus2a_2 */ (char *)"plus3-2.rom",
  /* rom_plus2a_3 */ (char *)"plus3-3.rom",
  /* rom_plus3_0 */ (char *)"plus3-0.rom",
  /* rom_plus3_1 */ (char *)"plus3-1.rom",
  /* rom_plus3_2 */ (char *)"plus3-2.rom",
  /* rom_plus3_3 */ (char *)"plus3-3.rom",
  /* rom_plus3e_0 */ (char *)"plus3e-0.rom",
  /* rom_plus3e_1 */ (char *)"plus3e-1.rom",
  /* rom_plus3e_2 */ (char *)"plus3e-2.rom",
  /* rom_plus3e_3 */ (char *)"plus3e-3.rom",
  /* rom_plusd */ (char *)"plusd.rom",
  /* rom_scorpion_0 */ (char *)"256s-0.rom",
  /* rom_scorpion_1 */ (char *)"256s-1.rom",
  /* rom_scorpion_2 */ (char *)"256s-2.rom",
  /* rom_scorpion_3 */ (char *)"256s-3.rom",
  /* rom_se_0 */ (char *)"se-0.rom",
  /* rom_se_1 */ (char *)"se-1.rom",
  /* rom_speccyboot */ (char *)"speccyboot-1.4.rom",
  /* rom_ts2068_0 */ (char *)"tc2068-0.rom",
  /* rom_ts2068_1 */ (char *)"tc2068-1.rom",
  /* rom_usource */ (char *)"usource.rom",
  /* rs232_handshake */ 0,
  /* rs232_rx */ (char *)NULL,
  /* rs232_tx */ (char *)NULL,
  /* rzx_autosaves */ 1,
  /* rzx_compression */ 1,
  /* simpleide_active */ 0,
  /* simpleide_master_file */ (char *)NULL,
  /* simpleide_slave_file */ (char *)NULL,
  /* slt_traps */ 1,
  /* snapshot */ (char *)NULL,
  /* snet */ (char *)NULL,
  /* sound */ 1,
  /* sound_device */ (char *)NULL,
  /* sound_force_8bit */ 0,
  /* sound_freq */ 32000,
  /* sound_load */ 1,
  /* speaker_type */ (char *)"TV speaker",
  /* speccyboot */ 0,
  /* speccyboot_tap */ (char *)"tap0",
  /* specdrum */ 0,
  /* spectranet */ 0,
  /* spectranet_disable */ 0,
  /* start_machine */ (char *)"48",
  /* start_scaler_mode */ (char *)"normal",
  /* statusbar */ 0,
  /* stereo_ay */ (char *)"None",
  /* strict_aspect_hint */ 0,
  /* svga_modes */ (char *)NULL,
  /* tape_file */ (char *)NULL,
  /* tape_traps */ 1,
  /* unittests */ 0,
  /* usource */ 0,
  /* volume_ay */ 100,
  /* volume_beeper */ 100,
  /* volume_specdrum */ 100,
  /* writable_roms */ 0,
  /* z80_is_cmos */ 0,
  /* zxatasp_active */ 0,
  /* zxatasp_master_file */ (char *)NULL,
  /* zxatasp_slave_file */ (char *)NULL,
  /* zxatasp_upload */ 0,
  /* zxatasp_wp */ 0,
  /* zxcf_active */ 0,
  /* zxcf_pri_file */ (char *)NULL,
  /* zxcf_upload */ 0,
  /* zxprinter */ 1,
  /* cocoa */ NULL,
  /* show_help */ 0,
  /* show_version */ 0,
};

static int settings_command_line( settings_info *settings, int *first_arg,
				  int argc, char **argv );

static void settings_copy_internal( settings_info *dest, settings_info *src );

/* Called on emulator startup */
int
settings_init( int *first_arg, int argc, char **argv )
{
  int error;

  error = read_config_file( &settings_current );
  if( error ) return error;

  error = settings_command_line( &settings_current, first_arg, argc, argv );
  if( error ) return error;

  return 0;
}

/* Fill the settings structure with sensible defaults */
void settings_defaults( settings_info *settings )
{
  BOOL value;

  NSMutableDictionary *defaultValues = [NSMutableDictionary dictionary];

  settings_copy_internal( settings, &settings_default );

  value = settings->accelerate_loader ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"accelerateloader"];
  value = settings->aspect_hint ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"aspecthint"];
  value = settings->auto_load ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"autoload"];
  value = settings->autosave_settings ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"autosavesettings"];
  value = settings->beta128 ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"beta128"];
  value = settings->beta128_48boot ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"beta12848boot"];
  if( settings->betadisk_file )
    [defaultValues setObject:@(settings->betadisk_file) forKey:@"betadisk"];
  else
    [defaultValues setObject:@"" forKey:@"betadisk"];
  value = settings->bilinear_filter ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"bilinear"];
  value = settings->bw_tv ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"bwtv"];
  [defaultValues setObject:@(settings->competition_code) forKey:@"competitioncode"];
  value = settings->competition_mode ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"competitionmode"];
  value = settings->confirm_actions ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"confirmactions"];
  if( settings->dck_file )
    [defaultValues setObject:@(settings->dck_file) forKey:@"dock"];
  else
    [defaultValues setObject:@"" forKey:@"dock"];
  if( settings->debugger_command )
    [defaultValues setObject:@(settings->debugger_command) forKey:@"debuggercommand"];
  else
    [defaultValues setObject:@"" forKey:@"debuggercommand"];
  value = settings->detect_loader ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"detectloader"];
  value = settings->didaktik80 ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"didaktik80"];
  if( settings->didaktik80disk_file )
    [defaultValues setObject:@(settings->didaktik80disk_file) forKey:@"didaktik80disk"];
  else
    [defaultValues setObject:@"" forKey:@"didaktik80disk"];
  value = settings->disciple ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"disciple"];
  if( settings->discipledisk_file )
    [defaultValues setObject:@(settings->discipledisk_file) forKey:@"discipledisk"];
  else
    [defaultValues setObject:@"" forKey:@"discipledisk"];
  value = settings->disk_ask_merge ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"diskaskmerge"];
  if( settings->disk_try_merge )
    [defaultValues setObject:@(settings->disk_try_merge) forKey:@"disktrymerge"];
  else
    [defaultValues setObject:@"" forKey:@"disktrymerge"];
  value = settings->divide_enabled ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"divide"];
  if( settings->divide_master_file )
    [defaultValues setObject:@(settings->divide_master_file) forKey:@"dividemasterfile"];
  else
    [defaultValues setObject:@"" forKey:@"dividemasterfile"];
  if( settings->divide_slave_file )
    [defaultValues setObject:@(settings->divide_slave_file) forKey:@"divideslavefile"];
  else
    [defaultValues setObject:@"" forKey:@"divideslavefile"];
  value = settings->divide_wp ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"dividewriteprotect"];
  [defaultValues setObject:@(settings->doublescan_mode) forKey:@"doublescanmode"];
  [defaultValues setObject:@(settings->drive_40_max_track) forKey:@"drive40maxtrack"];
  [defaultValues setObject:@(settings->drive_80_max_track) forKey:@"drive80maxtrack"];
  if( settings->drive_beta128a_type )
    [defaultValues setObject:@(settings->drive_beta128a_type) forKey:@"drivebeta128atype"];
  else
    [defaultValues setObject:@"" forKey:@"drivebeta128atype"];
  if( settings->drive_beta128b_type )
    [defaultValues setObject:@(settings->drive_beta128b_type) forKey:@"drivebeta128btype"];
  else
    [defaultValues setObject:@"" forKey:@"drivebeta128btype"];
  if( settings->drive_beta128c_type )
    [defaultValues setObject:@(settings->drive_beta128c_type) forKey:@"drivebeta128ctype"];
  else
    [defaultValues setObject:@"" forKey:@"drivebeta128ctype"];
  if( settings->drive_beta128d_type )
    [defaultValues setObject:@(settings->drive_beta128d_type) forKey:@"drivebeta128dtype"];
  else
    [defaultValues setObject:@"" forKey:@"drivebeta128dtype"];
  if( settings->drive_didaktik80a_type )
    [defaultValues setObject:@(settings->drive_didaktik80a_type) forKey:@"drivedidaktik80atype"];
  else
    [defaultValues setObject:@"" forKey:@"drivedidaktik80atype"];
  if( settings->drive_didaktik80b_type )
    [defaultValues setObject:@(settings->drive_didaktik80b_type) forKey:@"drivedidaktik80btype"];
  else
    [defaultValues setObject:@"" forKey:@"drivedidaktik80btype"];
  if( settings->drive_disciple1_type )
    [defaultValues setObject:@(settings->drive_disciple1_type) forKey:@"drivedisciple1type"];
  else
    [defaultValues setObject:@"" forKey:@"drivedisciple1type"];
  if( settings->drive_disciple2_type )
    [defaultValues setObject:@(settings->drive_disciple2_type) forKey:@"drivedisciple2type"];
  else
    [defaultValues setObject:@"" forKey:@"drivedisciple2type"];
  if( settings->drive_opus1_type )
    [defaultValues setObject:@(settings->drive_opus1_type) forKey:@"driveopus1type"];
  else
    [defaultValues setObject:@"" forKey:@"driveopus1type"];
  if( settings->drive_opus2_type )
    [defaultValues setObject:@(settings->drive_opus2_type) forKey:@"driveopus2type"];
  else
    [defaultValues setObject:@"" forKey:@"driveopus2type"];
  if( settings->drive_plus3a_type )
    [defaultValues setObject:@(settings->drive_plus3a_type) forKey:@"driveplus3atype"];
  else
    [defaultValues setObject:@"" forKey:@"driveplus3atype"];
  if( settings->drive_plus3b_type )
    [defaultValues setObject:@(settings->drive_plus3b_type) forKey:@"driveplus3btype"];
  else
    [defaultValues setObject:@"" forKey:@"driveplus3btype"];
  if( settings->drive_plusd1_type )
    [defaultValues setObject:@(settings->drive_plusd1_type) forKey:@"driveplusd1type"];
  else
    [defaultValues setObject:@"" forKey:@"driveplusd1type"];
  if( settings->drive_plusd2_type )
    [defaultValues setObject:@(settings->drive_plusd2_type) forKey:@"driveplusd2type"];
  else
    [defaultValues setObject:@"" forKey:@"driveplusd2type"];
  value = settings->embed_snapshot ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"embedsnapshot"];
  [defaultValues setObject:@(settings->emulation_speed) forKey:@"speed"];
  value = settings->fastload ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"fastload"];
  [defaultValues setObject:@(settings->fb_mode) forKey:@"fbmode"];
  [defaultValues setObject:@(settings->frame_rate) forKey:@"rate"];
  value = settings->full_screen ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"fullscreen"];
  value = settings->full_screen_panorama ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"fullscreenpanorama"];
  value = settings->fuller ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"fuller"];
  if( settings->if2_file )
    [defaultValues setObject:@(settings->if2_file) forKey:@"if2cart"];
  else
    [defaultValues setObject:@"" forKey:@"if2cart"];
  value = settings->interface1 ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"interface1"];
  value = settings->interface2 ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"interface2"];
  value = settings->issue2 ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"issue2"];
  [defaultValues setObject:@(settings->joy1_number) forKey:@"joy1num"];
  [defaultValues setObject:@(settings->joy1_xaxis) forKey:@"joy1x"];
  [defaultValues setObject:@(settings->joy1_yaxis) forKey:@"joy1y"];
  [defaultValues setObject:@(settings->joy2_number) forKey:@"joy2num"];
  [defaultValues setObject:@(settings->joy2_xaxis) forKey:@"joy2x"];
  [defaultValues setObject:@(settings->joy2_yaxis) forKey:@"joy2y"];
  value = settings->joy_kempston ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"kempston"];
  value = settings->joy_keyboard ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"keyboard"];
  value = settings->joy_prompt ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"joyprompt"];
  if( settings->joystick_1 )
    [defaultValues setObject:@(settings->joystick_1) forKey:@"joystick1"];
  else
    [defaultValues setObject:@"" forKey:@"joystick1"];
  [defaultValues setObject:@(settings->joystick_1_fire_1) forKey:@"joystick1fire1"];
  [defaultValues setObject:@(settings->joystick_1_fire_10) forKey:@"joystick1fire10"];
  [defaultValues setObject:@(settings->joystick_1_fire_11) forKey:@"joystick1fire11"];
  [defaultValues setObject:@(settings->joystick_1_fire_12) forKey:@"joystick1fire12"];
  [defaultValues setObject:@(settings->joystick_1_fire_13) forKey:@"joystick1fire13"];
  [defaultValues setObject:@(settings->joystick_1_fire_14) forKey:@"joystick1fire14"];
  [defaultValues setObject:@(settings->joystick_1_fire_15) forKey:@"joystick1fire15"];
  [defaultValues setObject:@(settings->joystick_1_fire_2) forKey:@"joystick1fire2"];
  [defaultValues setObject:@(settings->joystick_1_fire_3) forKey:@"joystick1fire3"];
  [defaultValues setObject:@(settings->joystick_1_fire_4) forKey:@"joystick1fire4"];
  [defaultValues setObject:@(settings->joystick_1_fire_5) forKey:@"joystick1fire5"];
  [defaultValues setObject:@(settings->joystick_1_fire_6) forKey:@"joystick1fire6"];
  [defaultValues setObject:@(settings->joystick_1_fire_7) forKey:@"joystick1fire7"];
  [defaultValues setObject:@(settings->joystick_1_fire_8) forKey:@"joystick1fire8"];
  [defaultValues setObject:@(settings->joystick_1_fire_9) forKey:@"joystick1fire9"];
  [defaultValues setObject:@(settings->joystick_1_output) forKey:@"joystick1output"];
  if( settings->joystick_2 )
    [defaultValues setObject:@(settings->joystick_2) forKey:@"joystick2"];
  else
    [defaultValues setObject:@"" forKey:@"joystick2"];
  [defaultValues setObject:@(settings->joystick_2_fire_1) forKey:@"joystick2fire1"];
  [defaultValues setObject:@(settings->joystick_2_fire_10) forKey:@"joystick2fire10"];
  [defaultValues setObject:@(settings->joystick_2_fire_11) forKey:@"joystick2fire11"];
  [defaultValues setObject:@(settings->joystick_2_fire_12) forKey:@"joystick2fire12"];
  [defaultValues setObject:@(settings->joystick_2_fire_13) forKey:@"joystick2fire13"];
  [defaultValues setObject:@(settings->joystick_2_fire_14) forKey:@"joystick2fire14"];
  [defaultValues setObject:@(settings->joystick_2_fire_15) forKey:@"joystick2fire15"];
  [defaultValues setObject:@(settings->joystick_2_fire_2) forKey:@"joystick2fire2"];
  [defaultValues setObject:@(settings->joystick_2_fire_3) forKey:@"joystick2fire3"];
  [defaultValues setObject:@(settings->joystick_2_fire_4) forKey:@"joystick2fire4"];
  [defaultValues setObject:@(settings->joystick_2_fire_5) forKey:@"joystick2fire5"];
  [defaultValues setObject:@(settings->joystick_2_fire_6) forKey:@"joystick2fire6"];
  [defaultValues setObject:@(settings->joystick_2_fire_7) forKey:@"joystick2fire7"];
  [defaultValues setObject:@(settings->joystick_2_fire_8) forKey:@"joystick2fire8"];
  [defaultValues setObject:@(settings->joystick_2_fire_9) forKey:@"joystick2fire9"];
  [defaultValues setObject:@(settings->joystick_2_output) forKey:@"joystick2output"];
  [defaultValues setObject:@(settings->joystick_keyboard_down) forKey:@"joystickkeyboarddown"];
  [defaultValues setObject:@(settings->joystick_keyboard_fire) forKey:@"joystickkeyboardfire"];
  [defaultValues setObject:@(settings->joystick_keyboard_left) forKey:@"joystickkeyboardleft"];
  [defaultValues setObject:@(settings->joystick_keyboard_output) forKey:@"joystickkeyboardoutput"];
  [defaultValues setObject:@(settings->joystick_keyboard_right) forKey:@"joystickkeyboardright"];
  [defaultValues setObject:@(settings->joystick_keyboard_up) forKey:@"joystickkeyboardup"];
  value = settings->kempston_mouse ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"kempstonmouse"];
  value = settings->late_timings ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"latetimings"];
  if( settings->mdr_file )
    [defaultValues setObject:@(settings->mdr_file) forKey:@"microdrivefile"];
  else
    [defaultValues setObject:@"" forKey:@"microdrivefile"];
  if( settings->mdr_file2 )
    [defaultValues setObject:@(settings->mdr_file2) forKey:@"microdrive2file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive2file"];
  if( settings->mdr_file3 )
    [defaultValues setObject:@(settings->mdr_file3) forKey:@"microdrive3file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive3file"];
  if( settings->mdr_file4 )
    [defaultValues setObject:@(settings->mdr_file4) forKey:@"microdrive4file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive4file"];
  if( settings->mdr_file5 )
    [defaultValues setObject:@(settings->mdr_file5) forKey:@"microdrive5file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive5file"];
  if( settings->mdr_file6 )
    [defaultValues setObject:@(settings->mdr_file6) forKey:@"microdrive6file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive6file"];
  if( settings->mdr_file7 )
    [defaultValues setObject:@(settings->mdr_file7) forKey:@"microdrive7file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive7file"];
  if( settings->mdr_file8 )
    [defaultValues setObject:@(settings->mdr_file8) forKey:@"microdrive8file"];
  else
    [defaultValues setObject:@"" forKey:@"microdrive8file"];
  [defaultValues setObject:@(settings->mdr_len) forKey:@"mdrlen"];
  value = settings->mdr_random_len ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"mdrrandomlen"];
  value = settings->melodik ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"melodik"];
  value = settings->mouse_swap_buttons ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"mouseswapbuttons"];
  if( settings->movie_compr )
    [defaultValues setObject:@(settings->movie_compr) forKey:@"moviecompr"];
  else
    [defaultValues setObject:@"" forKey:@"moviecompr"];
  if( settings->movie_start )
    [defaultValues setObject:@(settings->movie_start) forKey:@"moviestart"];
  else
    [defaultValues setObject:@"" forKey:@"moviestart"];
  value = settings->movie_stop_after_rzx ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"moviestopafterrzx"];
  value = settings->opus ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"opus"];
  if( settings->opusdisk_file )
    [defaultValues setObject:@(settings->opusdisk_file) forKey:@"opusdisk"];
  else
    [defaultValues setObject:@"" forKey:@"opusdisk"];
  value = settings->pal_tv2x ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"paltv2x"];
  if( settings->playback_file )
    [defaultValues setObject:@(settings->playback_file) forKey:@"playbackfile"];
  else
    [defaultValues setObject:@"" forKey:@"playbackfile"];
  value = settings->plus3_detect_speedlock ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"plus3detectspeedlock"];
  if( settings->plus3disk_file )
    [defaultValues setObject:@(settings->plus3disk_file) forKey:@"plus3disk"];
  else
    [defaultValues setObject:@"" forKey:@"plus3disk"];
  value = settings->plusd ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"plusd"];
  if( settings->plusddisk_file )
    [defaultValues setObject:@(settings->plusddisk_file) forKey:@"plusddisk"];
  else
    [defaultValues setObject:@"" forKey:@"plusddisk"];
  [defaultValues setObject:@(settings->preferences_tab) forKey:@"preferencestab"];
  value = settings->printer ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"printer"];
  if( settings->printer_graphics_filename )
    [defaultValues setObject:@(settings->printer_graphics_filename) forKey:@"graphicsfile"];
  else
    [defaultValues setObject:@"" forKey:@"graphicsfile"];
  if( settings->printer_text_filename )
    [defaultValues setObject:@(settings->printer_text_filename) forKey:@"textfile"];
  else
    [defaultValues setObject:@"" forKey:@"textfile"];
  value = settings->raw_s_net ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"rawsnet"];
  if( settings->cocoa && settings->cocoa->recent_snapshots )
    [defaultValues setObject:settings->cocoa->recent_snapshots forKey:@"recentsnapshots"];
  else
    [defaultValues setObject:[NSArray array] forKey:@"recentsnapshots"];
  if( settings->record_file )
    [defaultValues setObject:@(settings->record_file) forKey:@"recordfile"];
  else
    [defaultValues setObject:@"" forKey:@"recordfile"];
  value = settings->recreated_spectrum ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"recreatedspectrum"];
  if( settings->rom_128_0 )
    [defaultValues setObject:@(settings->rom_128_0) forKey:@"rom1280"];
  else
    [defaultValues setObject:@"" forKey:@"rom1280"];
  if( settings->rom_128_1 )
    [defaultValues setObject:@(settings->rom_128_1) forKey:@"rom1281"];
  else
    [defaultValues setObject:@"" forKey:@"rom1281"];
  if( settings->rom_16_0 )
    [defaultValues setObject:@(settings->rom_16_0) forKey:@"rom160"];
  else
    [defaultValues setObject:@"" forKey:@"rom160"];
  if( settings->rom_2048_0 )
    [defaultValues setObject:@(settings->rom_2048_0) forKey:@"rom20480"];
  else
    [defaultValues setObject:@"" forKey:@"rom20480"];
  if( settings->rom_2068_0 )
    [defaultValues setObject:@(settings->rom_2068_0) forKey:@"rom20680"];
  else
    [defaultValues setObject:@"" forKey:@"rom20680"];
  if( settings->rom_2068_1 )
    [defaultValues setObject:@(settings->rom_2068_1) forKey:@"rom20681"];
  else
    [defaultValues setObject:@"" forKey:@"rom20681"];
  if( settings->rom_48_0 )
    [defaultValues setObject:@(settings->rom_48_0) forKey:@"rom480"];
  else
    [defaultValues setObject:@"" forKey:@"rom480"];
  if( settings->rom_beta128 )
    [defaultValues setObject:@(settings->rom_beta128) forKey:@"rombeta128"];
  else
    [defaultValues setObject:@"" forKey:@"rombeta128"];
  if( settings->rom_didaktik80 )
    [defaultValues setObject:@(settings->rom_didaktik80) forKey:@"romdidaktik80"];
  else
    [defaultValues setObject:@"" forKey:@"romdidaktik80"];
  if( settings->rom_disciple )
    [defaultValues setObject:@(settings->rom_disciple) forKey:@"romdisciple"];
  else
    [defaultValues setObject:@"" forKey:@"romdisciple"];
  if( settings->rom_interface1 )
    [defaultValues setObject:@(settings->rom_interface1) forKey:@"rominterfacei"];
  else
    [defaultValues setObject:@"" forKey:@"rominterfacei"];
  if( settings->rom_opus )
    [defaultValues setObject:@(settings->rom_opus) forKey:@"romopus"];
  else
    [defaultValues setObject:@"" forKey:@"romopus"];
  if( settings->rom_pentagon1024_0 )
    [defaultValues setObject:@(settings->rom_pentagon1024_0) forKey:@"rompentagon10240"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon10240"];
  if( settings->rom_pentagon1024_1 )
    [defaultValues setObject:@(settings->rom_pentagon1024_1) forKey:@"rompentagon10241"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon10241"];
  if( settings->rom_pentagon1024_2 )
    [defaultValues setObject:@(settings->rom_pentagon1024_2) forKey:@"rompentagon10242"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon10242"];
  if( settings->rom_pentagon1024_3 )
    [defaultValues setObject:@(settings->rom_pentagon1024_3) forKey:@"rompentagon10243"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon10243"];
  if( settings->rom_pentagon512_0 )
    [defaultValues setObject:@(settings->rom_pentagon512_0) forKey:@"rompentagon5120"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon5120"];
  if( settings->rom_pentagon512_1 )
    [defaultValues setObject:@(settings->rom_pentagon512_1) forKey:@"rompentagon5121"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon5121"];
  if( settings->rom_pentagon512_2 )
    [defaultValues setObject:@(settings->rom_pentagon512_2) forKey:@"rompentagon5122"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon5122"];
  if( settings->rom_pentagon512_3 )
    [defaultValues setObject:@(settings->rom_pentagon512_3) forKey:@"rompentagon5123"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon5123"];
  if( settings->rom_pentagon_0 )
    [defaultValues setObject:@(settings->rom_pentagon_0) forKey:@"rompentagon0"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon0"];
  if( settings->rom_pentagon_1 )
    [defaultValues setObject:@(settings->rom_pentagon_1) forKey:@"rompentagon1"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon1"];
  if( settings->rom_pentagon_2 )
    [defaultValues setObject:@(settings->rom_pentagon_2) forKey:@"rompentagon2"];
  else
    [defaultValues setObject:@"" forKey:@"rompentagon2"];
  if( settings->rom_plus2_0 )
    [defaultValues setObject:@(settings->rom_plus2_0) forKey:@"romplus20"];
  else
    [defaultValues setObject:@"" forKey:@"romplus20"];
  if( settings->rom_plus2_1 )
    [defaultValues setObject:@(settings->rom_plus2_1) forKey:@"romplus21"];
  else
    [defaultValues setObject:@"" forKey:@"romplus21"];
  if( settings->rom_plus2a_0 )
    [defaultValues setObject:@(settings->rom_plus2a_0) forKey:@"romplus2a0"];
  else
    [defaultValues setObject:@"" forKey:@"romplus2a0"];
  if( settings->rom_plus2a_1 )
    [defaultValues setObject:@(settings->rom_plus2a_1) forKey:@"romplus2a1"];
  else
    [defaultValues setObject:@"" forKey:@"romplus2a1"];
  if( settings->rom_plus2a_2 )
    [defaultValues setObject:@(settings->rom_plus2a_2) forKey:@"romplus2a2"];
  else
    [defaultValues setObject:@"" forKey:@"romplus2a2"];
  if( settings->rom_plus2a_3 )
    [defaultValues setObject:@(settings->rom_plus2a_3) forKey:@"romplus2a3"];
  else
    [defaultValues setObject:@"" forKey:@"romplus2a3"];
  if( settings->rom_plus3_0 )
    [defaultValues setObject:@(settings->rom_plus3_0) forKey:@"romplus30"];
  else
    [defaultValues setObject:@"" forKey:@"romplus30"];
  if( settings->rom_plus3_1 )
    [defaultValues setObject:@(settings->rom_plus3_1) forKey:@"romplus31"];
  else
    [defaultValues setObject:@"" forKey:@"romplus31"];
  if( settings->rom_plus3_2 )
    [defaultValues setObject:@(settings->rom_plus3_2) forKey:@"romplus32"];
  else
    [defaultValues setObject:@"" forKey:@"romplus32"];
  if( settings->rom_plus3_3 )
    [defaultValues setObject:@(settings->rom_plus3_3) forKey:@"romplus33"];
  else
    [defaultValues setObject:@"" forKey:@"romplus33"];
  if( settings->rom_plus3e_0 )
    [defaultValues setObject:@(settings->rom_plus3e_0) forKey:@"romplus3e0"];
  else
    [defaultValues setObject:@"" forKey:@"romplus3e0"];
  if( settings->rom_plus3e_1 )
    [defaultValues setObject:@(settings->rom_plus3e_1) forKey:@"romplus3e1"];
  else
    [defaultValues setObject:@"" forKey:@"romplus3e1"];
  if( settings->rom_plus3e_2 )
    [defaultValues setObject:@(settings->rom_plus3e_2) forKey:@"romplus3e2"];
  else
    [defaultValues setObject:@"" forKey:@"romplus3e2"];
  if( settings->rom_plus3e_3 )
    [defaultValues setObject:@(settings->rom_plus3e_3) forKey:@"romplus3e3"];
  else
    [defaultValues setObject:@"" forKey:@"romplus3e3"];
  if( settings->rom_plusd )
    [defaultValues setObject:@(settings->rom_plusd) forKey:@"romplusd"];
  else
    [defaultValues setObject:@"" forKey:@"romplusd"];
  if( settings->rom_scorpion_0 )
    [defaultValues setObject:@(settings->rom_scorpion_0) forKey:@"romscorpion0"];
  else
    [defaultValues setObject:@"" forKey:@"romscorpion0"];
  if( settings->rom_scorpion_1 )
    [defaultValues setObject:@(settings->rom_scorpion_1) forKey:@"romscorpion1"];
  else
    [defaultValues setObject:@"" forKey:@"romscorpion1"];
  if( settings->rom_scorpion_2 )
    [defaultValues setObject:@(settings->rom_scorpion_2) forKey:@"romscorpion2"];
  else
    [defaultValues setObject:@"" forKey:@"romscorpion2"];
  if( settings->rom_scorpion_3 )
    [defaultValues setObject:@(settings->rom_scorpion_3) forKey:@"romscorpion3"];
  else
    [defaultValues setObject:@"" forKey:@"romscorpion3"];
  if( settings->rom_se_0 )
    [defaultValues setObject:@(settings->rom_se_0) forKey:@"romse0"];
  else
    [defaultValues setObject:@"" forKey:@"romse0"];
  if( settings->rom_se_1 )
    [defaultValues setObject:@(settings->rom_se_1) forKey:@"romse1"];
  else
    [defaultValues setObject:@"" forKey:@"romse1"];
  if( settings->rom_speccyboot )
    [defaultValues setObject:@(settings->rom_speccyboot) forKey:@"romspeccyboot"];
  else
    [defaultValues setObject:@"" forKey:@"romspeccyboot"];
  if( settings->rom_ts2068_0 )
    [defaultValues setObject:@(settings->rom_ts2068_0) forKey:@"romts20680"];
  else
    [defaultValues setObject:@"" forKey:@"romts20680"];
  if( settings->rom_ts2068_1 )
    [defaultValues setObject:@(settings->rom_ts2068_1) forKey:@"romts20681"];
  else
    [defaultValues setObject:@"" forKey:@"romts20681"];
  if( settings->rom_usource )
    [defaultValues setObject:@(settings->rom_usource) forKey:@"romusource"];
  else
    [defaultValues setObject:@"" forKey:@"romusource"];
  value = settings->rs232_handshake ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"rs232handshake"];
  if( settings->rs232_rx )
    [defaultValues setObject:@(settings->rs232_rx) forKey:@"rs232rx"];
  else
    [defaultValues setObject:@"" forKey:@"rs232rx"];
  if( settings->rs232_tx )
    [defaultValues setObject:@(settings->rs232_tx) forKey:@"rs232tx"];
  else
    [defaultValues setObject:@"" forKey:@"rs232tx"];
  value = settings->rzx_autosaves ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"rzxautosaves"];
  value = settings->rzx_compression ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"compressrzx"];
  value = settings->simpleide_active ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"simpleide"];
  if( settings->simpleide_master_file )
    [defaultValues setObject:@(settings->simpleide_master_file) forKey:@"simpleidemasterfile"];
  else
    [defaultValues setObject:@"" forKey:@"simpleidemasterfile"];
  if( settings->simpleide_slave_file )
    [defaultValues setObject:@(settings->simpleide_slave_file) forKey:@"simpleideslavefile"];
  else
    [defaultValues setObject:@"" forKey:@"simpleideslavefile"];
  value = settings->slt_traps ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"slttraps"];
  if( settings->snapshot )
    [defaultValues setObject:@(settings->snapshot) forKey:@"snapshot"];
  else
    [defaultValues setObject:@"" forKey:@"snapshot"];
  if( settings->snet )
    [defaultValues setObject:@(settings->snet) forKey:@"snet"];
  else
    [defaultValues setObject:@"" forKey:@"snet"];
  value = settings->sound ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"sound"];
  if( settings->sound_device )
    [defaultValues setObject:@(settings->sound_device) forKey:@"sounddevice"];
  else
    [defaultValues setObject:@"" forKey:@"sounddevice"];
  value = settings->sound_force_8bit ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"soundforce8bit"];
  [defaultValues setObject:@(settings->sound_freq) forKey:@"soundfreq"];
  value = settings->sound_load ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"loading-sound"];
  if( settings->speaker_type )
    [defaultValues setObject:@(settings->speaker_type) forKey:@"speakertype"];
  else
    [defaultValues setObject:@"" forKey:@"speakertype"];
  value = settings->speccyboot ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"speccyboot"];
  if( settings->speccyboot_tap )
    [defaultValues setObject:@(settings->speccyboot_tap) forKey:@"speccyboottap"];
  else
    [defaultValues setObject:@"" forKey:@"speccyboottap"];
  value = settings->specdrum ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"specdrum"];
  value = settings->spectranet ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"spectranet"];
  value = settings->spectranet_disable ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"spectranetdisable"];
  if( settings->start_machine )
    [defaultValues setObject:@(settings->start_machine) forKey:@"machine"];
  else
    [defaultValues setObject:@"" forKey:@"machine"];
  if( settings->start_scaler_mode )
    [defaultValues setObject:@(settings->start_scaler_mode) forKey:@"graphicsfilter"];
  else
    [defaultValues setObject:@"" forKey:@"graphicsfilter"];
  value = settings->statusbar ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"statusbar"];
  if( settings->stereo_ay )
    [defaultValues setObject:@(settings->stereo_ay) forKey:@"separation"];
  else
    [defaultValues setObject:@"" forKey:@"separation"];
  value = settings->strict_aspect_hint ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"strictaspecthint"];
  if( settings->svga_modes )
    [defaultValues setObject:@(settings->svga_modes) forKey:@"svgamodes"];
  else
    [defaultValues setObject:@"" forKey:@"svgamodes"];
  if( settings->tape_file )
    [defaultValues setObject:@(settings->tape_file) forKey:@"tapefile"];
  else
    [defaultValues setObject:@"" forKey:@"tapefile"];
  value = settings->tape_traps ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"tapetraps"];
  value = settings->unittests ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"unittests"];
  value = settings->usource ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"usource"];
  [defaultValues setObject:@(settings->volume_ay) forKey:@"volumeay"];
  [defaultValues setObject:@(settings->volume_beeper) forKey:@"volumebeeper"];
  [defaultValues setObject:@(settings->volume_specdrum) forKey:@"volumespecdrum"];
  value = settings->writable_roms ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"writableroms"];
  value = settings->z80_is_cmos ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"z80iscmos"];
  value = settings->zxatasp_active ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxatasp"];
  if( settings->zxatasp_master_file )
    [defaultValues setObject:@(settings->zxatasp_master_file) forKey:@"zxataspmasterfile"];
  else
    [defaultValues setObject:@"" forKey:@"zxataspmasterfile"];
  if( settings->zxatasp_slave_file )
    [defaultValues setObject:@(settings->zxatasp_slave_file) forKey:@"zxataspslavefile"];
  else
    [defaultValues setObject:@"" forKey:@"zxataspslavefile"];
  value = settings->zxatasp_upload ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxataspupload"];
  value = settings->zxatasp_wp ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxataspwriteprotect"];
  value = settings->zxcf_active ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxcf"];
  if( settings->zxcf_pri_file )
    [defaultValues setObject:@(settings->zxcf_pri_file) forKey:@"zxcfcffile"];
  else
    [defaultValues setObject:@"" forKey:@"zxcfcffile"];
  value = settings->zxcf_upload ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxcfupload"];
  value = settings->zxprinter ? YES : NO;
  [defaultValues setObject:@(value) forKey:@"zxprinter"];

  [[NSUserDefaults standardUserDefaults] registerDefaults:defaultValues];

  [[NSUserDefaultsController sharedUserDefaultsController] setInitialValues:defaultValues];
}

/* Read options from the config file */

int
read_config_file( settings_info *settings )
{
  NSUserDefaults *defaults;
  
  defaults = [NSUserDefaults standardUserDefaults];

  settings->accelerate_loader = [defaults boolForKey:@"accelerateloader"] ? 1 : 0;
  settings->aspect_hint = [defaults boolForKey:@"aspecthint"] ? 1 : 0;
  settings->auto_load = [defaults boolForKey:@"autoload"] ? 1 : 0;
  settings->autosave_settings = [defaults boolForKey:@"autosavesettings"] ? 1 : 0;
  settings->beta128 = [defaults boolForKey:@"beta128"] ? 1 : 0;
  settings->beta128_48boot = [defaults boolForKey:@"beta12848boot"] ? 1 : 0;
  settings->bilinear_filter = [defaults boolForKey:@"bilinear"] ? 1 : 0;
  settings->bw_tv = [defaults boolForKey:@"bwtv"] ? 1 : 0;
  settings->competition_code = [defaults integerForKey:@"competitioncode"];
  settings->competition_mode = [defaults boolForKey:@"competitionmode"] ? 1 : 0;
  settings->confirm_actions = [defaults boolForKey:@"confirmactions"] ? 1 : 0;
  if( [[defaults stringForKey:@"debuggercommand"] isEqualToString:@""] == YES ) {
    free( settings->debugger_command );
    settings->debugger_command = NULL;
  } else
    settings_set_string( &settings->debugger_command, [[defaults stringForKey:@"debuggercommand"] UTF8String] );
  settings->detect_loader = [defaults boolForKey:@"detectloader"] ? 1 : 0;
  settings->didaktik80 = [defaults boolForKey:@"didaktik80"] ? 1 : 0;
  if( [[defaults stringForKey:@"didaktik80disk"] isEqualToString:@""] == YES ) {
    free( settings->didaktik80disk_file );
    settings->didaktik80disk_file = NULL;
  } else
    settings_set_string( &settings->didaktik80disk_file, [[defaults stringForKey:@"didaktik80disk"] UTF8String] );
  settings->disciple = [defaults boolForKey:@"disciple"] ? 1 : 0;
  if( [[defaults stringForKey:@"discipledisk"] isEqualToString:@""] == YES ) {
    free( settings->discipledisk_file );
    settings->discipledisk_file = NULL;
  } else
    settings_set_string( &settings->discipledisk_file, [[defaults stringForKey:@"discipledisk"] UTF8String] );
  settings->disk_ask_merge = [defaults boolForKey:@"diskaskmerge"] ? 1 : 0;
  if( [[defaults stringForKey:@"disktrymerge"] isEqualToString:@""] == YES ) {
    free( settings->disk_try_merge );
    settings->disk_try_merge = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_disk_try_merge(
                         [[defaults stringForKey:@"disktrymerge"] UTF8String] );
    settings_set_string( &settings->disk_try_merge, value );
  }
  settings->divide_enabled = [defaults boolForKey:@"divide"] ? 1 : 0;
  if( [[defaults stringForKey:@"dividemasterfile"] isEqualToString:@""] == YES ) {
    free( settings->divide_master_file );
    settings->divide_master_file = NULL;
  } else
    settings_set_string( &settings->divide_master_file, [[defaults stringForKey:@"dividemasterfile"] UTF8String] );
  if( [[defaults stringForKey:@"divideslavefile"] isEqualToString:@""] == YES ) {
    free( settings->divide_slave_file );
    settings->divide_slave_file = NULL;
  } else
    settings_set_string( &settings->divide_slave_file, [[defaults stringForKey:@"divideslavefile"] UTF8String] );
  settings->divide_wp = [defaults boolForKey:@"dividewriteprotect"] ? 1 : 0;
  settings->doublescan_mode = [defaults integerForKey:@"doublescanmode"];
  settings->drive_40_max_track = [defaults integerForKey:@"drive40maxtrack"];
  settings->drive_80_max_track = [defaults integerForKey:@"drive80maxtrack"];
  if( [[defaults stringForKey:@"drivebeta128atype"] isEqualToString:@""] == YES ) {
    free( settings->drive_beta128a_type );
    settings->drive_beta128a_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_beta128a_type(
                         [[defaults stringForKey:@"drivebeta128atype"] UTF8String] );
    settings_set_string( &settings->drive_beta128a_type, value );
  }
  if( [[defaults stringForKey:@"drivebeta128btype"] isEqualToString:@""] == YES ) {
    free( settings->drive_beta128b_type );
    settings->drive_beta128b_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_beta128b_type(
                         [[defaults stringForKey:@"drivebeta128btype"] UTF8String] );
    settings_set_string( &settings->drive_beta128b_type, value );
  }
  if( [[defaults stringForKey:@"drivebeta128ctype"] isEqualToString:@""] == YES ) {
    free( settings->drive_beta128c_type );
    settings->drive_beta128c_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_beta128c_type(
                         [[defaults stringForKey:@"drivebeta128ctype"] UTF8String] );
    settings_set_string( &settings->drive_beta128c_type, value );
  }
  if( [[defaults stringForKey:@"drivebeta128dtype"] isEqualToString:@""] == YES ) {
    free( settings->drive_beta128d_type );
    settings->drive_beta128d_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_beta128d_type(
                         [[defaults stringForKey:@"drivebeta128dtype"] UTF8String] );
    settings_set_string( &settings->drive_beta128d_type, value );
  }
  if( [[defaults stringForKey:@"drivedidaktik80atype"] isEqualToString:@""] == YES ) {
    free( settings->drive_didaktik80a_type );
    settings->drive_didaktik80a_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_didaktik80a_type(
                         [[defaults stringForKey:@"drivedidaktik80atype"] UTF8String] );
    settings_set_string( &settings->drive_didaktik80a_type, value );
  }
  if( [[defaults stringForKey:@"drivedidaktik80btype"] isEqualToString:@""] == YES ) {
    free( settings->drive_didaktik80b_type );
    settings->drive_didaktik80b_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_didaktik80b_type(
                         [[defaults stringForKey:@"drivedidaktik80btype"] UTF8String] );
    settings_set_string( &settings->drive_didaktik80b_type, value );
  }
  if( [[defaults stringForKey:@"drivedisciple1type"] isEqualToString:@""] == YES ) {
    free( settings->drive_disciple1_type );
    settings->drive_disciple1_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_disciple1_type(
                         [[defaults stringForKey:@"drivedisciple1type"] UTF8String] );
    settings_set_string( &settings->drive_disciple1_type, value );
  }
  if( [[defaults stringForKey:@"drivedisciple2type"] isEqualToString:@""] == YES ) {
    free( settings->drive_disciple2_type );
    settings->drive_disciple2_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_disciple2_type(
                         [[defaults stringForKey:@"drivedisciple2type"] UTF8String] );
    settings_set_string( &settings->drive_disciple2_type, value );
  }
  if( [[defaults stringForKey:@"driveopus1type"] isEqualToString:@""] == YES ) {
    free( settings->drive_opus1_type );
    settings->drive_opus1_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_opus1_type(
                         [[defaults stringForKey:@"driveopus1type"] UTF8String] );
    settings_set_string( &settings->drive_opus1_type, value );
  }
  if( [[defaults stringForKey:@"driveopus2type"] isEqualToString:@""] == YES ) {
    free( settings->drive_opus2_type );
    settings->drive_opus2_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_opus2_type(
                         [[defaults stringForKey:@"driveopus2type"] UTF8String] );
    settings_set_string( &settings->drive_opus2_type, value );
  }
  if( [[defaults stringForKey:@"driveplus3atype"] isEqualToString:@""] == YES ) {
    free( settings->drive_plus3a_type );
    settings->drive_plus3a_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_plus3a_type(
                         [[defaults stringForKey:@"driveplus3atype"] UTF8String] );
    settings_set_string( &settings->drive_plus3a_type, value );
  }
  if( [[defaults stringForKey:@"driveplus3btype"] isEqualToString:@""] == YES ) {
    free( settings->drive_plus3b_type );
    settings->drive_plus3b_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_plus3b_type(
                         [[defaults stringForKey:@"driveplus3btype"] UTF8String] );
    settings_set_string( &settings->drive_plus3b_type, value );
  }
  if( [[defaults stringForKey:@"driveplusd1type"] isEqualToString:@""] == YES ) {
    free( settings->drive_plusd1_type );
    settings->drive_plusd1_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_plusd1_type(
                         [[defaults stringForKey:@"driveplusd1type"] UTF8String] );
    settings_set_string( &settings->drive_plusd1_type, value );
  }
  if( [[defaults stringForKey:@"driveplusd2type"] isEqualToString:@""] == YES ) {
    free( settings->drive_plusd2_type );
    settings->drive_plusd2_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_diskoptions_drive_plusd2_type(
                         [[defaults stringForKey:@"driveplusd2type"] UTF8String] );
    settings_set_string( &settings->drive_plusd2_type, value );
  }
  settings->embed_snapshot = [defaults boolForKey:@"embedsnapshot"] ? 1 : 0;
  settings->emulation_speed = [defaults integerForKey:@"speed"];
  settings->fastload = [defaults boolForKey:@"fastload"] ? 1 : 0;
  settings->fb_mode = [defaults integerForKey:@"fbmode"];
  settings->frame_rate = [defaults integerForKey:@"rate"];
  settings->full_screen = [defaults boolForKey:@"fullscreen"] ? 1 : 0;
  settings->full_screen_panorama = [defaults boolForKey:@"fullscreenpanorama"] ? 1 : 0;
  settings->fuller = [defaults boolForKey:@"fuller"] ? 1 : 0;
  settings->interface1 = [defaults boolForKey:@"interface1"] ? 1 : 0;
  settings->interface2 = [defaults boolForKey:@"interface2"] ? 1 : 0;
  settings->issue2 = [defaults boolForKey:@"issue2"] ? 1 : 0;
  settings->joy1_number = [defaults integerForKey:@"joy1num"];
  settings->joy1_xaxis = [defaults integerForKey:@"joy1x"];
  settings->joy1_yaxis = [defaults integerForKey:@"joy1y"];
  settings->joy2_number = [defaults integerForKey:@"joy2num"];
  settings->joy2_xaxis = [defaults integerForKey:@"joy2x"];
  settings->joy2_yaxis = [defaults integerForKey:@"joy2y"];
  settings->joy_kempston = [defaults boolForKey:@"kempston"] ? 1 : 0;
  settings->joy_keyboard = [defaults boolForKey:@"keyboard"] ? 1 : 0;
  settings->joy_prompt = [defaults boolForKey:@"joyprompt"] ? 1 : 0;
  if( [[defaults stringForKey:@"joystick1"] isEqualToString:@""] == YES ) {
    free( settings->joystick_1 );
    settings->joystick_1 = NULL;
  } else
    settings_set_string( &settings->joystick_1, [[defaults stringForKey:@"joystick1"] UTF8String] );
  settings->joystick_1_fire_1 = [defaults integerForKey:@"joystick1fire1"];
  settings->joystick_1_fire_10 = [defaults integerForKey:@"joystick1fire10"];
  settings->joystick_1_fire_11 = [defaults integerForKey:@"joystick1fire11"];
  settings->joystick_1_fire_12 = [defaults integerForKey:@"joystick1fire12"];
  settings->joystick_1_fire_13 = [defaults integerForKey:@"joystick1fire13"];
  settings->joystick_1_fire_14 = [defaults integerForKey:@"joystick1fire14"];
  settings->joystick_1_fire_15 = [defaults integerForKey:@"joystick1fire15"];
  settings->joystick_1_fire_2 = [defaults integerForKey:@"joystick1fire2"];
  settings->joystick_1_fire_3 = [defaults integerForKey:@"joystick1fire3"];
  settings->joystick_1_fire_4 = [defaults integerForKey:@"joystick1fire4"];
  settings->joystick_1_fire_5 = [defaults integerForKey:@"joystick1fire5"];
  settings->joystick_1_fire_6 = [defaults integerForKey:@"joystick1fire6"];
  settings->joystick_1_fire_7 = [defaults integerForKey:@"joystick1fire7"];
  settings->joystick_1_fire_8 = [defaults integerForKey:@"joystick1fire8"];
  settings->joystick_1_fire_9 = [defaults integerForKey:@"joystick1fire9"];
  settings->joystick_1_output = [defaults integerForKey:@"joystick1output"];
  if( [[defaults stringForKey:@"joystick2"] isEqualToString:@""] == YES ) {
    free( settings->joystick_2 );
    settings->joystick_2 = NULL;
  } else
    settings_set_string( &settings->joystick_2, [[defaults stringForKey:@"joystick2"] UTF8String] );
  settings->joystick_2_fire_1 = [defaults integerForKey:@"joystick2fire1"];
  settings->joystick_2_fire_10 = [defaults integerForKey:@"joystick2fire10"];
  settings->joystick_2_fire_11 = [defaults integerForKey:@"joystick2fire11"];
  settings->joystick_2_fire_12 = [defaults integerForKey:@"joystick2fire12"];
  settings->joystick_2_fire_13 = [defaults integerForKey:@"joystick2fire13"];
  settings->joystick_2_fire_14 = [defaults integerForKey:@"joystick2fire14"];
  settings->joystick_2_fire_15 = [defaults integerForKey:@"joystick2fire15"];
  settings->joystick_2_fire_2 = [defaults integerForKey:@"joystick2fire2"];
  settings->joystick_2_fire_3 = [defaults integerForKey:@"joystick2fire3"];
  settings->joystick_2_fire_4 = [defaults integerForKey:@"joystick2fire4"];
  settings->joystick_2_fire_5 = [defaults integerForKey:@"joystick2fire5"];
  settings->joystick_2_fire_6 = [defaults integerForKey:@"joystick2fire6"];
  settings->joystick_2_fire_7 = [defaults integerForKey:@"joystick2fire7"];
  settings->joystick_2_fire_8 = [defaults integerForKey:@"joystick2fire8"];
  settings->joystick_2_fire_9 = [defaults integerForKey:@"joystick2fire9"];
  settings->joystick_2_output = [defaults integerForKey:@"joystick2output"];
  settings->joystick_keyboard_down = [defaults integerForKey:@"joystickkeyboarddown"];
  settings->joystick_keyboard_fire = [defaults integerForKey:@"joystickkeyboardfire"];
  settings->joystick_keyboard_left = [defaults integerForKey:@"joystickkeyboardleft"];
  settings->joystick_keyboard_output = [defaults integerForKey:@"joystickkeyboardoutput"];
  settings->joystick_keyboard_right = [defaults integerForKey:@"joystickkeyboardright"];
  settings->joystick_keyboard_up = [defaults integerForKey:@"joystickkeyboardup"];
  settings->kempston_mouse = [defaults boolForKey:@"kempstonmouse"] ? 1 : 0;
  settings->late_timings = [defaults boolForKey:@"latetimings"] ? 1 : 0;
  if( [[defaults stringForKey:@"microdrivefile"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file );
    settings->mdr_file = NULL;
  } else
    settings_set_string( &settings->mdr_file, [[defaults stringForKey:@"microdrivefile"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive2file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file2 );
    settings->mdr_file2 = NULL;
  } else
    settings_set_string( &settings->mdr_file2, [[defaults stringForKey:@"microdrive2file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive3file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file3 );
    settings->mdr_file3 = NULL;
  } else
    settings_set_string( &settings->mdr_file3, [[defaults stringForKey:@"microdrive3file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive4file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file4 );
    settings->mdr_file4 = NULL;
  } else
    settings_set_string( &settings->mdr_file4, [[defaults stringForKey:@"microdrive4file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive5file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file5 );
    settings->mdr_file5 = NULL;
  } else
    settings_set_string( &settings->mdr_file5, [[defaults stringForKey:@"microdrive5file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive6file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file6 );
    settings->mdr_file6 = NULL;
  } else
    settings_set_string( &settings->mdr_file6, [[defaults stringForKey:@"microdrive6file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive7file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file7 );
    settings->mdr_file7 = NULL;
  } else
    settings_set_string( &settings->mdr_file7, [[defaults stringForKey:@"microdrive7file"] UTF8String] );
  if( [[defaults stringForKey:@"microdrive8file"] isEqualToString:@""] == YES ) {
    free( settings->mdr_file8 );
    settings->mdr_file8 = NULL;
  } else
    settings_set_string( &settings->mdr_file8, [[defaults stringForKey:@"microdrive8file"] UTF8String] );
  settings->mdr_len = [defaults integerForKey:@"mdrlen"];
  settings->mdr_random_len = [defaults boolForKey:@"mdrrandomlen"] ? 1 : 0;
  settings->melodik = [defaults boolForKey:@"melodik"] ? 1 : 0;
  settings->mouse_swap_buttons = [defaults boolForKey:@"mouseswapbuttons"] ? 1 : 0;
  if( [[defaults stringForKey:@"moviecompr"] isEqualToString:@""] == YES ) {
    free( settings->movie_compr );
    settings->movie_compr = NULL;
  } else
    settings_set_string( &settings->movie_compr, [[defaults stringForKey:@"moviecompr"] UTF8String] );
  if( [[defaults stringForKey:@"moviestart"] isEqualToString:@""] == YES ) {
    free( settings->movie_start );
    settings->movie_start = NULL;
  } else
    settings_set_string( &settings->movie_start, [[defaults stringForKey:@"moviestart"] UTF8String] );
  settings->movie_stop_after_rzx = [defaults boolForKey:@"moviestopafterrzx"] ? 1 : 0;
  settings->opus = [defaults boolForKey:@"opus"] ? 1 : 0;
  if( [[defaults stringForKey:@"opusdisk"] isEqualToString:@""] == YES ) {
    free( settings->opusdisk_file );
    settings->opusdisk_file = NULL;
  } else
    settings_set_string( &settings->opusdisk_file, [[defaults stringForKey:@"opusdisk"] UTF8String] );
  settings->pal_tv2x = [defaults boolForKey:@"paltv2x"] ? 1 : 0;
  settings->plus3_detect_speedlock = [defaults boolForKey:@"plus3detectspeedlock"] ? 1 : 0;
  settings->plusd = [defaults boolForKey:@"plusd"] ? 1 : 0;
  if( [[defaults stringForKey:@"plusddisk"] isEqualToString:@""] == YES ) {
    free( settings->plusddisk_file );
    settings->plusddisk_file = NULL;
  } else
    settings_set_string( &settings->plusddisk_file, [[defaults stringForKey:@"plusddisk"] UTF8String] );
  settings->preferences_tab = [defaults integerForKey:@"preferencestab"];
  settings->printer = [defaults boolForKey:@"printer"] ? 1 : 0;
  if( [[defaults stringForKey:@"graphicsfile"] isEqualToString:@""] == YES ) {
    free( settings->printer_graphics_filename );
    settings->printer_graphics_filename = NULL;
  } else
    settings_set_string( &settings->printer_graphics_filename, [[defaults stringForKey:@"graphicsfile"] UTF8String] );
  if( [[defaults stringForKey:@"textfile"] isEqualToString:@""] == YES ) {
    free( settings->printer_text_filename );
    settings->printer_text_filename = NULL;
  } else
    settings_set_string( &settings->printer_text_filename, [[defaults stringForKey:@"textfile"] UTF8String] );
  settings->raw_s_net = [defaults boolForKey:@"rawsnet"] ? 1 : 0;
  if( [defaults stringArrayForKey:@"recentsnapshots"] != nil ) {
    NSEnumerator *enumerator = [[defaults stringArrayForKey:@"recentsnapshots"] reverseObjectEnumerator];
    id recentFile;
            
    while ( (recentFile = [enumerator nextObject]) ) {
      [[FuseController singleton] performSelectorOnMainThread:@selector(addRecentSnapshotWithString:)
                                  withObject:recentFile waitUntilDone:NO];
    }
  }
  settings->recreated_spectrum = [defaults boolForKey:@"recreatedspectrum"] ? 1 : 0;
  if( [[defaults stringForKey:@"rom1280"] isEqualToString:@""] == YES ) {
    free( settings->rom_128_0 );
    settings->rom_128_0 = NULL;
  } else
    settings_set_string( &settings->rom_128_0, [[defaults stringForKey:@"rom1280"] UTF8String] );
  if( [[defaults stringForKey:@"rom1281"] isEqualToString:@""] == YES ) {
    free( settings->rom_128_1 );
    settings->rom_128_1 = NULL;
  } else
    settings_set_string( &settings->rom_128_1, [[defaults stringForKey:@"rom1281"] UTF8String] );
  if( [[defaults stringForKey:@"rom160"] isEqualToString:@""] == YES ) {
    free( settings->rom_16_0 );
    settings->rom_16_0 = NULL;
  } else
    settings_set_string( &settings->rom_16_0, [[defaults stringForKey:@"rom160"] UTF8String] );
  if( [[defaults stringForKey:@"rom20480"] isEqualToString:@""] == YES ) {
    free( settings->rom_2048_0 );
    settings->rom_2048_0 = NULL;
  } else
    settings_set_string( &settings->rom_2048_0, [[defaults stringForKey:@"rom20480"] UTF8String] );
  if( [[defaults stringForKey:@"rom20680"] isEqualToString:@""] == YES ) {
    free( settings->rom_2068_0 );
    settings->rom_2068_0 = NULL;
  } else
    settings_set_string( &settings->rom_2068_0, [[defaults stringForKey:@"rom20680"] UTF8String] );
  if( [[defaults stringForKey:@"rom20681"] isEqualToString:@""] == YES ) {
    free( settings->rom_2068_1 );
    settings->rom_2068_1 = NULL;
  } else
    settings_set_string( &settings->rom_2068_1, [[defaults stringForKey:@"rom20681"] UTF8String] );
  if( [[defaults stringForKey:@"rom480"] isEqualToString:@""] == YES ) {
    free( settings->rom_48_0 );
    settings->rom_48_0 = NULL;
  } else
    settings_set_string( &settings->rom_48_0, [[defaults stringForKey:@"rom480"] UTF8String] );
  if( [[defaults stringForKey:@"rombeta128"] isEqualToString:@""] == YES ) {
    free( settings->rom_beta128 );
    settings->rom_beta128 = NULL;
  } else
    settings_set_string( &settings->rom_beta128, [[defaults stringForKey:@"rombeta128"] UTF8String] );
  if( [[defaults stringForKey:@"romdidaktik80"] isEqualToString:@""] == YES ) {
    free( settings->rom_didaktik80 );
    settings->rom_didaktik80 = NULL;
  } else
    settings_set_string( &settings->rom_didaktik80, [[defaults stringForKey:@"romdidaktik80"] UTF8String] );
  if( [[defaults stringForKey:@"romdisciple"] isEqualToString:@""] == YES ) {
    free( settings->rom_disciple );
    settings->rom_disciple = NULL;
  } else
    settings_set_string( &settings->rom_disciple, [[defaults stringForKey:@"romdisciple"] UTF8String] );
  if( [[defaults stringForKey:@"rominterfacei"] isEqualToString:@""] == YES ) {
    free( settings->rom_interface1 );
    settings->rom_interface1 = NULL;
  } else
    settings_set_string( &settings->rom_interface1, [[defaults stringForKey:@"rominterfacei"] UTF8String] );
  if( [[defaults stringForKey:@"romopus"] isEqualToString:@""] == YES ) {
    free( settings->rom_opus );
    settings->rom_opus = NULL;
  } else
    settings_set_string( &settings->rom_opus, [[defaults stringForKey:@"romopus"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon10240"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon1024_0 );
    settings->rom_pentagon1024_0 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon1024_0, [[defaults stringForKey:@"rompentagon10240"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon10241"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon1024_1 );
    settings->rom_pentagon1024_1 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon1024_1, [[defaults stringForKey:@"rompentagon10241"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon10242"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon1024_2 );
    settings->rom_pentagon1024_2 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon1024_2, [[defaults stringForKey:@"rompentagon10242"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon10243"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon1024_3 );
    settings->rom_pentagon1024_3 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon1024_3, [[defaults stringForKey:@"rompentagon10243"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon5120"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon512_0 );
    settings->rom_pentagon512_0 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon512_0, [[defaults stringForKey:@"rompentagon5120"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon5121"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon512_1 );
    settings->rom_pentagon512_1 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon512_1, [[defaults stringForKey:@"rompentagon5121"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon5122"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon512_2 );
    settings->rom_pentagon512_2 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon512_2, [[defaults stringForKey:@"rompentagon5122"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon5123"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon512_3 );
    settings->rom_pentagon512_3 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon512_3, [[defaults stringForKey:@"rompentagon5123"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon0"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon_0 );
    settings->rom_pentagon_0 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon_0, [[defaults stringForKey:@"rompentagon0"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon1"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon_1 );
    settings->rom_pentagon_1 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon_1, [[defaults stringForKey:@"rompentagon1"] UTF8String] );
  if( [[defaults stringForKey:@"rompentagon2"] isEqualToString:@""] == YES ) {
    free( settings->rom_pentagon_2 );
    settings->rom_pentagon_2 = NULL;
  } else
    settings_set_string( &settings->rom_pentagon_2, [[defaults stringForKey:@"rompentagon2"] UTF8String] );
  if( [[defaults stringForKey:@"romplus20"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2_0 );
    settings->rom_plus2_0 = NULL;
  } else
    settings_set_string( &settings->rom_plus2_0, [[defaults stringForKey:@"romplus20"] UTF8String] );
  if( [[defaults stringForKey:@"romplus21"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2_1 );
    settings->rom_plus2_1 = NULL;
  } else
    settings_set_string( &settings->rom_plus2_1, [[defaults stringForKey:@"romplus21"] UTF8String] );
  if( [[defaults stringForKey:@"romplus2a0"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2a_0 );
    settings->rom_plus2a_0 = NULL;
  } else
    settings_set_string( &settings->rom_plus2a_0, [[defaults stringForKey:@"romplus2a0"] UTF8String] );
  if( [[defaults stringForKey:@"romplus2a1"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2a_1 );
    settings->rom_plus2a_1 = NULL;
  } else
    settings_set_string( &settings->rom_plus2a_1, [[defaults stringForKey:@"romplus2a1"] UTF8String] );
  if( [[defaults stringForKey:@"romplus2a2"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2a_2 );
    settings->rom_plus2a_2 = NULL;
  } else
    settings_set_string( &settings->rom_plus2a_2, [[defaults stringForKey:@"romplus2a2"] UTF8String] );
  if( [[defaults stringForKey:@"romplus2a3"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus2a_3 );
    settings->rom_plus2a_3 = NULL;
  } else
    settings_set_string( &settings->rom_plus2a_3, [[defaults stringForKey:@"romplus2a3"] UTF8String] );
  if( [[defaults stringForKey:@"romplus30"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3_0 );
    settings->rom_plus3_0 = NULL;
  } else
    settings_set_string( &settings->rom_plus3_0, [[defaults stringForKey:@"romplus30"] UTF8String] );
  if( [[defaults stringForKey:@"romplus31"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3_1 );
    settings->rom_plus3_1 = NULL;
  } else
    settings_set_string( &settings->rom_plus3_1, [[defaults stringForKey:@"romplus31"] UTF8String] );
  if( [[defaults stringForKey:@"romplus32"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3_2 );
    settings->rom_plus3_2 = NULL;
  } else
    settings_set_string( &settings->rom_plus3_2, [[defaults stringForKey:@"romplus32"] UTF8String] );
  if( [[defaults stringForKey:@"romplus33"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3_3 );
    settings->rom_plus3_3 = NULL;
  } else
    settings_set_string( &settings->rom_plus3_3, [[defaults stringForKey:@"romplus33"] UTF8String] );
  if( [[defaults stringForKey:@"romplus3e0"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3e_0 );
    settings->rom_plus3e_0 = NULL;
  } else
    settings_set_string( &settings->rom_plus3e_0, [[defaults stringForKey:@"romplus3e0"] UTF8String] );
  if( [[defaults stringForKey:@"romplus3e1"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3e_1 );
    settings->rom_plus3e_1 = NULL;
  } else
    settings_set_string( &settings->rom_plus3e_1, [[defaults stringForKey:@"romplus3e1"] UTF8String] );
  if( [[defaults stringForKey:@"romplus3e2"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3e_2 );
    settings->rom_plus3e_2 = NULL;
  } else
    settings_set_string( &settings->rom_plus3e_2, [[defaults stringForKey:@"romplus3e2"] UTF8String] );
  if( [[defaults stringForKey:@"romplus3e3"] isEqualToString:@""] == YES ) {
    free( settings->rom_plus3e_3 );
    settings->rom_plus3e_3 = NULL;
  } else
    settings_set_string( &settings->rom_plus3e_3, [[defaults stringForKey:@"romplus3e3"] UTF8String] );
  if( [[defaults stringForKey:@"romplusd"] isEqualToString:@""] == YES ) {
    free( settings->rom_plusd );
    settings->rom_plusd = NULL;
  } else
    settings_set_string( &settings->rom_plusd, [[defaults stringForKey:@"romplusd"] UTF8String] );
  if( [[defaults stringForKey:@"romscorpion0"] isEqualToString:@""] == YES ) {
    free( settings->rom_scorpion_0 );
    settings->rom_scorpion_0 = NULL;
  } else
    settings_set_string( &settings->rom_scorpion_0, [[defaults stringForKey:@"romscorpion0"] UTF8String] );
  if( [[defaults stringForKey:@"romscorpion1"] isEqualToString:@""] == YES ) {
    free( settings->rom_scorpion_1 );
    settings->rom_scorpion_1 = NULL;
  } else
    settings_set_string( &settings->rom_scorpion_1, [[defaults stringForKey:@"romscorpion1"] UTF8String] );
  if( [[defaults stringForKey:@"romscorpion2"] isEqualToString:@""] == YES ) {
    free( settings->rom_scorpion_2 );
    settings->rom_scorpion_2 = NULL;
  } else
    settings_set_string( &settings->rom_scorpion_2, [[defaults stringForKey:@"romscorpion2"] UTF8String] );
  if( [[defaults stringForKey:@"romscorpion3"] isEqualToString:@""] == YES ) {
    free( settings->rom_scorpion_3 );
    settings->rom_scorpion_3 = NULL;
  } else
    settings_set_string( &settings->rom_scorpion_3, [[defaults stringForKey:@"romscorpion3"] UTF8String] );
  if( [[defaults stringForKey:@"romse0"] isEqualToString:@""] == YES ) {
    free( settings->rom_se_0 );
    settings->rom_se_0 = NULL;
  } else
    settings_set_string( &settings->rom_se_0, [[defaults stringForKey:@"romse0"] UTF8String] );
  if( [[defaults stringForKey:@"romse1"] isEqualToString:@""] == YES ) {
    free( settings->rom_se_1 );
    settings->rom_se_1 = NULL;
  } else
    settings_set_string( &settings->rom_se_1, [[defaults stringForKey:@"romse1"] UTF8String] );
  if( [[defaults stringForKey:@"romspeccyboot"] isEqualToString:@""] == YES ) {
    free( settings->rom_speccyboot );
    settings->rom_speccyboot = NULL;
  } else
    settings_set_string( &settings->rom_speccyboot, [[defaults stringForKey:@"romspeccyboot"] UTF8String] );
  if( [[defaults stringForKey:@"romts20680"] isEqualToString:@""] == YES ) {
    free( settings->rom_ts2068_0 );
    settings->rom_ts2068_0 = NULL;
  } else
    settings_set_string( &settings->rom_ts2068_0, [[defaults stringForKey:@"romts20680"] UTF8String] );
  if( [[defaults stringForKey:@"romts20681"] isEqualToString:@""] == YES ) {
    free( settings->rom_ts2068_1 );
    settings->rom_ts2068_1 = NULL;
  } else
    settings_set_string( &settings->rom_ts2068_1, [[defaults stringForKey:@"romts20681"] UTF8String] );
  if( [[defaults stringForKey:@"romusource"] isEqualToString:@""] == YES ) {
    free( settings->rom_usource );
    settings->rom_usource = NULL;
  } else
    settings_set_string( &settings->rom_usource, [[defaults stringForKey:@"romusource"] UTF8String] );
  settings->rs232_handshake = [defaults boolForKey:@"rs232handshake"] ? 1 : 0;
  if( [[defaults stringForKey:@"rs232rx"] isEqualToString:@""] == YES ) {
    free( settings->rs232_rx );
    settings->rs232_rx = NULL;
  } else
    settings_set_string( &settings->rs232_rx, [[defaults stringForKey:@"rs232rx"] UTF8String] );
  if( [[defaults stringForKey:@"rs232tx"] isEqualToString:@""] == YES ) {
    free( settings->rs232_tx );
    settings->rs232_tx = NULL;
  } else
    settings_set_string( &settings->rs232_tx, [[defaults stringForKey:@"rs232tx"] UTF8String] );
  settings->rzx_autosaves = [defaults boolForKey:@"rzxautosaves"] ? 1 : 0;
  settings->rzx_compression = [defaults boolForKey:@"compressrzx"] ? 1 : 0;
  settings->simpleide_active = [defaults boolForKey:@"simpleide"] ? 1 : 0;
  settings->slt_traps = [defaults boolForKey:@"slttraps"] ? 1 : 0;
  if( [[defaults stringForKey:@"snet"] isEqualToString:@""] == YES ) {
    free( settings->snet );
    settings->snet = NULL;
  } else
    settings_set_string( &settings->snet, [[defaults stringForKey:@"snet"] UTF8String] );
  settings->sound = [defaults boolForKey:@"sound"] ? 1 : 0;
  if( [[defaults stringForKey:@"sounddevice"] isEqualToString:@""] == YES ) {
    free( settings->sound_device );
    settings->sound_device = NULL;
  } else
    settings_set_string( &settings->sound_device, [[defaults stringForKey:@"sounddevice"] UTF8String] );
  settings->sound_force_8bit = [defaults boolForKey:@"soundforce8bit"] ? 1 : 0;
  settings->sound_freq = [defaults integerForKey:@"soundfreq"];
  settings->sound_load = [defaults boolForKey:@"loading-sound"] ? 1 : 0;
  if( [[defaults stringForKey:@"speakertype"] isEqualToString:@""] == YES ) {
    free( settings->speaker_type );
    settings->speaker_type = NULL;
  } else {
    const char* value =
      option_enumerate_string_sound_speaker_type(
                         [[defaults stringForKey:@"speakertype"] UTF8String] );
    settings_set_string( &settings->speaker_type, value );
  }
  settings->speccyboot = [defaults boolForKey:@"speccyboot"] ? 1 : 0;
  if( [[defaults stringForKey:@"speccyboottap"] isEqualToString:@""] == YES ) {
    free( settings->speccyboot_tap );
    settings->speccyboot_tap = NULL;
  } else
    settings_set_string( &settings->speccyboot_tap, [[defaults stringForKey:@"speccyboottap"] UTF8String] );
  settings->specdrum = [defaults boolForKey:@"specdrum"] ? 1 : 0;
  settings->spectranet = [defaults boolForKey:@"spectranet"] ? 1 : 0;
  settings->spectranet_disable = [defaults boolForKey:@"spectranetdisable"] ? 1 : 0;
  if( [[defaults stringForKey:@"machine"] isEqualToString:@""] == YES ) {
    free( settings->start_machine );
    settings->start_machine = NULL;
  } else
    settings_set_string( &settings->start_machine, [[defaults stringForKey:@"machine"] UTF8String] );
  if( [[defaults stringForKey:@"graphicsfilter"] isEqualToString:@""] == YES ) {
    free( settings->start_scaler_mode );
    settings->start_scaler_mode = NULL;
  } else
    settings_set_string( &settings->start_scaler_mode, [[defaults stringForKey:@"graphicsfilter"] UTF8String] );
  settings->statusbar = [defaults boolForKey:@"statusbar"] ? 1 : 0;
  if( [[defaults stringForKey:@"separation"] isEqualToString:@""] == YES ) {
    free( settings->stereo_ay );
    settings->stereo_ay = NULL;
  } else {
    const char* value =
      option_enumerate_string_sound_stereo_ay(
                         [[defaults stringForKey:@"separation"] UTF8String] );
    settings_set_string( &settings->stereo_ay, value );
  }
  settings->strict_aspect_hint = [defaults boolForKey:@"strictaspecthint"] ? 1 : 0;
  if( [[defaults stringForKey:@"svgamodes"] isEqualToString:@""] == YES ) {
    free( settings->svga_modes );
    settings->svga_modes = NULL;
  } else
    settings_set_string( &settings->svga_modes, [[defaults stringForKey:@"svgamodes"] UTF8String] );
  settings->tape_traps = [defaults boolForKey:@"tapetraps"] ? 1 : 0;
  settings->unittests = [defaults boolForKey:@"unittests"] ? 1 : 0;
  settings->usource = [defaults boolForKey:@"usource"] ? 1 : 0;
  settings->volume_ay = [defaults integerForKey:@"volumeay"];
  settings->volume_beeper = [defaults integerForKey:@"volumebeeper"];
  settings->volume_specdrum = [defaults integerForKey:@"volumespecdrum"];
  settings->writable_roms = [defaults boolForKey:@"writableroms"] ? 1 : 0;
  settings->z80_is_cmos = [defaults boolForKey:@"z80iscmos"] ? 1 : 0;
  settings->zxatasp_active = [defaults boolForKey:@"zxatasp"] ? 1 : 0;
  settings->zxatasp_upload = [defaults boolForKey:@"zxataspupload"] ? 1 : 0;
  settings->zxatasp_wp = [defaults boolForKey:@"zxataspwriteprotect"] ? 1 : 0;
  settings->zxcf_active = [defaults boolForKey:@"zxcf"] ? 1 : 0;
  settings->zxcf_upload = [defaults boolForKey:@"zxcfupload"] ? 1 : 0;
  settings->zxprinter = [defaults boolForKey:@"zxprinter"] ? 1 : 0;

  return 0;
}

int
settings_write_config( settings_info *settings )
{
  NSUserDefaults *currentValues = [NSUserDefaults standardUserDefaults];
  BOOL value;

  value = settings->accelerate_loader ? YES : NO;
  [currentValues setObject:@(value) forKey:@"accelerateloader"];
  value = settings->aspect_hint ? YES : NO;
  [currentValues setObject:@(value) forKey:@"aspecthint"];
  value = settings->auto_load ? YES : NO;
  [currentValues setObject:@(value) forKey:@"autoload"];
  value = settings->autosave_settings ? YES : NO;
  [currentValues setObject:@(value) forKey:@"autosavesettings"];
  value = settings->beta128 ? YES : NO;
  [currentValues setObject:@(value) forKey:@"beta128"];
  value = settings->beta128_48boot ? YES : NO;
  [currentValues setObject:@(value) forKey:@"beta12848boot"];
  value = settings->bilinear_filter ? YES : NO;
  [currentValues setObject:@(value) forKey:@"bilinear"];
  value = settings->bw_tv ? YES : NO;
  [currentValues setObject:@(value) forKey:@"bwtv"];
  [currentValues setObject:@(settings->competition_code) forKey:@"competitioncode"];
  value = settings->competition_mode ? YES : NO;
  [currentValues setObject:@(value) forKey:@"competitionmode"];
  value = settings->confirm_actions ? YES : NO;
  [currentValues setObject:@(value) forKey:@"confirmactions"];
  if( settings->debugger_command )
    [currentValues setObject:@(settings->debugger_command) forKey:@"debuggercommand"];
  else
    [currentValues setObject:@"" forKey:@"debuggercommand"];
  value = settings->detect_loader ? YES : NO;
  [currentValues setObject:@(value) forKey:@"detectloader"];
  value = settings->didaktik80 ? YES : NO;
  [currentValues setObject:@(value) forKey:@"didaktik80"];
  if( settings->didaktik80disk_file )
    [currentValues setObject:@(settings->didaktik80disk_file) forKey:@"didaktik80disk"];
  else
    [currentValues setObject:@"" forKey:@"didaktik80disk"];
  value = settings->disciple ? YES : NO;
  [currentValues setObject:@(value) forKey:@"disciple"];
  if( settings->discipledisk_file )
    [currentValues setObject:@(settings->discipledisk_file) forKey:@"discipledisk"];
  else
    [currentValues setObject:@"" forKey:@"discipledisk"];
  value = settings->disk_ask_merge ? YES : NO;
  [currentValues setObject:@(value) forKey:@"diskaskmerge"];
  if( settings->disk_try_merge )
    [currentValues setObject:@(settings->disk_try_merge) forKey:@"disktrymerge"];
  else
    [currentValues setObject:@"" forKey:@"disktrymerge"];
  value = settings->divide_enabled ? YES : NO;
  [currentValues setObject:@(value) forKey:@"divide"];
  if( settings->divide_master_file )
    [currentValues setObject:@(settings->divide_master_file) forKey:@"dividemasterfile"];
  else
    [currentValues setObject:@"" forKey:@"dividemasterfile"];
  if( settings->divide_slave_file )
    [currentValues setObject:@(settings->divide_slave_file) forKey:@"divideslavefile"];
  else
    [currentValues setObject:@"" forKey:@"divideslavefile"];
  value = settings->divide_wp ? YES : NO;
  [currentValues setObject:@(value) forKey:@"dividewriteprotect"];
  [currentValues setObject:@(settings->doublescan_mode) forKey:@"doublescanmode"];
  [currentValues setObject:@(settings->drive_40_max_track) forKey:@"drive40maxtrack"];
  [currentValues setObject:@(settings->drive_80_max_track) forKey:@"drive80maxtrack"];
  if( settings->drive_beta128a_type )
    [currentValues setObject:@(settings->drive_beta128a_type) forKey:@"drivebeta128atype"];
  else
    [currentValues setObject:@"" forKey:@"drivebeta128atype"];
  if( settings->drive_beta128b_type )
    [currentValues setObject:@(settings->drive_beta128b_type) forKey:@"drivebeta128btype"];
  else
    [currentValues setObject:@"" forKey:@"drivebeta128btype"];
  if( settings->drive_beta128c_type )
    [currentValues setObject:@(settings->drive_beta128c_type) forKey:@"drivebeta128ctype"];
  else
    [currentValues setObject:@"" forKey:@"drivebeta128ctype"];
  if( settings->drive_beta128d_type )
    [currentValues setObject:@(settings->drive_beta128d_type) forKey:@"drivebeta128dtype"];
  else
    [currentValues setObject:@"" forKey:@"drivebeta128dtype"];
  if( settings->drive_didaktik80a_type )
    [currentValues setObject:@(settings->drive_didaktik80a_type) forKey:@"drivedidaktik80atype"];
  else
    [currentValues setObject:@"" forKey:@"drivedidaktik80atype"];
  if( settings->drive_didaktik80b_type )
    [currentValues setObject:@(settings->drive_didaktik80b_type) forKey:@"drivedidaktik80btype"];
  else
    [currentValues setObject:@"" forKey:@"drivedidaktik80btype"];
  if( settings->drive_disciple1_type )
    [currentValues setObject:@(settings->drive_disciple1_type) forKey:@"drivedisciple1type"];
  else
    [currentValues setObject:@"" forKey:@"drivedisciple1type"];
  if( settings->drive_disciple2_type )
    [currentValues setObject:@(settings->drive_disciple2_type) forKey:@"drivedisciple2type"];
  else
    [currentValues setObject:@"" forKey:@"drivedisciple2type"];
  if( settings->drive_opus1_type )
    [currentValues setObject:@(settings->drive_opus1_type) forKey:@"driveopus1type"];
  else
    [currentValues setObject:@"" forKey:@"driveopus1type"];
  if( settings->drive_opus2_type )
    [currentValues setObject:@(settings->drive_opus2_type) forKey:@"driveopus2type"];
  else
    [currentValues setObject:@"" forKey:@"driveopus2type"];
  if( settings->drive_plus3a_type )
    [currentValues setObject:@(settings->drive_plus3a_type) forKey:@"driveplus3atype"];
  else
    [currentValues setObject:@"" forKey:@"driveplus3atype"];
  if( settings->drive_plus3b_type )
    [currentValues setObject:@(settings->drive_plus3b_type) forKey:@"driveplus3btype"];
  else
    [currentValues setObject:@"" forKey:@"driveplus3btype"];
  if( settings->drive_plusd1_type )
    [currentValues setObject:@(settings->drive_plusd1_type) forKey:@"driveplusd1type"];
  else
    [currentValues setObject:@"" forKey:@"driveplusd1type"];
  if( settings->drive_plusd2_type )
    [currentValues setObject:@(settings->drive_plusd2_type) forKey:@"driveplusd2type"];
  else
    [currentValues setObject:@"" forKey:@"driveplusd2type"];
  value = settings->embed_snapshot ? YES : NO;
  [currentValues setObject:@(value) forKey:@"embedsnapshot"];
  [currentValues setObject:@(settings->emulation_speed) forKey:@"speed"];
  value = settings->fastload ? YES : NO;
  [currentValues setObject:@(value) forKey:@"fastload"];
  [currentValues setObject:@(settings->fb_mode) forKey:@"fbmode"];
  [currentValues setObject:@(settings->frame_rate) forKey:@"rate"];
  value = settings->full_screen ? YES : NO;
  [currentValues setObject:@(value) forKey:@"fullscreen"];
  value = settings->full_screen_panorama ? YES : NO;
  [currentValues setObject:@(value) forKey:@"fullscreenpanorama"];
  value = settings->fuller ? YES : NO;
  [currentValues setObject:@(value) forKey:@"fuller"];
  value = settings->interface1 ? YES : NO;
  [currentValues setObject:@(value) forKey:@"interface1"];
  value = settings->interface2 ? YES : NO;
  [currentValues setObject:@(value) forKey:@"interface2"];
  value = settings->issue2 ? YES : NO;
  [currentValues setObject:@(value) forKey:@"issue2"];
  [currentValues setObject:@(settings->joy1_number) forKey:@"joy1num"];
  [currentValues setObject:@(settings->joy1_xaxis) forKey:@"joy1x"];
  [currentValues setObject:@(settings->joy1_yaxis) forKey:@"joy1y"];
  [currentValues setObject:@(settings->joy2_number) forKey:@"joy2num"];
  [currentValues setObject:@(settings->joy2_xaxis) forKey:@"joy2x"];
  [currentValues setObject:@(settings->joy2_yaxis) forKey:@"joy2y"];
  value = settings->joy_kempston ? YES : NO;
  [currentValues setObject:@(value) forKey:@"kempston"];
  value = settings->joy_keyboard ? YES : NO;
  [currentValues setObject:@(value) forKey:@"keyboard"];
  value = settings->joy_prompt ? YES : NO;
  [currentValues setObject:@(value) forKey:@"joyprompt"];
  if( settings->joystick_1 )
    [currentValues setObject:@(settings->joystick_1) forKey:@"joystick1"];
  else
    [currentValues setObject:@"" forKey:@"joystick1"];
  [currentValues setObject:@(settings->joystick_1_fire_1) forKey:@"joystick1fire1"];
  [currentValues setObject:@(settings->joystick_1_fire_10) forKey:@"joystick1fire10"];
  [currentValues setObject:@(settings->joystick_1_fire_11) forKey:@"joystick1fire11"];
  [currentValues setObject:@(settings->joystick_1_fire_12) forKey:@"joystick1fire12"];
  [currentValues setObject:@(settings->joystick_1_fire_13) forKey:@"joystick1fire13"];
  [currentValues setObject:@(settings->joystick_1_fire_14) forKey:@"joystick1fire14"];
  [currentValues setObject:@(settings->joystick_1_fire_15) forKey:@"joystick1fire15"];
  [currentValues setObject:@(settings->joystick_1_fire_2) forKey:@"joystick1fire2"];
  [currentValues setObject:@(settings->joystick_1_fire_3) forKey:@"joystick1fire3"];
  [currentValues setObject:@(settings->joystick_1_fire_4) forKey:@"joystick1fire4"];
  [currentValues setObject:@(settings->joystick_1_fire_5) forKey:@"joystick1fire5"];
  [currentValues setObject:@(settings->joystick_1_fire_6) forKey:@"joystick1fire6"];
  [currentValues setObject:@(settings->joystick_1_fire_7) forKey:@"joystick1fire7"];
  [currentValues setObject:@(settings->joystick_1_fire_8) forKey:@"joystick1fire8"];
  [currentValues setObject:@(settings->joystick_1_fire_9) forKey:@"joystick1fire9"];
  [currentValues setObject:@(settings->joystick_1_output) forKey:@"joystick1output"];
  if( settings->joystick_2 )
    [currentValues setObject:@(settings->joystick_2) forKey:@"joystick2"];
  else
    [currentValues setObject:@"" forKey:@"joystick2"];
  [currentValues setObject:@(settings->joystick_2_fire_1) forKey:@"joystick2fire1"];
  [currentValues setObject:@(settings->joystick_2_fire_10) forKey:@"joystick2fire10"];
  [currentValues setObject:@(settings->joystick_2_fire_11) forKey:@"joystick2fire11"];
  [currentValues setObject:@(settings->joystick_2_fire_12) forKey:@"joystick2fire12"];
  [currentValues setObject:@(settings->joystick_2_fire_13) forKey:@"joystick2fire13"];
  [currentValues setObject:@(settings->joystick_2_fire_14) forKey:@"joystick2fire14"];
  [currentValues setObject:@(settings->joystick_2_fire_15) forKey:@"joystick2fire15"];
  [currentValues setObject:@(settings->joystick_2_fire_2) forKey:@"joystick2fire2"];
  [currentValues setObject:@(settings->joystick_2_fire_3) forKey:@"joystick2fire3"];
  [currentValues setObject:@(settings->joystick_2_fire_4) forKey:@"joystick2fire4"];
  [currentValues setObject:@(settings->joystick_2_fire_5) forKey:@"joystick2fire5"];
  [currentValues setObject:@(settings->joystick_2_fire_6) forKey:@"joystick2fire6"];
  [currentValues setObject:@(settings->joystick_2_fire_7) forKey:@"joystick2fire7"];
  [currentValues setObject:@(settings->joystick_2_fire_8) forKey:@"joystick2fire8"];
  [currentValues setObject:@(settings->joystick_2_fire_9) forKey:@"joystick2fire9"];
  [currentValues setObject:@(settings->joystick_2_output) forKey:@"joystick2output"];
  [currentValues setObject:@(settings->joystick_keyboard_down) forKey:@"joystickkeyboarddown"];
  [currentValues setObject:@(settings->joystick_keyboard_fire) forKey:@"joystickkeyboardfire"];
  [currentValues setObject:@(settings->joystick_keyboard_left) forKey:@"joystickkeyboardleft"];
  [currentValues setObject:@(settings->joystick_keyboard_output) forKey:@"joystickkeyboardoutput"];
  [currentValues setObject:@(settings->joystick_keyboard_right) forKey:@"joystickkeyboardright"];
  [currentValues setObject:@(settings->joystick_keyboard_up) forKey:@"joystickkeyboardup"];
  value = settings->kempston_mouse ? YES : NO;
  [currentValues setObject:@(value) forKey:@"kempstonmouse"];
  value = settings->late_timings ? YES : NO;
  [currentValues setObject:@(value) forKey:@"latetimings"];
  if( settings->mdr_file )
    [currentValues setObject:@(settings->mdr_file) forKey:@"microdrivefile"];
  else
    [currentValues setObject:@"" forKey:@"microdrivefile"];
  if( settings->mdr_file2 )
    [currentValues setObject:@(settings->mdr_file2) forKey:@"microdrive2file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive2file"];
  if( settings->mdr_file3 )
    [currentValues setObject:@(settings->mdr_file3) forKey:@"microdrive3file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive3file"];
  if( settings->mdr_file4 )
    [currentValues setObject:@(settings->mdr_file4) forKey:@"microdrive4file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive4file"];
  if( settings->mdr_file5 )
    [currentValues setObject:@(settings->mdr_file5) forKey:@"microdrive5file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive5file"];
  if( settings->mdr_file6 )
    [currentValues setObject:@(settings->mdr_file6) forKey:@"microdrive6file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive6file"];
  if( settings->mdr_file7 )
    [currentValues setObject:@(settings->mdr_file7) forKey:@"microdrive7file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive7file"];
  if( settings->mdr_file8 )
    [currentValues setObject:@(settings->mdr_file8) forKey:@"microdrive8file"];
  else
    [currentValues setObject:@"" forKey:@"microdrive8file"];
  [currentValues setObject:@(settings->mdr_len) forKey:@"mdrlen"];
  value = settings->mdr_random_len ? YES : NO;
  [currentValues setObject:@(value) forKey:@"mdrrandomlen"];
  value = settings->melodik ? YES : NO;
  [currentValues setObject:@(value) forKey:@"melodik"];
  value = settings->mouse_swap_buttons ? YES : NO;
  [currentValues setObject:@(value) forKey:@"mouseswapbuttons"];
  if( settings->movie_compr )
    [currentValues setObject:@(settings->movie_compr) forKey:@"moviecompr"];
  else
    [currentValues setObject:@"" forKey:@"moviecompr"];
  if( settings->movie_start )
    [currentValues setObject:@(settings->movie_start) forKey:@"moviestart"];
  else
    [currentValues setObject:@"" forKey:@"moviestart"];
  value = settings->movie_stop_after_rzx ? YES : NO;
  [currentValues setObject:@(value) forKey:@"moviestopafterrzx"];
  value = settings->opus ? YES : NO;
  [currentValues setObject:@(value) forKey:@"opus"];
  if( settings->opusdisk_file )
    [currentValues setObject:@(settings->opusdisk_file) forKey:@"opusdisk"];
  else
    [currentValues setObject:@"" forKey:@"opusdisk"];
  value = settings->pal_tv2x ? YES : NO;
  [currentValues setObject:@(value) forKey:@"paltv2x"];
  value = settings->plus3_detect_speedlock ? YES : NO;
  [currentValues setObject:@(value) forKey:@"plus3detectspeedlock"];
  value = settings->plusd ? YES : NO;
  [currentValues setObject:@(value) forKey:@"plusd"];
  if( settings->plusddisk_file )
    [currentValues setObject:@(settings->plusddisk_file) forKey:@"plusddisk"];
  else
    [currentValues setObject:@"" forKey:@"plusddisk"];
  [currentValues setObject:@(settings->preferences_tab) forKey:@"preferencestab"];
  value = settings->printer ? YES : NO;
  [currentValues setObject:@(value) forKey:@"printer"];
  if( settings->printer_graphics_filename )
    [currentValues setObject:@(settings->printer_graphics_filename) forKey:@"graphicsfile"];
  else
    [currentValues setObject:@"" forKey:@"graphicsfile"];
  if( settings->printer_text_filename )
    [currentValues setObject:@(settings->printer_text_filename) forKey:@"textfile"];
  else
    [currentValues setObject:@"" forKey:@"textfile"];
  value = settings->raw_s_net ? YES : NO;
  [currentValues setObject:@(value) forKey:@"rawsnet"];
  if( settings->cocoa && settings->cocoa->recent_snapshots )
    [currentValues setObject:settings->cocoa->recent_snapshots forKey:@"recentsnapshots"];
  else
    [currentValues setObject:[NSMutableArray array] forKey:@"recentsnapshots"];
  value = settings->recreated_spectrum ? YES : NO;
  [currentValues setObject:@(value) forKey:@"recreatedspectrum"];
  if( settings->rom_128_0 )
    [currentValues setObject:@(settings->rom_128_0) forKey:@"rom1280"];
  else
    [currentValues setObject:@"" forKey:@"rom1280"];
  if( settings->rom_128_1 )
    [currentValues setObject:@(settings->rom_128_1) forKey:@"rom1281"];
  else
    [currentValues setObject:@"" forKey:@"rom1281"];
  if( settings->rom_16_0 )
    [currentValues setObject:@(settings->rom_16_0) forKey:@"rom160"];
  else
    [currentValues setObject:@"" forKey:@"rom160"];
  if( settings->rom_2048_0 )
    [currentValues setObject:@(settings->rom_2048_0) forKey:@"rom20480"];
  else
    [currentValues setObject:@"" forKey:@"rom20480"];
  if( settings->rom_2068_0 )
    [currentValues setObject:@(settings->rom_2068_0) forKey:@"rom20680"];
  else
    [currentValues setObject:@"" forKey:@"rom20680"];
  if( settings->rom_2068_1 )
    [currentValues setObject:@(settings->rom_2068_1) forKey:@"rom20681"];
  else
    [currentValues setObject:@"" forKey:@"rom20681"];
  if( settings->rom_48_0 )
    [currentValues setObject:@(settings->rom_48_0) forKey:@"rom480"];
  else
    [currentValues setObject:@"" forKey:@"rom480"];
  if( settings->rom_beta128 )
    [currentValues setObject:@(settings->rom_beta128) forKey:@"rombeta128"];
  else
    [currentValues setObject:@"" forKey:@"rombeta128"];
  if( settings->rom_didaktik80 )
    [currentValues setObject:@(settings->rom_didaktik80) forKey:@"romdidaktik80"];
  else
    [currentValues setObject:@"" forKey:@"romdidaktik80"];
  if( settings->rom_disciple )
    [currentValues setObject:@(settings->rom_disciple) forKey:@"romdisciple"];
  else
    [currentValues setObject:@"" forKey:@"romdisciple"];
  if( settings->rom_interface1 )
    [currentValues setObject:@(settings->rom_interface1) forKey:@"rominterfacei"];
  else
    [currentValues setObject:@"" forKey:@"rominterfacei"];
  if( settings->rom_opus )
    [currentValues setObject:@(settings->rom_opus) forKey:@"romopus"];
  else
    [currentValues setObject:@"" forKey:@"romopus"];
  if( settings->rom_pentagon1024_0 )
    [currentValues setObject:@(settings->rom_pentagon1024_0) forKey:@"rompentagon10240"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon10240"];
  if( settings->rom_pentagon1024_1 )
    [currentValues setObject:@(settings->rom_pentagon1024_1) forKey:@"rompentagon10241"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon10241"];
  if( settings->rom_pentagon1024_2 )
    [currentValues setObject:@(settings->rom_pentagon1024_2) forKey:@"rompentagon10242"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon10242"];
  if( settings->rom_pentagon1024_3 )
    [currentValues setObject:@(settings->rom_pentagon1024_3) forKey:@"rompentagon10243"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon10243"];
  if( settings->rom_pentagon512_0 )
    [currentValues setObject:@(settings->rom_pentagon512_0) forKey:@"rompentagon5120"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon5120"];
  if( settings->rom_pentagon512_1 )
    [currentValues setObject:@(settings->rom_pentagon512_1) forKey:@"rompentagon5121"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon5121"];
  if( settings->rom_pentagon512_2 )
    [currentValues setObject:@(settings->rom_pentagon512_2) forKey:@"rompentagon5122"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon5122"];
  if( settings->rom_pentagon512_3 )
    [currentValues setObject:@(settings->rom_pentagon512_3) forKey:@"rompentagon5123"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon5123"];
  if( settings->rom_pentagon_0 )
    [currentValues setObject:@(settings->rom_pentagon_0) forKey:@"rompentagon0"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon0"];
  if( settings->rom_pentagon_1 )
    [currentValues setObject:@(settings->rom_pentagon_1) forKey:@"rompentagon1"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon1"];
  if( settings->rom_pentagon_2 )
    [currentValues setObject:@(settings->rom_pentagon_2) forKey:@"rompentagon2"];
  else
    [currentValues setObject:@"" forKey:@"rompentagon2"];
  if( settings->rom_plus2_0 )
    [currentValues setObject:@(settings->rom_plus2_0) forKey:@"romplus20"];
  else
    [currentValues setObject:@"" forKey:@"romplus20"];
  if( settings->rom_plus2_1 )
    [currentValues setObject:@(settings->rom_plus2_1) forKey:@"romplus21"];
  else
    [currentValues setObject:@"" forKey:@"romplus21"];
  if( settings->rom_plus2a_0 )
    [currentValues setObject:@(settings->rom_plus2a_0) forKey:@"romplus2a0"];
  else
    [currentValues setObject:@"" forKey:@"romplus2a0"];
  if( settings->rom_plus2a_1 )
    [currentValues setObject:@(settings->rom_plus2a_1) forKey:@"romplus2a1"];
  else
    [currentValues setObject:@"" forKey:@"romplus2a1"];
  if( settings->rom_plus2a_2 )
    [currentValues setObject:@(settings->rom_plus2a_2) forKey:@"romplus2a2"];
  else
    [currentValues setObject:@"" forKey:@"romplus2a2"];
  if( settings->rom_plus2a_3 )
    [currentValues setObject:@(settings->rom_plus2a_3) forKey:@"romplus2a3"];
  else
    [currentValues setObject:@"" forKey:@"romplus2a3"];
  if( settings->rom_plus3_0 )
    [currentValues setObject:@(settings->rom_plus3_0) forKey:@"romplus30"];
  else
    [currentValues setObject:@"" forKey:@"romplus30"];
  if( settings->rom_plus3_1 )
    [currentValues setObject:@(settings->rom_plus3_1) forKey:@"romplus31"];
  else
    [currentValues setObject:@"" forKey:@"romplus31"];
  if( settings->rom_plus3_2 )
    [currentValues setObject:@(settings->rom_plus3_2) forKey:@"romplus32"];
  else
    [currentValues setObject:@"" forKey:@"romplus32"];
  if( settings->rom_plus3_3 )
    [currentValues setObject:@(settings->rom_plus3_3) forKey:@"romplus33"];
  else
    [currentValues setObject:@"" forKey:@"romplus33"];
  if( settings->rom_plus3e_0 )
    [currentValues setObject:@(settings->rom_plus3e_0) forKey:@"romplus3e0"];
  else
    [currentValues setObject:@"" forKey:@"romplus3e0"];
  if( settings->rom_plus3e_1 )
    [currentValues setObject:@(settings->rom_plus3e_1) forKey:@"romplus3e1"];
  else
    [currentValues setObject:@"" forKey:@"romplus3e1"];
  if( settings->rom_plus3e_2 )
    [currentValues setObject:@(settings->rom_plus3e_2) forKey:@"romplus3e2"];
  else
    [currentValues setObject:@"" forKey:@"romplus3e2"];
  if( settings->rom_plus3e_3 )
    [currentValues setObject:@(settings->rom_plus3e_3) forKey:@"romplus3e3"];
  else
    [currentValues setObject:@"" forKey:@"romplus3e3"];
  if( settings->rom_plusd )
    [currentValues setObject:@(settings->rom_plusd) forKey:@"romplusd"];
  else
    [currentValues setObject:@"" forKey:@"romplusd"];
  if( settings->rom_scorpion_0 )
    [currentValues setObject:@(settings->rom_scorpion_0) forKey:@"romscorpion0"];
  else
    [currentValues setObject:@"" forKey:@"romscorpion0"];
  if( settings->rom_scorpion_1 )
    [currentValues setObject:@(settings->rom_scorpion_1) forKey:@"romscorpion1"];
  else
    [currentValues setObject:@"" forKey:@"romscorpion1"];
  if( settings->rom_scorpion_2 )
    [currentValues setObject:@(settings->rom_scorpion_2) forKey:@"romscorpion2"];
  else
    [currentValues setObject:@"" forKey:@"romscorpion2"];
  if( settings->rom_scorpion_3 )
    [currentValues setObject:@(settings->rom_scorpion_3) forKey:@"romscorpion3"];
  else
    [currentValues setObject:@"" forKey:@"romscorpion3"];
  if( settings->rom_se_0 )
    [currentValues setObject:@(settings->rom_se_0) forKey:@"romse0"];
  else
    [currentValues setObject:@"" forKey:@"romse0"];
  if( settings->rom_se_1 )
    [currentValues setObject:@(settings->rom_se_1) forKey:@"romse1"];
  else
    [currentValues setObject:@"" forKey:@"romse1"];
  if( settings->rom_speccyboot )
    [currentValues setObject:@(settings->rom_speccyboot) forKey:@"romspeccyboot"];
  else
    [currentValues setObject:@"" forKey:@"romspeccyboot"];
  if( settings->rom_ts2068_0 )
    [currentValues setObject:@(settings->rom_ts2068_0) forKey:@"romts20680"];
  else
    [currentValues setObject:@"" forKey:@"romts20680"];
  if( settings->rom_ts2068_1 )
    [currentValues setObject:@(settings->rom_ts2068_1) forKey:@"romts20681"];
  else
    [currentValues setObject:@"" forKey:@"romts20681"];
  if( settings->rom_usource )
    [currentValues setObject:@(settings->rom_usource) forKey:@"romusource"];
  else
    [currentValues setObject:@"" forKey:@"romusource"];
  value = settings->rs232_handshake ? YES : NO;
  [currentValues setObject:@(value) forKey:@"rs232handshake"];
  if( settings->rs232_rx )
    [currentValues setObject:@(settings->rs232_rx) forKey:@"rs232rx"];
  else
    [currentValues setObject:@"" forKey:@"rs232rx"];
  if( settings->rs232_tx )
    [currentValues setObject:@(settings->rs232_tx) forKey:@"rs232tx"];
  else
    [currentValues setObject:@"" forKey:@"rs232tx"];
  value = settings->rzx_autosaves ? YES : NO;
  [currentValues setObject:@(value) forKey:@"rzxautosaves"];
  value = settings->rzx_compression ? YES : NO;
  [currentValues setObject:@(value) forKey:@"compressrzx"];
  value = settings->simpleide_active ? YES : NO;
  [currentValues setObject:@(value) forKey:@"simpleide"];
  value = settings->slt_traps ? YES : NO;
  [currentValues setObject:@(value) forKey:@"slttraps"];
  if( settings->snet )
    [currentValues setObject:@(settings->snet) forKey:@"snet"];
  else
    [currentValues setObject:@"" forKey:@"snet"];
  value = settings->sound ? YES : NO;
  [currentValues setObject:@(value) forKey:@"sound"];
  if( settings->sound_device )
    [currentValues setObject:@(settings->sound_device) forKey:@"sounddevice"];
  else
    [currentValues setObject:@"" forKey:@"sounddevice"];
  value = settings->sound_force_8bit ? YES : NO;
  [currentValues setObject:@(value) forKey:@"soundforce8bit"];
  [currentValues setObject:@(settings->sound_freq) forKey:@"soundfreq"];
  value = settings->sound_load ? YES : NO;
  [currentValues setObject:@(value) forKey:@"loading-sound"];
  if( settings->speaker_type )
    [currentValues setObject:@(settings->speaker_type) forKey:@"speakertype"];
  else
    [currentValues setObject:@"" forKey:@"speakertype"];
  value = settings->speccyboot ? YES : NO;
  [currentValues setObject:@(value) forKey:@"speccyboot"];
  if( settings->speccyboot_tap )
    [currentValues setObject:@(settings->speccyboot_tap) forKey:@"speccyboottap"];
  else
    [currentValues setObject:@"" forKey:@"speccyboottap"];
  value = settings->specdrum ? YES : NO;
  [currentValues setObject:@(value) forKey:@"specdrum"];
  value = settings->spectranet ? YES : NO;
  [currentValues setObject:@(value) forKey:@"spectranet"];
  value = settings->spectranet_disable ? YES : NO;
  [currentValues setObject:@(value) forKey:@"spectranetdisable"];
  if( settings->start_machine )
    [currentValues setObject:@(settings->start_machine) forKey:@"machine"];
  else
    [currentValues setObject:@"" forKey:@"machine"];
  if( settings->start_scaler_mode )
    [currentValues setObject:@(settings->start_scaler_mode) forKey:@"graphicsfilter"];
  else
    [currentValues setObject:@"" forKey:@"graphicsfilter"];
  value = settings->statusbar ? YES : NO;
  [currentValues setObject:@(value) forKey:@"statusbar"];
  if( settings->stereo_ay )
    [currentValues setObject:@(settings->stereo_ay) forKey:@"separation"];
  else
    [currentValues setObject:@"" forKey:@"separation"];
  value = settings->strict_aspect_hint ? YES : NO;
  [currentValues setObject:@(value) forKey:@"strictaspecthint"];
  if( settings->svga_modes )
    [currentValues setObject:@(settings->svga_modes) forKey:@"svgamodes"];
  else
    [currentValues setObject:@"" forKey:@"svgamodes"];
  value = settings->tape_traps ? YES : NO;
  [currentValues setObject:@(value) forKey:@"tapetraps"];
  value = settings->unittests ? YES : NO;
  [currentValues setObject:@(value) forKey:@"unittests"];
  value = settings->usource ? YES : NO;
  [currentValues setObject:@(value) forKey:@"usource"];
  [currentValues setObject:@(settings->volume_ay) forKey:@"volumeay"];
  [currentValues setObject:@(settings->volume_beeper) forKey:@"volumebeeper"];
  [currentValues setObject:@(settings->volume_specdrum) forKey:@"volumespecdrum"];
  value = settings->writable_roms ? YES : NO;
  [currentValues setObject:@(value) forKey:@"writableroms"];
  value = settings->z80_is_cmos ? YES : NO;
  [currentValues setObject:@(value) forKey:@"z80iscmos"];
  value = settings->zxatasp_active ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxatasp"];
  value = settings->zxatasp_upload ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxataspupload"];
  value = settings->zxatasp_wp ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxataspwriteprotect"];
  value = settings->zxcf_active ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxcf"];
  value = settings->zxcf_upload ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxcfupload"];
  value = settings->zxprinter ? YES : NO;
  [currentValues setObject:@(value) forKey:@"zxprinter"];

  [currentValues synchronize];

  return 0;
}

/* Read options from the command line */
static int
settings_command_line( settings_info *settings, int *first_arg,
                       int argc, char **argv )
{
#ifdef GEKKO
  /* No argv on the Wii. Just return */
  return 0;
#endif

#if !defined AMIGA && !defined __MORPHOS__

  struct option long_options[] = {

    {    "accelerate-loader", 0, &(settings->accelerate_loader), 1 },
    { "no-accelerate-loader", 0, &(settings->accelerate_loader), 0 },
    {    "aspect-hint", 0, &(settings->aspect_hint), 1 },
    { "no-aspect-hint", 0, &(settings->aspect_hint), 0 },
    {    "auto-load", 0, &(settings->auto_load), 1 },
    { "no-auto-load", 0, &(settings->auto_load), 0 },
    {    "autosave-settings", 0, &(settings->autosave_settings), 1 },
    { "no-autosave-settings", 0, &(settings->autosave_settings), 0 },
    {    "beta128", 0, &(settings->beta128), 1 },
    { "no-beta128", 0, &(settings->beta128), 0 },
    {    "beta128-48boot", 0, &(settings->beta128_48boot), 1 },
    { "no-beta128-48boot", 0, &(settings->beta128_48boot), 0 },
    { "betadisk", 1, NULL, 256 },
    {    "bilinear", 0, &(settings->bilinear_filter), 1 },
    { "no-bilinear", 0, &(settings->bilinear_filter), 0 },
    {    "bw-tv", 0, &(settings->bw_tv), 1 },
    { "no-bw-tv", 0, &(settings->bw_tv), 0 },
    { "competition-code", 1, NULL, 257 },
    {    "competition-mode", 0, &(settings->competition_mode), 1 },
    { "no-competition-mode", 0, &(settings->competition_mode), 0 },
    {    "confirm-actions", 0, &(settings->confirm_actions), 1 },
    { "no-confirm-actions", 0, &(settings->confirm_actions), 0 },
    { "dock", 1, NULL, 258 },
    { "debugger-command", 1, NULL, 259 },
    {    "detect-loader", 0, &(settings->detect_loader), 1 },
    { "no-detect-loader", 0, &(settings->detect_loader), 0 },
    {    "didaktik80", 0, &(settings->didaktik80), 1 },
    { "no-didaktik80", 0, &(settings->didaktik80), 0 },
    { "didaktik80disk", 1, NULL, 260 },
    {    "disciple", 0, &(settings->disciple), 1 },
    { "no-disciple", 0, &(settings->disciple), 0 },
    { "discipledisk", 1, NULL, 261 },
    {    "disk-ask-merge", 0, &(settings->disk_ask_merge), 1 },
    { "no-disk-ask-merge", 0, &(settings->disk_ask_merge), 0 },
    { "disk-try-merge", 1, NULL, 262 },
    {    "divide", 0, &(settings->divide_enabled), 1 },
    { "no-divide", 0, &(settings->divide_enabled), 0 },
    { "divide-masterfile", 1, NULL, 263 },
    { "divide-slavefile", 1, NULL, 264 },
    {    "divide-write-protect", 0, &(settings->divide_wp), 1 },
    { "no-divide-write-protect", 0, &(settings->divide_wp), 0 },
    { "doublescan-mode", 1, NULL, 'D' },
    { "drive-40-max-track", 1, NULL, 266 },
    { "drive-80-max-track", 1, NULL, 267 },
    { "drive-beta128a-type", 1, NULL, 268 },
    { "drive-beta128b-type", 1, NULL, 269 },
    { "drive-beta128c-type", 1, NULL, 270 },
    { "drive-beta128d-type", 1, NULL, 271 },
    { "drive-didaktik80a-type", 1, NULL, 272 },
    { "drive-didaktik80b-type", 1, NULL, 273 },
    { "drive-disciple1-type", 1, NULL, 274 },
    { "drive-disciple2-type", 1, NULL, 275 },
    { "drive-opus1-type", 1, NULL, 276 },
    { "drive-opus2-type", 1, NULL, 277 },
    { "drive-plus3a-type", 1, NULL, 278 },
    { "drive-plus3b-type", 1, NULL, 279 },
    { "drive-plusd1-type", 1, NULL, 280 },
    { "drive-plusd2-type", 1, NULL, 281 },
    {    "embed-snapshot", 0, &(settings->embed_snapshot), 1 },
    { "no-embed-snapshot", 0, &(settings->embed_snapshot), 0 },
    { "speed", 1, NULL, 282 },
    {    "fastload", 0, &(settings->fastload), 1 },
    { "no-fastload", 0, &(settings->fastload), 0 },
    { "fbmode", 1, NULL, 'v' },
    { "rate", 1, NULL, 283 },
    {    "full-screen", 0, &(settings->full_screen), 1 },
    { "no-full-screen", 0, &(settings->full_screen), 0 },
    {    "full-screen-panorama", 0, &(settings->full_screen_panorama), 1 },
    { "no-full-screen-panorama", 0, &(settings->full_screen_panorama), 0 },
    {    "fuller", 0, &(settings->fuller), 1 },
    { "no-fuller", 0, &(settings->fuller), 0 },
    { "if2cart", 1, NULL, 284 },
    {    "interface1", 0, &(settings->interface1), 1 },
    { "no-interface1", 0, &(settings->interface1), 0 },
    {    "interface2", 0, &(settings->interface2), 1 },
    { "no-interface2", 0, &(settings->interface2), 0 },
    {    "issue2", 0, &(settings->issue2), 1 },
    { "no-issue2", 0, &(settings->issue2), 0 },
    { "joy1num", 1, NULL, 285 },
    { "joy1x", 1, NULL, 286 },
    { "joy1y", 1, NULL, 287 },
    { "joy2num", 1, NULL, 288 },
    { "joy2x", 1, NULL, 289 },
    { "joy2y", 1, NULL, 290 },
    {    "kempston", 0, &(settings->joy_kempston), 1 },
    { "no-kempston", 0, &(settings->joy_kempston), 0 },
    {    "keyboard", 0, &(settings->joy_keyboard), 1 },
    { "no-keyboard", 0, &(settings->joy_keyboard), 0 },
    {    "joyprompt", 0, &(settings->joy_prompt), 1 },
    { "no-joyprompt", 0, &(settings->joy_prompt), 0 },
    { "joystick-1", 1, NULL, 'j' },
    { "joystick-1-fire-1", 1, NULL, 291 },
    { "joystick-1-fire-10", 1, NULL, 292 },
    { "joystick-1-fire-11", 1, NULL, 293 },
    { "joystick-1-fire-12", 1, NULL, 294 },
    { "joystick-1-fire-13", 1, NULL, 295 },
    { "joystick-1-fire-14", 1, NULL, 296 },
    { "joystick-1-fire-15", 1, NULL, 297 },
    { "joystick-1-fire-2", 1, NULL, 298 },
    { "joystick-1-fire-3", 1, NULL, 299 },
    { "joystick-1-fire-4", 1, NULL, 300 },
    { "joystick-1-fire-5", 1, NULL, 301 },
    { "joystick-1-fire-6", 1, NULL, 302 },
    { "joystick-1-fire-7", 1, NULL, 303 },
    { "joystick-1-fire-8", 1, NULL, 304 },
    { "joystick-1-fire-9", 1, NULL, 305 },
    { "joystick-1-output", 1, NULL, 306 },
    { "joystick-2", 1, NULL, 307 },
    { "joystick-2-fire-1", 1, NULL, 308 },
    { "joystick-2-fire-10", 1, NULL, 309 },
    { "joystick-2-fire-11", 1, NULL, 310 },
    { "joystick-2-fire-12", 1, NULL, 311 },
    { "joystick-2-fire-13", 1, NULL, 312 },
    { "joystick-2-fire-14", 1, NULL, 313 },
    { "joystick-2-fire-15", 1, NULL, 314 },
    { "joystick-2-fire-2", 1, NULL, 315 },
    { "joystick-2-fire-3", 1, NULL, 316 },
    { "joystick-2-fire-4", 1, NULL, 317 },
    { "joystick-2-fire-5", 1, NULL, 318 },
    { "joystick-2-fire-6", 1, NULL, 319 },
    { "joystick-2-fire-7", 1, NULL, 320 },
    { "joystick-2-fire-8", 1, NULL, 321 },
    { "joystick-2-fire-9", 1, NULL, 322 },
    { "joystick-2-output", 1, NULL, 323 },
    { "joystick-keyboard-down", 1, NULL, 324 },
    { "joystick-keyboard-fire", 1, NULL, 325 },
    { "joystick-keyboard-left", 1, NULL, 326 },
    { "joystick-keyboard-output", 1, NULL, 327 },
    { "joystick-keyboard-right", 1, NULL, 328 },
    { "joystick-keyboard-up", 1, NULL, 329 },
    {    "kempston-mouse", 0, &(settings->kempston_mouse), 1 },
    { "no-kempston-mouse", 0, &(settings->kempston_mouse), 0 },
    {    "late-timings", 0, &(settings->late_timings), 1 },
    { "no-late-timings", 0, &(settings->late_timings), 0 },
    { "microdrive-file", 1, NULL, 330 },
    { "microdrive-2-file", 1, NULL, 331 },
    { "microdrive-3-file", 1, NULL, 332 },
    { "microdrive-4-file", 1, NULL, 333 },
    { "microdrive-5-file", 1, NULL, 334 },
    { "microdrive-6-file", 1, NULL, 335 },
    { "microdrive-7-file", 1, NULL, 336 },
    { "microdrive-8-file", 1, NULL, 337 },
    { "mdr-len", 1, NULL, 338 },
    {    "mdr-random-len", 0, &(settings->mdr_random_len), 1 },
    { "no-mdr-random-len", 0, &(settings->mdr_random_len), 0 },
    {    "melodik", 0, &(settings->melodik), 1 },
    { "no-melodik", 0, &(settings->melodik), 0 },
    {    "mouse-swap-buttons", 0, &(settings->mouse_swap_buttons), 1 },
    { "no-mouse-swap-buttons", 0, &(settings->mouse_swap_buttons), 0 },
    { "movie-compr", 1, NULL, 339 },
    { "movie-start", 1, NULL, 340 },
    {    "movie-stop-after-rzx", 0, &(settings->movie_stop_after_rzx), 1 },
    { "no-movie-stop-after-rzx", 0, &(settings->movie_stop_after_rzx), 0 },
    {    "opus", 0, &(settings->opus), 1 },
    { "no-opus", 0, &(settings->opus), 0 },
    { "opusdisk", 1, NULL, 341 },
    {    "pal-tv2x", 0, &(settings->pal_tv2x), 1 },
    { "no-pal-tv2x", 0, &(settings->pal_tv2x), 0 },
    { "playback", 1, NULL, 'p' },
    {    "plus3-detect-speedlock", 0, &(settings->plus3_detect_speedlock), 1 },
    { "no-plus3-detect-speedlock", 0, &(settings->plus3_detect_speedlock), 0 },
    { "plus3disk", 1, NULL, 342 },
    {    "plusd", 0, &(settings->plusd), 1 },
    { "no-plusd", 0, &(settings->plusd), 0 },
    { "plusddisk", 1, NULL, 343 },
    { "preferencestab", 1, NULL, 344 },
    {    "printer", 0, &(settings->printer), 1 },
    { "no-printer", 0, &(settings->printer), 0 },
    { "graphicsfile", 1, NULL, 345 },
    { "textfile", 1, NULL, 346 },
    {    "raw-s-net", 0, &(settings->raw_s_net), 1 },
    { "no-raw-s-net", 0, &(settings->raw_s_net), 0 },
    { "record", 1, NULL, 'r' },
    {    "recreated-spectrum", 0, &(settings->recreated_spectrum), 1 },
    { "no-recreated-spectrum", 0, &(settings->recreated_spectrum), 0 },
    { "rom-128-0", 1, NULL, 349 },
    { "rom-128-1", 1, NULL, 350 },
    { "rom-16-0", 1, NULL, 351 },
    { "rom-2048-0", 1, NULL, 352 },
    { "rom-2068-0", 1, NULL, 353 },
    { "rom-2068-1", 1, NULL, 354 },
    { "rom-48-0", 1, NULL, 355 },
    { "rom-beta128", 1, NULL, 356 },
    { "rom-didaktik80", 1, NULL, 357 },
    { "rom-disciple", 1, NULL, 358 },
    { "rominterfacei", 1, NULL, 359 },
    { "rom-opus", 1, NULL, 360 },
    { "rom-pentagon1024-0", 1, NULL, 361 },
    { "rom-pentagon1024-1", 1, NULL, 362 },
    { "rom-pentagon1024-2", 1, NULL, 363 },
    { "rom-pentagon1024-3", 1, NULL, 364 },
    { "rom-pentagon512-0", 1, NULL, 365 },
    { "rom-pentagon512-1", 1, NULL, 366 },
    { "rom-pentagon512-2", 1, NULL, 367 },
    { "rom-pentagon512-3", 1, NULL, 368 },
    { "rom-pentagon-0", 1, NULL, 369 },
    { "rom-pentagon-1", 1, NULL, 370 },
    { "rom-pentagon-2", 1, NULL, 371 },
    { "rom-plus2-0", 1, NULL, 372 },
    { "rom-plus2-1", 1, NULL, 373 },
    { "rom-plus2a-0", 1, NULL, 374 },
    { "rom-plus2a-1", 1, NULL, 375 },
    { "rom-plus2a-2", 1, NULL, 376 },
    { "rom-plus2a-3", 1, NULL, 377 },
    { "rom-plus3-0", 1, NULL, 378 },
    { "rom-plus3-1", 1, NULL, 379 },
    { "rom-plus3-2", 1, NULL, 380 },
    { "rom-plus3-3", 1, NULL, 381 },
    { "rom-plus3e-0", 1, NULL, 382 },
    { "rom-plus3e-1", 1, NULL, 383 },
    { "rom-plus3e-2", 1, NULL, 384 },
    { "rom-plus3e-3", 1, NULL, 385 },
    { "rom-plusd", 1, NULL, 386 },
    { "rom-scorpion-0", 1, NULL, 387 },
    { "rom-scorpion-1", 1, NULL, 388 },
    { "rom-scorpion-2", 1, NULL, 389 },
    { "rom-scorpion-3", 1, NULL, 390 },
    { "rom-se-0", 1, NULL, 391 },
    { "rom-se-1", 1, NULL, 392 },
    { "rom-speccyboot", 1, NULL, 393 },
    { "rom-ts2068-0", 1, NULL, 394 },
    { "rom-ts2068-1", 1, NULL, 395 },
    { "rom-usource", 1, NULL, 396 },
    {    "rs232-handshake", 0, &(settings->rs232_handshake), 1 },
    { "no-rs232-handshake", 0, &(settings->rs232_handshake), 0 },
    { "rs232-rx", 1, NULL, 397 },
    { "rs232-tx", 1, NULL, 398 },
    {    "rzx-autosaves", 0, &(settings->rzx_autosaves), 1 },
    { "no-rzx-autosaves", 0, &(settings->rzx_autosaves), 0 },
    {    "compress-rzx", 0, &(settings->rzx_compression), 1 },
    { "no-compress-rzx", 0, &(settings->rzx_compression), 0 },
    {    "simpleide", 0, &(settings->simpleide_active), 1 },
    { "no-simpleide", 0, &(settings->simpleide_active), 0 },
    { "simpleide-masterfile", 1, NULL, 399 },
    { "simpleide-slavefile", 1, NULL, 400 },
    {    "slt", 0, &(settings->slt_traps), 1 },
    { "no-slt", 0, &(settings->slt_traps), 0 },
    { "snapshot", 1, NULL, 's' },
    { "snet", 1, NULL, 402 },
    {    "sound", 0, &(settings->sound), 1 },
    { "no-sound", 0, &(settings->sound), 0 },
    { "sound-device", 1, NULL, 'd' },
    {    "sound-force-8bit", 0, &(settings->sound_force_8bit), 1 },
    { "no-sound-force-8bit", 0, &(settings->sound_force_8bit), 0 },
    { "sound-freq", 1, NULL, 'f' },
    {    "sound-load", 0, &(settings->sound_load), 1 },
    { "no-sound-load", 0, &(settings->sound_load), 0 },
    { "speaker-type", 1, NULL, 403 },
    {    "speccyboot", 0, &(settings->speccyboot), 1 },
    { "no-speccyboot", 0, &(settings->speccyboot), 0 },
    { "speccyboot-tap", 1, NULL, 404 },
    {    "specdrum", 0, &(settings->specdrum), 1 },
    { "no-specdrum", 0, &(settings->specdrum), 0 },
    {    "spectranet", 0, &(settings->spectranet), 1 },
    { "no-spectranet", 0, &(settings->spectranet), 0 },
    {    "spectranet-disable", 0, &(settings->spectranet_disable), 1 },
    { "no-spectranet-disable", 0, &(settings->spectranet_disable), 0 },
    { "machine", 1, NULL, 'm' },
    { "graphics-filter", 1, NULL, 'g' },
    {    "statusbar", 0, &(settings->statusbar), 1 },
    { "no-statusbar", 0, &(settings->statusbar), 0 },
    { "separation", 1, NULL, 405 },
    {    "strict-aspect-hint", 0, &(settings->strict_aspect_hint), 1 },
    { "no-strict-aspect-hint", 0, &(settings->strict_aspect_hint), 0 },
    { "svga-modes", 1, NULL, 406 },
    { "tape", 1, NULL, 't' },
    {    "traps", 0, &(settings->tape_traps), 1 },
    { "no-traps", 0, &(settings->tape_traps), 0 },
    {    "unittests", 0, &(settings->unittests), 1 },
    { "no-unittests", 0, &(settings->unittests), 0 },
    {    "usource", 0, &(settings->usource), 1 },
    { "no-usource", 0, &(settings->usource), 0 },
    { "volume-ay", 1, NULL, 407 },
    { "volume-beeper", 1, NULL, 408 },
    { "volume-specdrum", 1, NULL, 409 },
    {    "writable-roms", 0, &(settings->writable_roms), 1 },
    { "no-writable-roms", 0, &(settings->writable_roms), 0 },
    {    "z80-is-cmos", 0, &(settings->z80_is_cmos), 1 },
    { "no-z80-is-cmos", 0, &(settings->z80_is_cmos), 0 },
    {    "zxatasp", 0, &(settings->zxatasp_active), 1 },
    { "no-zxatasp", 0, &(settings->zxatasp_active), 0 },
    { "zxatasp-masterfile", 1, NULL, 410 },
    { "zxatasp-slavefile", 1, NULL, 411 },
    {    "zxatasp-upload", 0, &(settings->zxatasp_upload), 1 },
    { "no-zxatasp-upload", 0, &(settings->zxatasp_upload), 0 },
    {    "zxatasp-write-protect", 0, &(settings->zxatasp_wp), 1 },
    { "no-zxatasp-write-protect", 0, &(settings->zxatasp_wp), 0 },
    {    "zxcf", 0, &(settings->zxcf_active), 1 },
    { "no-zxcf", 0, &(settings->zxcf_active), 0 },
    { "zxcf-cffile", 1, NULL, 412 },
    {    "zxcf-upload", 0, &(settings->zxcf_upload), 1 },
    { "no-zxcf-upload", 0, &(settings->zxcf_upload), 0 },
    {    "zxprinter", 0, &(settings->zxprinter), 1 },
    { "no-zxprinter", 0, &(settings->zxprinter), 0 },

    { "help", 0, NULL, 'h' },
    { "version", 0, NULL, 'V' },

    { 0, 0, 0, 0 }		/* End marker: DO NOT REMOVE */
  };

#endif      /* #ifndef AMIGA */

  while( 1 ) {

    int c;

#if defined AMIGA || defined __MORPHOS__
    c = getopt( argc, argv, "d:hm:o:p:f:r:s:t:v:g:j:V" );
#else                    /* #ifdef AMIGA */
    c = getopt_long( argc, argv, "d:hm:o:p:f:r:s:t:v:g:j:V", long_options, NULL );
#endif                   /* #ifdef AMIGA */

    if( c == -1 ) break;	/* End of option list */

    switch( c ) {

    case 0: break;	/* Used for long option returns */

    case 256: settings_set_string( &settings->betadisk_file, optarg ); break;
    case 257: settings->competition_code = atoi( optarg ); break;
    case 258: settings_set_string( &settings->dck_file, optarg ); break;
    case 259: settings_set_string( &settings->debugger_command, optarg ); break;
    case 260: settings_set_string( &settings->didaktik80disk_file, optarg ); break;
    case 261: settings_set_string( &settings->discipledisk_file, optarg ); break;
    case 262: settings_set_string( &settings->disk_try_merge, optarg ); break;
    case 263: settings_set_string( &settings->divide_master_file, optarg ); break;
    case 264: settings_set_string( &settings->divide_slave_file, optarg ); break;
    case 'D': settings->doublescan_mode = atoi( optarg ); break;
    case 266: settings->drive_40_max_track = atoi( optarg ); break;
    case 267: settings->drive_80_max_track = atoi( optarg ); break;
    case 268: settings_set_string( &settings->drive_beta128a_type, optarg ); break;
    case 269: settings_set_string( &settings->drive_beta128b_type, optarg ); break;
    case 270: settings_set_string( &settings->drive_beta128c_type, optarg ); break;
    case 271: settings_set_string( &settings->drive_beta128d_type, optarg ); break;
    case 272: settings_set_string( &settings->drive_didaktik80a_type, optarg ); break;
    case 273: settings_set_string( &settings->drive_didaktik80b_type, optarg ); break;
    case 274: settings_set_string( &settings->drive_disciple1_type, optarg ); break;
    case 275: settings_set_string( &settings->drive_disciple2_type, optarg ); break;
    case 276: settings_set_string( &settings->drive_opus1_type, optarg ); break;
    case 277: settings_set_string( &settings->drive_opus2_type, optarg ); break;
    case 278: settings_set_string( &settings->drive_plus3a_type, optarg ); break;
    case 279: settings_set_string( &settings->drive_plus3b_type, optarg ); break;
    case 280: settings_set_string( &settings->drive_plusd1_type, optarg ); break;
    case 281: settings_set_string( &settings->drive_plusd2_type, optarg ); break;
    case 282: settings->emulation_speed = atoi( optarg ); break;
    case 'v': settings->fb_mode = atoi( optarg ); break;
    case 283: settings->frame_rate = atoi( optarg ); break;
    case 284: settings_set_string( &settings->if2_file, optarg ); break;
    case 285: settings->joy1_number = atoi( optarg ); break;
    case 286: settings->joy1_xaxis = atoi( optarg ); break;
    case 287: settings->joy1_yaxis = atoi( optarg ); break;
    case 288: settings->joy2_number = atoi( optarg ); break;
    case 289: settings->joy2_xaxis = atoi( optarg ); break;
    case 290: settings->joy2_yaxis = atoi( optarg ); break;
    case 'j': settings_set_string( &settings->joystick_1, optarg ); break;
    case 291: settings->joystick_1_fire_1 = atoi( optarg ); break;
    case 292: settings->joystick_1_fire_10 = atoi( optarg ); break;
    case 293: settings->joystick_1_fire_11 = atoi( optarg ); break;
    case 294: settings->joystick_1_fire_12 = atoi( optarg ); break;
    case 295: settings->joystick_1_fire_13 = atoi( optarg ); break;
    case 296: settings->joystick_1_fire_14 = atoi( optarg ); break;
    case 297: settings->joystick_1_fire_15 = atoi( optarg ); break;
    case 298: settings->joystick_1_fire_2 = atoi( optarg ); break;
    case 299: settings->joystick_1_fire_3 = atoi( optarg ); break;
    case 300: settings->joystick_1_fire_4 = atoi( optarg ); break;
    case 301: settings->joystick_1_fire_5 = atoi( optarg ); break;
    case 302: settings->joystick_1_fire_6 = atoi( optarg ); break;
    case 303: settings->joystick_1_fire_7 = atoi( optarg ); break;
    case 304: settings->joystick_1_fire_8 = atoi( optarg ); break;
    case 305: settings->joystick_1_fire_9 = atoi( optarg ); break;
    case 306: settings->joystick_1_output = atoi( optarg ); break;
    case 307: settings_set_string( &settings->joystick_2, optarg ); break;
    case 308: settings->joystick_2_fire_1 = atoi( optarg ); break;
    case 309: settings->joystick_2_fire_10 = atoi( optarg ); break;
    case 310: settings->joystick_2_fire_11 = atoi( optarg ); break;
    case 311: settings->joystick_2_fire_12 = atoi( optarg ); break;
    case 312: settings->joystick_2_fire_13 = atoi( optarg ); break;
    case 313: settings->joystick_2_fire_14 = atoi( optarg ); break;
    case 314: settings->joystick_2_fire_15 = atoi( optarg ); break;
    case 315: settings->joystick_2_fire_2 = atoi( optarg ); break;
    case 316: settings->joystick_2_fire_3 = atoi( optarg ); break;
    case 317: settings->joystick_2_fire_4 = atoi( optarg ); break;
    case 318: settings->joystick_2_fire_5 = atoi( optarg ); break;
    case 319: settings->joystick_2_fire_6 = atoi( optarg ); break;
    case 320: settings->joystick_2_fire_7 = atoi( optarg ); break;
    case 321: settings->joystick_2_fire_8 = atoi( optarg ); break;
    case 322: settings->joystick_2_fire_9 = atoi( optarg ); break;
    case 323: settings->joystick_2_output = atoi( optarg ); break;
    case 324: settings->joystick_keyboard_down = atoi( optarg ); break;
    case 325: settings->joystick_keyboard_fire = atoi( optarg ); break;
    case 326: settings->joystick_keyboard_left = atoi( optarg ); break;
    case 327: settings->joystick_keyboard_output = atoi( optarg ); break;
    case 328: settings->joystick_keyboard_right = atoi( optarg ); break;
    case 329: settings->joystick_keyboard_up = atoi( optarg ); break;
    case 330: settings_set_string( &settings->mdr_file, optarg ); break;
    case 331: settings_set_string( &settings->mdr_file2, optarg ); break;
    case 332: settings_set_string( &settings->mdr_file3, optarg ); break;
    case 333: settings_set_string( &settings->mdr_file4, optarg ); break;
    case 334: settings_set_string( &settings->mdr_file5, optarg ); break;
    case 335: settings_set_string( &settings->mdr_file6, optarg ); break;
    case 336: settings_set_string( &settings->mdr_file7, optarg ); break;
    case 337: settings_set_string( &settings->mdr_file8, optarg ); break;
    case 338: settings->mdr_len = atoi( optarg ); break;
    case 339: settings_set_string( &settings->movie_compr, optarg ); break;
    case 340: settings_set_string( &settings->movie_start, optarg ); break;
    case 341: settings_set_string( &settings->opusdisk_file, optarg ); break;
    case 'p': settings_set_string( &settings->playback_file, optarg ); break;
    case 342: settings_set_string( &settings->plus3disk_file, optarg ); break;
    case 343: settings_set_string( &settings->plusddisk_file, optarg ); break;
    case 344: settings->preferences_tab = atoi( optarg ); break;
    case 345: settings_set_string( &settings->printer_graphics_filename, optarg ); break;
    case 346: settings_set_string( &settings->printer_text_filename, optarg ); break;
    case 'r': settings_set_string( &settings->record_file, optarg ); break;
    case 349: settings_set_string( &settings->rom_128_0, optarg ); break;
    case 350: settings_set_string( &settings->rom_128_1, optarg ); break;
    case 351: settings_set_string( &settings->rom_16_0, optarg ); break;
    case 352: settings_set_string( &settings->rom_2048_0, optarg ); break;
    case 353: settings_set_string( &settings->rom_2068_0, optarg ); break;
    case 354: settings_set_string( &settings->rom_2068_1, optarg ); break;
    case 355: settings_set_string( &settings->rom_48_0, optarg ); break;
    case 356: settings_set_string( &settings->rom_beta128, optarg ); break;
    case 357: settings_set_string( &settings->rom_didaktik80, optarg ); break;
    case 358: settings_set_string( &settings->rom_disciple, optarg ); break;
    case 359: settings_set_string( &settings->rom_interface1, optarg ); break;
    case 360: settings_set_string( &settings->rom_opus, optarg ); break;
    case 361: settings_set_string( &settings->rom_pentagon1024_0, optarg ); break;
    case 362: settings_set_string( &settings->rom_pentagon1024_1, optarg ); break;
    case 363: settings_set_string( &settings->rom_pentagon1024_2, optarg ); break;
    case 364: settings_set_string( &settings->rom_pentagon1024_3, optarg ); break;
    case 365: settings_set_string( &settings->rom_pentagon512_0, optarg ); break;
    case 366: settings_set_string( &settings->rom_pentagon512_1, optarg ); break;
    case 367: settings_set_string( &settings->rom_pentagon512_2, optarg ); break;
    case 368: settings_set_string( &settings->rom_pentagon512_3, optarg ); break;
    case 369: settings_set_string( &settings->rom_pentagon_0, optarg ); break;
    case 370: settings_set_string( &settings->rom_pentagon_1, optarg ); break;
    case 371: settings_set_string( &settings->rom_pentagon_2, optarg ); break;
    case 372: settings_set_string( &settings->rom_plus2_0, optarg ); break;
    case 373: settings_set_string( &settings->rom_plus2_1, optarg ); break;
    case 374: settings_set_string( &settings->rom_plus2a_0, optarg ); break;
    case 375: settings_set_string( &settings->rom_plus2a_1, optarg ); break;
    case 376: settings_set_string( &settings->rom_plus2a_2, optarg ); break;
    case 377: settings_set_string( &settings->rom_plus2a_3, optarg ); break;
    case 378: settings_set_string( &settings->rom_plus3_0, optarg ); break;
    case 379: settings_set_string( &settings->rom_plus3_1, optarg ); break;
    case 380: settings_set_string( &settings->rom_plus3_2, optarg ); break;
    case 381: settings_set_string( &settings->rom_plus3_3, optarg ); break;
    case 382: settings_set_string( &settings->rom_plus3e_0, optarg ); break;
    case 383: settings_set_string( &settings->rom_plus3e_1, optarg ); break;
    case 384: settings_set_string( &settings->rom_plus3e_2, optarg ); break;
    case 385: settings_set_string( &settings->rom_plus3e_3, optarg ); break;
    case 386: settings_set_string( &settings->rom_plusd, optarg ); break;
    case 387: settings_set_string( &settings->rom_scorpion_0, optarg ); break;
    case 388: settings_set_string( &settings->rom_scorpion_1, optarg ); break;
    case 389: settings_set_string( &settings->rom_scorpion_2, optarg ); break;
    case 390: settings_set_string( &settings->rom_scorpion_3, optarg ); break;
    case 391: settings_set_string( &settings->rom_se_0, optarg ); break;
    case 392: settings_set_string( &settings->rom_se_1, optarg ); break;
    case 393: settings_set_string( &settings->rom_speccyboot, optarg ); break;
    case 394: settings_set_string( &settings->rom_ts2068_0, optarg ); break;
    case 395: settings_set_string( &settings->rom_ts2068_1, optarg ); break;
    case 396: settings_set_string( &settings->rom_usource, optarg ); break;
    case 397: settings_set_string( &settings->rs232_rx, optarg ); break;
    case 398: settings_set_string( &settings->rs232_tx, optarg ); break;
    case 399: settings_set_string( &settings->simpleide_master_file, optarg ); break;
    case 400: settings_set_string( &settings->simpleide_slave_file, optarg ); break;
    case 's': settings_set_string( &settings->snapshot, optarg ); break;
    case 402: settings_set_string( &settings->snet, optarg ); break;
    case 'd': settings_set_string( &settings->sound_device, optarg ); break;
    case 'f': settings->sound_freq = atoi( optarg ); break;
    case 403: settings_set_string( &settings->speaker_type, optarg ); break;
    case 404: settings_set_string( &settings->speccyboot_tap, optarg ); break;
    case 'm': settings_set_string( &settings->start_machine, optarg ); break;
    case 'g': settings_set_string( &settings->start_scaler_mode, optarg ); break;
    case 405: settings_set_string( &settings->stereo_ay, optarg ); break;
    case 406: settings_set_string( &settings->svga_modes, optarg ); break;
    case 't': settings_set_string( &settings->tape_file, optarg ); break;
    case 407: settings->volume_ay = atoi( optarg ); break;
    case 408: settings->volume_beeper = atoi( optarg ); break;
    case 409: settings->volume_specdrum = atoi( optarg ); break;
    case 410: settings_set_string( &settings->zxatasp_master_file, optarg ); break;
    case 411: settings_set_string( &settings->zxatasp_slave_file, optarg ); break;
    case 412: settings_set_string( &settings->zxcf_pri_file, optarg ); break;

    case 'h': settings->show_help = 1; break;
    case 'V': settings->show_version = 1; break;

    case ':':
    case '?':
      break;

    default:
      fprintf( stderr, "%s: getopt_long returned `%c'\n",
	       fuse_progname, (char)c );
      break;

    }
  }

  /* Store the location of the first non-option argument */
  *first_arg = optind;

  return 0;
}

/* Copy one settings object to another */
static void
settings_copy_internal( settings_info *dest, settings_info *src )
{
  settings_free( dest );

  dest->cocoa = calloc(sizeof(settings_cocoa), 1);

  dest->accelerate_loader = src->accelerate_loader;
  dest->aspect_hint = src->aspect_hint;
  dest->auto_load = src->auto_load;
  dest->autosave_settings = src->autosave_settings;
  dest->beta128 = src->beta128;
  dest->beta128_48boot = src->beta128_48boot;
  dest->betadisk_file = NULL;
  if( src->betadisk_file ) {
    dest->betadisk_file = utils_safe_strdup( src->betadisk_file );
  }
  dest->bilinear_filter = src->bilinear_filter;
  dest->bw_tv = src->bw_tv;
  dest->competition_code = src->competition_code;
  dest->competition_mode = src->competition_mode;
  dest->confirm_actions = src->confirm_actions;
  dest->dck_file = NULL;
  if( src->dck_file ) {
    dest->dck_file = utils_safe_strdup( src->dck_file );
  }
  dest->debugger_command = NULL;
  if( src->debugger_command ) {
    dest->debugger_command = utils_safe_strdup( src->debugger_command );
  }
  dest->detect_loader = src->detect_loader;
  dest->didaktik80 = src->didaktik80;
  dest->didaktik80disk_file = NULL;
  if( src->didaktik80disk_file ) {
    dest->didaktik80disk_file = utils_safe_strdup( src->didaktik80disk_file );
  }
  dest->disciple = src->disciple;
  dest->discipledisk_file = NULL;
  if( src->discipledisk_file ) {
    dest->discipledisk_file = utils_safe_strdup( src->discipledisk_file );
  }
  dest->disk_ask_merge = src->disk_ask_merge;
  dest->disk_try_merge = NULL;
  if( src->disk_try_merge ) {
    dest->disk_try_merge = utils_safe_strdup( src->disk_try_merge );
  }
  dest->divide_enabled = src->divide_enabled;
  dest->divide_master_file = NULL;
  if( src->divide_master_file ) {
    dest->divide_master_file = utils_safe_strdup( src->divide_master_file );
  }
  dest->divide_slave_file = NULL;
  if( src->divide_slave_file ) {
    dest->divide_slave_file = utils_safe_strdup( src->divide_slave_file );
  }
  dest->divide_wp = src->divide_wp;
  dest->doublescan_mode = src->doublescan_mode;
  dest->drive_40_max_track = src->drive_40_max_track;
  dest->drive_80_max_track = src->drive_80_max_track;
  dest->drive_beta128a_type = NULL;
  if( src->drive_beta128a_type ) {
    dest->drive_beta128a_type = utils_safe_strdup( src->drive_beta128a_type );
  }
  dest->drive_beta128b_type = NULL;
  if( src->drive_beta128b_type ) {
    dest->drive_beta128b_type = utils_safe_strdup( src->drive_beta128b_type );
  }
  dest->drive_beta128c_type = NULL;
  if( src->drive_beta128c_type ) {
    dest->drive_beta128c_type = utils_safe_strdup( src->drive_beta128c_type );
  }
  dest->drive_beta128d_type = NULL;
  if( src->drive_beta128d_type ) {
    dest->drive_beta128d_type = utils_safe_strdup( src->drive_beta128d_type );
  }
  dest->drive_didaktik80a_type = NULL;
  if( src->drive_didaktik80a_type ) {
    dest->drive_didaktik80a_type = utils_safe_strdup( src->drive_didaktik80a_type );
  }
  dest->drive_didaktik80b_type = NULL;
  if( src->drive_didaktik80b_type ) {
    dest->drive_didaktik80b_type = utils_safe_strdup( src->drive_didaktik80b_type );
  }
  dest->drive_disciple1_type = NULL;
  if( src->drive_disciple1_type ) {
    dest->drive_disciple1_type = utils_safe_strdup( src->drive_disciple1_type );
  }
  dest->drive_disciple2_type = NULL;
  if( src->drive_disciple2_type ) {
    dest->drive_disciple2_type = utils_safe_strdup( src->drive_disciple2_type );
  }
  dest->drive_opus1_type = NULL;
  if( src->drive_opus1_type ) {
    dest->drive_opus1_type = utils_safe_strdup( src->drive_opus1_type );
  }
  dest->drive_opus2_type = NULL;
  if( src->drive_opus2_type ) {
    dest->drive_opus2_type = utils_safe_strdup( src->drive_opus2_type );
  }
  dest->drive_plus3a_type = NULL;
  if( src->drive_plus3a_type ) {
    dest->drive_plus3a_type = utils_safe_strdup( src->drive_plus3a_type );
  }
  dest->drive_plus3b_type = NULL;
  if( src->drive_plus3b_type ) {
    dest->drive_plus3b_type = utils_safe_strdup( src->drive_plus3b_type );
  }
  dest->drive_plusd1_type = NULL;
  if( src->drive_plusd1_type ) {
    dest->drive_plusd1_type = utils_safe_strdup( src->drive_plusd1_type );
  }
  dest->drive_plusd2_type = NULL;
  if( src->drive_plusd2_type ) {
    dest->drive_plusd2_type = utils_safe_strdup( src->drive_plusd2_type );
  }
  dest->embed_snapshot = src->embed_snapshot;
  dest->emulation_speed = src->emulation_speed;
  dest->fastload = src->fastload;
  dest->fb_mode = src->fb_mode;
  dest->frame_rate = src->frame_rate;
  dest->full_screen = src->full_screen;
  dest->full_screen_panorama = src->full_screen_panorama;
  dest->fuller = src->fuller;
  dest->if2_file = NULL;
  if( src->if2_file ) {
    dest->if2_file = utils_safe_strdup( src->if2_file );
  }
  dest->interface1 = src->interface1;
  dest->interface2 = src->interface2;
  dest->issue2 = src->issue2;
  dest->joy1_number = src->joy1_number;
  dest->joy1_xaxis = src->joy1_xaxis;
  dest->joy1_yaxis = src->joy1_yaxis;
  dest->joy2_number = src->joy2_number;
  dest->joy2_xaxis = src->joy2_xaxis;
  dest->joy2_yaxis = src->joy2_yaxis;
  dest->joy_kempston = src->joy_kempston;
  dest->joy_keyboard = src->joy_keyboard;
  dest->joy_prompt = src->joy_prompt;
  dest->joystick_1 = NULL;
  if( src->joystick_1 ) {
    dest->joystick_1 = utils_safe_strdup( src->joystick_1 );
  }
  dest->joystick_1_fire_1 = src->joystick_1_fire_1;
  dest->joystick_1_fire_10 = src->joystick_1_fire_10;
  dest->joystick_1_fire_11 = src->joystick_1_fire_11;
  dest->joystick_1_fire_12 = src->joystick_1_fire_12;
  dest->joystick_1_fire_13 = src->joystick_1_fire_13;
  dest->joystick_1_fire_14 = src->joystick_1_fire_14;
  dest->joystick_1_fire_15 = src->joystick_1_fire_15;
  dest->joystick_1_fire_2 = src->joystick_1_fire_2;
  dest->joystick_1_fire_3 = src->joystick_1_fire_3;
  dest->joystick_1_fire_4 = src->joystick_1_fire_4;
  dest->joystick_1_fire_5 = src->joystick_1_fire_5;
  dest->joystick_1_fire_6 = src->joystick_1_fire_6;
  dest->joystick_1_fire_7 = src->joystick_1_fire_7;
  dest->joystick_1_fire_8 = src->joystick_1_fire_8;
  dest->joystick_1_fire_9 = src->joystick_1_fire_9;
  dest->joystick_1_output = src->joystick_1_output;
  dest->joystick_2 = NULL;
  if( src->joystick_2 ) {
    dest->joystick_2 = utils_safe_strdup( src->joystick_2 );
  }
  dest->joystick_2_fire_1 = src->joystick_2_fire_1;
  dest->joystick_2_fire_10 = src->joystick_2_fire_10;
  dest->joystick_2_fire_11 = src->joystick_2_fire_11;
  dest->joystick_2_fire_12 = src->joystick_2_fire_12;
  dest->joystick_2_fire_13 = src->joystick_2_fire_13;
  dest->joystick_2_fire_14 = src->joystick_2_fire_14;
  dest->joystick_2_fire_15 = src->joystick_2_fire_15;
  dest->joystick_2_fire_2 = src->joystick_2_fire_2;
  dest->joystick_2_fire_3 = src->joystick_2_fire_3;
  dest->joystick_2_fire_4 = src->joystick_2_fire_4;
  dest->joystick_2_fire_5 = src->joystick_2_fire_5;
  dest->joystick_2_fire_6 = src->joystick_2_fire_6;
  dest->joystick_2_fire_7 = src->joystick_2_fire_7;
  dest->joystick_2_fire_8 = src->joystick_2_fire_8;
  dest->joystick_2_fire_9 = src->joystick_2_fire_9;
  dest->joystick_2_output = src->joystick_2_output;
  dest->joystick_keyboard_down = src->joystick_keyboard_down;
  dest->joystick_keyboard_fire = src->joystick_keyboard_fire;
  dest->joystick_keyboard_left = src->joystick_keyboard_left;
  dest->joystick_keyboard_output = src->joystick_keyboard_output;
  dest->joystick_keyboard_right = src->joystick_keyboard_right;
  dest->joystick_keyboard_up = src->joystick_keyboard_up;
  dest->kempston_mouse = src->kempston_mouse;
  dest->late_timings = src->late_timings;
  dest->mdr_file = NULL;
  if( src->mdr_file ) {
    dest->mdr_file = utils_safe_strdup( src->mdr_file );
  }
  dest->mdr_file2 = NULL;
  if( src->mdr_file2 ) {
    dest->mdr_file2 = utils_safe_strdup( src->mdr_file2 );
  }
  dest->mdr_file3 = NULL;
  if( src->mdr_file3 ) {
    dest->mdr_file3 = utils_safe_strdup( src->mdr_file3 );
  }
  dest->mdr_file4 = NULL;
  if( src->mdr_file4 ) {
    dest->mdr_file4 = utils_safe_strdup( src->mdr_file4 );
  }
  dest->mdr_file5 = NULL;
  if( src->mdr_file5 ) {
    dest->mdr_file5 = utils_safe_strdup( src->mdr_file5 );
  }
  dest->mdr_file6 = NULL;
  if( src->mdr_file6 ) {
    dest->mdr_file6 = utils_safe_strdup( src->mdr_file6 );
  }
  dest->mdr_file7 = NULL;
  if( src->mdr_file7 ) {
    dest->mdr_file7 = utils_safe_strdup( src->mdr_file7 );
  }
  dest->mdr_file8 = NULL;
  if( src->mdr_file8 ) {
    dest->mdr_file8 = utils_safe_strdup( src->mdr_file8 );
  }
  dest->mdr_len = src->mdr_len;
  dest->mdr_random_len = src->mdr_random_len;
  dest->melodik = src->melodik;
  dest->mouse_swap_buttons = src->mouse_swap_buttons;
  dest->movie_compr = NULL;
  if( src->movie_compr ) {
    dest->movie_compr = utils_safe_strdup( src->movie_compr );
  }
  dest->movie_start = NULL;
  if( src->movie_start ) {
    dest->movie_start = utils_safe_strdup( src->movie_start );
  }
  dest->movie_stop_after_rzx = src->movie_stop_after_rzx;
  dest->opus = src->opus;
  dest->opusdisk_file = NULL;
  if( src->opusdisk_file ) {
    dest->opusdisk_file = utils_safe_strdup( src->opusdisk_file );
  }
  dest->pal_tv2x = src->pal_tv2x;
  dest->playback_file = NULL;
  if( src->playback_file ) {
    dest->playback_file = utils_safe_strdup( src->playback_file );
  }
  dest->plus3_detect_speedlock = src->plus3_detect_speedlock;
  dest->plus3disk_file = NULL;
  if( src->plus3disk_file ) {
    dest->plus3disk_file = utils_safe_strdup( src->plus3disk_file );
  }
  dest->plusd = src->plusd;
  dest->plusddisk_file = NULL;
  if( src->plusddisk_file ) {
    dest->plusddisk_file = utils_safe_strdup( src->plusddisk_file );
  }
  dest->preferences_tab = src->preferences_tab;
  dest->printer = src->printer;
  dest->printer_graphics_filename = NULL;
  if( src->printer_graphics_filename ) {
    dest->printer_graphics_filename = utils_safe_strdup( src->printer_graphics_filename );
  }
  dest->printer_text_filename = NULL;
  if( src->printer_text_filename ) {
    dest->printer_text_filename = utils_safe_strdup( src->printer_text_filename );
  }
  dest->raw_s_net = src->raw_s_net;
  if( src->cocoa && src->cocoa->recent_snapshots ) {
    dest->cocoa->recent_snapshots = [NSMutableArray arrayWithArray:src->cocoa->recent_snapshots];
    if( !dest->cocoa->recent_snapshots ) { settings_free( dest ); }
  } else {
    dest->cocoa->recent_snapshots = [NSMutableArray arrayWithCapacity:NUM_RECENT_ITEMS];
  }
  dest->record_file = NULL;
  if( src->record_file ) {
    dest->record_file = utils_safe_strdup( src->record_file );
  }
  dest->recreated_spectrum = src->recreated_spectrum;
  dest->rom_128_0 = NULL;
  if( src->rom_128_0 ) {
    dest->rom_128_0 = utils_safe_strdup( src->rom_128_0 );
  }
  dest->rom_128_1 = NULL;
  if( src->rom_128_1 ) {
    dest->rom_128_1 = utils_safe_strdup( src->rom_128_1 );
  }
  dest->rom_16_0 = NULL;
  if( src->rom_16_0 ) {
    dest->rom_16_0 = utils_safe_strdup( src->rom_16_0 );
  }
  dest->rom_2048_0 = NULL;
  if( src->rom_2048_0 ) {
    dest->rom_2048_0 = utils_safe_strdup( src->rom_2048_0 );
  }
  dest->rom_2068_0 = NULL;
  if( src->rom_2068_0 ) {
    dest->rom_2068_0 = utils_safe_strdup( src->rom_2068_0 );
  }
  dest->rom_2068_1 = NULL;
  if( src->rom_2068_1 ) {
    dest->rom_2068_1 = utils_safe_strdup( src->rom_2068_1 );
  }
  dest->rom_48_0 = NULL;
  if( src->rom_48_0 ) {
    dest->rom_48_0 = utils_safe_strdup( src->rom_48_0 );
  }
  dest->rom_beta128 = NULL;
  if( src->rom_beta128 ) {
    dest->rom_beta128 = utils_safe_strdup( src->rom_beta128 );
  }
  dest->rom_didaktik80 = NULL;
  if( src->rom_didaktik80 ) {
    dest->rom_didaktik80 = utils_safe_strdup( src->rom_didaktik80 );
  }
  dest->rom_disciple = NULL;
  if( src->rom_disciple ) {
    dest->rom_disciple = utils_safe_strdup( src->rom_disciple );
  }
  dest->rom_interface1 = NULL;
  if( src->rom_interface1 ) {
    dest->rom_interface1 = utils_safe_strdup( src->rom_interface1 );
  }
  dest->rom_opus = NULL;
  if( src->rom_opus ) {
    dest->rom_opus = utils_safe_strdup( src->rom_opus );
  }
  dest->rom_pentagon1024_0 = NULL;
  if( src->rom_pentagon1024_0 ) {
    dest->rom_pentagon1024_0 = utils_safe_strdup( src->rom_pentagon1024_0 );
  }
  dest->rom_pentagon1024_1 = NULL;
  if( src->rom_pentagon1024_1 ) {
    dest->rom_pentagon1024_1 = utils_safe_strdup( src->rom_pentagon1024_1 );
  }
  dest->rom_pentagon1024_2 = NULL;
  if( src->rom_pentagon1024_2 ) {
    dest->rom_pentagon1024_2 = utils_safe_strdup( src->rom_pentagon1024_2 );
  }
  dest->rom_pentagon1024_3 = NULL;
  if( src->rom_pentagon1024_3 ) {
    dest->rom_pentagon1024_3 = utils_safe_strdup( src->rom_pentagon1024_3 );
  }
  dest->rom_pentagon512_0 = NULL;
  if( src->rom_pentagon512_0 ) {
    dest->rom_pentagon512_0 = utils_safe_strdup( src->rom_pentagon512_0 );
  }
  dest->rom_pentagon512_1 = NULL;
  if( src->rom_pentagon512_1 ) {
    dest->rom_pentagon512_1 = utils_safe_strdup( src->rom_pentagon512_1 );
  }
  dest->rom_pentagon512_2 = NULL;
  if( src->rom_pentagon512_2 ) {
    dest->rom_pentagon512_2 = utils_safe_strdup( src->rom_pentagon512_2 );
  }
  dest->rom_pentagon512_3 = NULL;
  if( src->rom_pentagon512_3 ) {
    dest->rom_pentagon512_3 = utils_safe_strdup( src->rom_pentagon512_3 );
  }
  dest->rom_pentagon_0 = NULL;
  if( src->rom_pentagon_0 ) {
    dest->rom_pentagon_0 = utils_safe_strdup( src->rom_pentagon_0 );
  }
  dest->rom_pentagon_1 = NULL;
  if( src->rom_pentagon_1 ) {
    dest->rom_pentagon_1 = utils_safe_strdup( src->rom_pentagon_1 );
  }
  dest->rom_pentagon_2 = NULL;
  if( src->rom_pentagon_2 ) {
    dest->rom_pentagon_2 = utils_safe_strdup( src->rom_pentagon_2 );
  }
  dest->rom_plus2_0 = NULL;
  if( src->rom_plus2_0 ) {
    dest->rom_plus2_0 = utils_safe_strdup( src->rom_plus2_0 );
  }
  dest->rom_plus2_1 = NULL;
  if( src->rom_plus2_1 ) {
    dest->rom_plus2_1 = utils_safe_strdup( src->rom_plus2_1 );
  }
  dest->rom_plus2a_0 = NULL;
  if( src->rom_plus2a_0 ) {
    dest->rom_plus2a_0 = utils_safe_strdup( src->rom_plus2a_0 );
  }
  dest->rom_plus2a_1 = NULL;
  if( src->rom_plus2a_1 ) {
    dest->rom_plus2a_1 = utils_safe_strdup( src->rom_plus2a_1 );
  }
  dest->rom_plus2a_2 = NULL;
  if( src->rom_plus2a_2 ) {
    dest->rom_plus2a_2 = utils_safe_strdup( src->rom_plus2a_2 );
  }
  dest->rom_plus2a_3 = NULL;
  if( src->rom_plus2a_3 ) {
    dest->rom_plus2a_3 = utils_safe_strdup( src->rom_plus2a_3 );
  }
  dest->rom_plus3_0 = NULL;
  if( src->rom_plus3_0 ) {
    dest->rom_plus3_0 = utils_safe_strdup( src->rom_plus3_0 );
  }
  dest->rom_plus3_1 = NULL;
  if( src->rom_plus3_1 ) {
    dest->rom_plus3_1 = utils_safe_strdup( src->rom_plus3_1 );
  }
  dest->rom_plus3_2 = NULL;
  if( src->rom_plus3_2 ) {
    dest->rom_plus3_2 = utils_safe_strdup( src->rom_plus3_2 );
  }
  dest->rom_plus3_3 = NULL;
  if( src->rom_plus3_3 ) {
    dest->rom_plus3_3 = utils_safe_strdup( src->rom_plus3_3 );
  }
  dest->rom_plus3e_0 = NULL;
  if( src->rom_plus3e_0 ) {
    dest->rom_plus3e_0 = utils_safe_strdup( src->rom_plus3e_0 );
  }
  dest->rom_plus3e_1 = NULL;
  if( src->rom_plus3e_1 ) {
    dest->rom_plus3e_1 = utils_safe_strdup( src->rom_plus3e_1 );
  }
  dest->rom_plus3e_2 = NULL;
  if( src->rom_plus3e_2 ) {
    dest->rom_plus3e_2 = utils_safe_strdup( src->rom_plus3e_2 );
  }
  dest->rom_plus3e_3 = NULL;
  if( src->rom_plus3e_3 ) {
    dest->rom_plus3e_3 = utils_safe_strdup( src->rom_plus3e_3 );
  }
  dest->rom_plusd = NULL;
  if( src->rom_plusd ) {
    dest->rom_plusd = utils_safe_strdup( src->rom_plusd );
  }
  dest->rom_scorpion_0 = NULL;
  if( src->rom_scorpion_0 ) {
    dest->rom_scorpion_0 = utils_safe_strdup( src->rom_scorpion_0 );
  }
  dest->rom_scorpion_1 = NULL;
  if( src->rom_scorpion_1 ) {
    dest->rom_scorpion_1 = utils_safe_strdup( src->rom_scorpion_1 );
  }
  dest->rom_scorpion_2 = NULL;
  if( src->rom_scorpion_2 ) {
    dest->rom_scorpion_2 = utils_safe_strdup( src->rom_scorpion_2 );
  }
  dest->rom_scorpion_3 = NULL;
  if( src->rom_scorpion_3 ) {
    dest->rom_scorpion_3 = utils_safe_strdup( src->rom_scorpion_3 );
  }
  dest->rom_se_0 = NULL;
  if( src->rom_se_0 ) {
    dest->rom_se_0 = utils_safe_strdup( src->rom_se_0 );
  }
  dest->rom_se_1 = NULL;
  if( src->rom_se_1 ) {
    dest->rom_se_1 = utils_safe_strdup( src->rom_se_1 );
  }
  dest->rom_speccyboot = NULL;
  if( src->rom_speccyboot ) {
    dest->rom_speccyboot = utils_safe_strdup( src->rom_speccyboot );
  }
  dest->rom_ts2068_0 = NULL;
  if( src->rom_ts2068_0 ) {
    dest->rom_ts2068_0 = utils_safe_strdup( src->rom_ts2068_0 );
  }
  dest->rom_ts2068_1 = NULL;
  if( src->rom_ts2068_1 ) {
    dest->rom_ts2068_1 = utils_safe_strdup( src->rom_ts2068_1 );
  }
  dest->rom_usource = NULL;
  if( src->rom_usource ) {
    dest->rom_usource = utils_safe_strdup( src->rom_usource );
  }
  dest->rs232_handshake = src->rs232_handshake;
  dest->rs232_rx = NULL;
  if( src->rs232_rx ) {
    dest->rs232_rx = utils_safe_strdup( src->rs232_rx );
  }
  dest->rs232_tx = NULL;
  if( src->rs232_tx ) {
    dest->rs232_tx = utils_safe_strdup( src->rs232_tx );
  }
  dest->rzx_autosaves = src->rzx_autosaves;
  dest->rzx_compression = src->rzx_compression;
  dest->simpleide_active = src->simpleide_active;
  dest->simpleide_master_file = NULL;
  if( src->simpleide_master_file ) {
    dest->simpleide_master_file = utils_safe_strdup( src->simpleide_master_file );
  }
  dest->simpleide_slave_file = NULL;
  if( src->simpleide_slave_file ) {
    dest->simpleide_slave_file = utils_safe_strdup( src->simpleide_slave_file );
  }
  dest->slt_traps = src->slt_traps;
  dest->snapshot = NULL;
  if( src->snapshot ) {
    dest->snapshot = utils_safe_strdup( src->snapshot );
  }
  dest->snet = NULL;
  if( src->snet ) {
    dest->snet = utils_safe_strdup( src->snet );
  }
  dest->sound = src->sound;
  dest->sound_device = NULL;
  if( src->sound_device ) {
    dest->sound_device = utils_safe_strdup( src->sound_device );
  }
  dest->sound_force_8bit = src->sound_force_8bit;
  dest->sound_freq = src->sound_freq;
  dest->sound_load = src->sound_load;
  dest->speaker_type = NULL;
  if( src->speaker_type ) {
    dest->speaker_type = utils_safe_strdup( src->speaker_type );
  }
  dest->speccyboot = src->speccyboot;
  dest->speccyboot_tap = NULL;
  if( src->speccyboot_tap ) {
    dest->speccyboot_tap = utils_safe_strdup( src->speccyboot_tap );
  }
  dest->specdrum = src->specdrum;
  dest->spectranet = src->spectranet;
  dest->spectranet_disable = src->spectranet_disable;
  dest->start_machine = NULL;
  if( src->start_machine ) {
    dest->start_machine = utils_safe_strdup( src->start_machine );
  }
  dest->start_scaler_mode = NULL;
  if( src->start_scaler_mode ) {
    dest->start_scaler_mode = utils_safe_strdup( src->start_scaler_mode );
  }
  dest->statusbar = src->statusbar;
  dest->stereo_ay = NULL;
  if( src->stereo_ay ) {
    dest->stereo_ay = utils_safe_strdup( src->stereo_ay );
  }
  dest->strict_aspect_hint = src->strict_aspect_hint;
  dest->svga_modes = NULL;
  if( src->svga_modes ) {
    dest->svga_modes = utils_safe_strdup( src->svga_modes );
  }
  dest->tape_file = NULL;
  if( src->tape_file ) {
    dest->tape_file = utils_safe_strdup( src->tape_file );
  }
  dest->tape_traps = src->tape_traps;
  dest->unittests = src->unittests;
  dest->usource = src->usource;
  dest->volume_ay = src->volume_ay;
  dest->volume_beeper = src->volume_beeper;
  dest->volume_specdrum = src->volume_specdrum;
  dest->writable_roms = src->writable_roms;
  dest->z80_is_cmos = src->z80_is_cmos;
  dest->zxatasp_active = src->zxatasp_active;
  dest->zxatasp_master_file = NULL;
  if( src->zxatasp_master_file ) {
    dest->zxatasp_master_file = utils_safe_strdup( src->zxatasp_master_file );
  }
  dest->zxatasp_slave_file = NULL;
  if( src->zxatasp_slave_file ) {
    dest->zxatasp_slave_file = utils_safe_strdup( src->zxatasp_slave_file );
  }
  dest->zxatasp_upload = src->zxatasp_upload;
  dest->zxatasp_wp = src->zxatasp_wp;
  dest->zxcf_active = src->zxcf_active;
  dest->zxcf_pri_file = NULL;
  if( src->zxcf_pri_file ) {
    dest->zxcf_pri_file = utils_safe_strdup( src->zxcf_pri_file );
  }
  dest->zxcf_upload = src->zxcf_upload;
  dest->zxprinter = src->zxprinter;
}

int
settings_free( settings_info *settings )
{
  if( settings->betadisk_file ) {
    free( settings->betadisk_file );
    settings->betadisk_file = NULL;
  }
  if( settings->dck_file ) {
    free( settings->dck_file );
    settings->dck_file = NULL;
  }
  if( settings->debugger_command ) {
    free( settings->debugger_command );
    settings->debugger_command = NULL;
  }
  if( settings->didaktik80disk_file ) {
    free( settings->didaktik80disk_file );
    settings->didaktik80disk_file = NULL;
  }
  if( settings->discipledisk_file ) {
    free( settings->discipledisk_file );
    settings->discipledisk_file = NULL;
  }
  if( settings->disk_try_merge ) {
    free( settings->disk_try_merge );
    settings->disk_try_merge = NULL;
  }
  if( settings->divide_master_file ) {
    free( settings->divide_master_file );
    settings->divide_master_file = NULL;
  }
  if( settings->divide_slave_file ) {
    free( settings->divide_slave_file );
    settings->divide_slave_file = NULL;
  }
  if( settings->drive_beta128a_type ) {
    free( settings->drive_beta128a_type );
    settings->drive_beta128a_type = NULL;
  }
  if( settings->drive_beta128b_type ) {
    free( settings->drive_beta128b_type );
    settings->drive_beta128b_type = NULL;
  }
  if( settings->drive_beta128c_type ) {
    free( settings->drive_beta128c_type );
    settings->drive_beta128c_type = NULL;
  }
  if( settings->drive_beta128d_type ) {
    free( settings->drive_beta128d_type );
    settings->drive_beta128d_type = NULL;
  }
  if( settings->drive_didaktik80a_type ) {
    free( settings->drive_didaktik80a_type );
    settings->drive_didaktik80a_type = NULL;
  }
  if( settings->drive_didaktik80b_type ) {
    free( settings->drive_didaktik80b_type );
    settings->drive_didaktik80b_type = NULL;
  }
  if( settings->drive_disciple1_type ) {
    free( settings->drive_disciple1_type );
    settings->drive_disciple1_type = NULL;
  }
  if( settings->drive_disciple2_type ) {
    free( settings->drive_disciple2_type );
    settings->drive_disciple2_type = NULL;
  }
  if( settings->drive_opus1_type ) {
    free( settings->drive_opus1_type );
    settings->drive_opus1_type = NULL;
  }
  if( settings->drive_opus2_type ) {
    free( settings->drive_opus2_type );
    settings->drive_opus2_type = NULL;
  }
  if( settings->drive_plus3a_type ) {
    free( settings->drive_plus3a_type );
    settings->drive_plus3a_type = NULL;
  }
  if( settings->drive_plus3b_type ) {
    free( settings->drive_plus3b_type );
    settings->drive_plus3b_type = NULL;
  }
  if( settings->drive_plusd1_type ) {
    free( settings->drive_plusd1_type );
    settings->drive_plusd1_type = NULL;
  }
  if( settings->drive_plusd2_type ) {
    free( settings->drive_plusd2_type );
    settings->drive_plusd2_type = NULL;
  }
  if( settings->if2_file ) {
    free( settings->if2_file );
    settings->if2_file = NULL;
  }
  if( settings->joystick_1 ) {
    free( settings->joystick_1 );
    settings->joystick_1 = NULL;
  }
  if( settings->joystick_2 ) {
    free( settings->joystick_2 );
    settings->joystick_2 = NULL;
  }
  if( settings->mdr_file ) {
    free( settings->mdr_file );
    settings->mdr_file = NULL;
  }
  if( settings->mdr_file2 ) {
    free( settings->mdr_file2 );
    settings->mdr_file2 = NULL;
  }
  if( settings->mdr_file3 ) {
    free( settings->mdr_file3 );
    settings->mdr_file3 = NULL;
  }
  if( settings->mdr_file4 ) {
    free( settings->mdr_file4 );
    settings->mdr_file4 = NULL;
  }
  if( settings->mdr_file5 ) {
    free( settings->mdr_file5 );
    settings->mdr_file5 = NULL;
  }
  if( settings->mdr_file6 ) {
    free( settings->mdr_file6 );
    settings->mdr_file6 = NULL;
  }
  if( settings->mdr_file7 ) {
    free( settings->mdr_file7 );
    settings->mdr_file7 = NULL;
  }
  if( settings->mdr_file8 ) {
    free( settings->mdr_file8 );
    settings->mdr_file8 = NULL;
  }
  if( settings->movie_compr ) {
    free( settings->movie_compr );
    settings->movie_compr = NULL;
  }
  if( settings->movie_start ) {
    free( settings->movie_start );
    settings->movie_start = NULL;
  }
  if( settings->opusdisk_file ) {
    free( settings->opusdisk_file );
    settings->opusdisk_file = NULL;
  }
  if( settings->playback_file ) {
    free( settings->playback_file );
    settings->playback_file = NULL;
  }
  if( settings->plus3disk_file ) {
    free( settings->plus3disk_file );
    settings->plus3disk_file = NULL;
  }
  if( settings->plusddisk_file ) {
    free( settings->plusddisk_file );
    settings->plusddisk_file = NULL;
  }
  if( settings->printer_graphics_filename ) {
    free( settings->printer_graphics_filename );
    settings->printer_graphics_filename = NULL;
  }
  if( settings->printer_text_filename ) {
    free( settings->printer_text_filename );
    settings->printer_text_filename = NULL;
  }
  if( settings->cocoa && settings->cocoa->recent_snapshots ) {
    [settings->cocoa->recent_snapshots release];
    settings->cocoa->recent_snapshots = nil;
  }
  if( settings->record_file ) {
    free( settings->record_file );
    settings->record_file = NULL;
  }
  if( settings->rom_128_0 ) {
    free( settings->rom_128_0 );
    settings->rom_128_0 = NULL;
  }
  if( settings->rom_128_1 ) {
    free( settings->rom_128_1 );
    settings->rom_128_1 = NULL;
  }
  if( settings->rom_16_0 ) {
    free( settings->rom_16_0 );
    settings->rom_16_0 = NULL;
  }
  if( settings->rom_2048_0 ) {
    free( settings->rom_2048_0 );
    settings->rom_2048_0 = NULL;
  }
  if( settings->rom_2068_0 ) {
    free( settings->rom_2068_0 );
    settings->rom_2068_0 = NULL;
  }
  if( settings->rom_2068_1 ) {
    free( settings->rom_2068_1 );
    settings->rom_2068_1 = NULL;
  }
  if( settings->rom_48_0 ) {
    free( settings->rom_48_0 );
    settings->rom_48_0 = NULL;
  }
  if( settings->rom_beta128 ) {
    free( settings->rom_beta128 );
    settings->rom_beta128 = NULL;
  }
  if( settings->rom_didaktik80 ) {
    free( settings->rom_didaktik80 );
    settings->rom_didaktik80 = NULL;
  }
  if( settings->rom_disciple ) {
    free( settings->rom_disciple );
    settings->rom_disciple = NULL;
  }
  if( settings->rom_interface1 ) {
    free( settings->rom_interface1 );
    settings->rom_interface1 = NULL;
  }
  if( settings->rom_opus ) {
    free( settings->rom_opus );
    settings->rom_opus = NULL;
  }
  if( settings->rom_pentagon1024_0 ) {
    free( settings->rom_pentagon1024_0 );
    settings->rom_pentagon1024_0 = NULL;
  }
  if( settings->rom_pentagon1024_1 ) {
    free( settings->rom_pentagon1024_1 );
    settings->rom_pentagon1024_1 = NULL;
  }
  if( settings->rom_pentagon1024_2 ) {
    free( settings->rom_pentagon1024_2 );
    settings->rom_pentagon1024_2 = NULL;
  }
  if( settings->rom_pentagon1024_3 ) {
    free( settings->rom_pentagon1024_3 );
    settings->rom_pentagon1024_3 = NULL;
  }
  if( settings->rom_pentagon512_0 ) {
    free( settings->rom_pentagon512_0 );
    settings->rom_pentagon512_0 = NULL;
  }
  if( settings->rom_pentagon512_1 ) {
    free( settings->rom_pentagon512_1 );
    settings->rom_pentagon512_1 = NULL;
  }
  if( settings->rom_pentagon512_2 ) {
    free( settings->rom_pentagon512_2 );
    settings->rom_pentagon512_2 = NULL;
  }
  if( settings->rom_pentagon512_3 ) {
    free( settings->rom_pentagon512_3 );
    settings->rom_pentagon512_3 = NULL;
  }
  if( settings->rom_pentagon_0 ) {
    free( settings->rom_pentagon_0 );
    settings->rom_pentagon_0 = NULL;
  }
  if( settings->rom_pentagon_1 ) {
    free( settings->rom_pentagon_1 );
    settings->rom_pentagon_1 = NULL;
  }
  if( settings->rom_pentagon_2 ) {
    free( settings->rom_pentagon_2 );
    settings->rom_pentagon_2 = NULL;
  }
  if( settings->rom_plus2_0 ) {
    free( settings->rom_plus2_0 );
    settings->rom_plus2_0 = NULL;
  }
  if( settings->rom_plus2_1 ) {
    free( settings->rom_plus2_1 );
    settings->rom_plus2_1 = NULL;
  }
  if( settings->rom_plus2a_0 ) {
    free( settings->rom_plus2a_0 );
    settings->rom_plus2a_0 = NULL;
  }
  if( settings->rom_plus2a_1 ) {
    free( settings->rom_plus2a_1 );
    settings->rom_plus2a_1 = NULL;
  }
  if( settings->rom_plus2a_2 ) {
    free( settings->rom_plus2a_2 );
    settings->rom_plus2a_2 = NULL;
  }
  if( settings->rom_plus2a_3 ) {
    free( settings->rom_plus2a_3 );
    settings->rom_plus2a_3 = NULL;
  }
  if( settings->rom_plus3_0 ) {
    free( settings->rom_plus3_0 );
    settings->rom_plus3_0 = NULL;
  }
  if( settings->rom_plus3_1 ) {
    free( settings->rom_plus3_1 );
    settings->rom_plus3_1 = NULL;
  }
  if( settings->rom_plus3_2 ) {
    free( settings->rom_plus3_2 );
    settings->rom_plus3_2 = NULL;
  }
  if( settings->rom_plus3_3 ) {
    free( settings->rom_plus3_3 );
    settings->rom_plus3_3 = NULL;
  }
  if( settings->rom_plus3e_0 ) {
    free( settings->rom_plus3e_0 );
    settings->rom_plus3e_0 = NULL;
  }
  if( settings->rom_plus3e_1 ) {
    free( settings->rom_plus3e_1 );
    settings->rom_plus3e_1 = NULL;
  }
  if( settings->rom_plus3e_2 ) {
    free( settings->rom_plus3e_2 );
    settings->rom_plus3e_2 = NULL;
  }
  if( settings->rom_plus3e_3 ) {
    free( settings->rom_plus3e_3 );
    settings->rom_plus3e_3 = NULL;
  }
  if( settings->rom_plusd ) {
    free( settings->rom_plusd );
    settings->rom_plusd = NULL;
  }
  if( settings->rom_scorpion_0 ) {
    free( settings->rom_scorpion_0 );
    settings->rom_scorpion_0 = NULL;
  }
  if( settings->rom_scorpion_1 ) {
    free( settings->rom_scorpion_1 );
    settings->rom_scorpion_1 = NULL;
  }
  if( settings->rom_scorpion_2 ) {
    free( settings->rom_scorpion_2 );
    settings->rom_scorpion_2 = NULL;
  }
  if( settings->rom_scorpion_3 ) {
    free( settings->rom_scorpion_3 );
    settings->rom_scorpion_3 = NULL;
  }
  if( settings->rom_se_0 ) {
    free( settings->rom_se_0 );
    settings->rom_se_0 = NULL;
  }
  if( settings->rom_se_1 ) {
    free( settings->rom_se_1 );
    settings->rom_se_1 = NULL;
  }
  if( settings->rom_speccyboot ) {
    free( settings->rom_speccyboot );
    settings->rom_speccyboot = NULL;
  }
  if( settings->rom_ts2068_0 ) {
    free( settings->rom_ts2068_0 );
    settings->rom_ts2068_0 = NULL;
  }
  if( settings->rom_ts2068_1 ) {
    free( settings->rom_ts2068_1 );
    settings->rom_ts2068_1 = NULL;
  }
  if( settings->rom_usource ) {
    free( settings->rom_usource );
    settings->rom_usource = NULL;
  }
  if( settings->rs232_rx ) {
    free( settings->rs232_rx );
    settings->rs232_rx = NULL;
  }
  if( settings->rs232_tx ) {
    free( settings->rs232_tx );
    settings->rs232_tx = NULL;
  }
  if( settings->simpleide_master_file ) {
    free( settings->simpleide_master_file );
    settings->simpleide_master_file = NULL;
  }
  if( settings->simpleide_slave_file ) {
    free( settings->simpleide_slave_file );
    settings->simpleide_slave_file = NULL;
  }
  if( settings->snapshot ) {
    free( settings->snapshot );
    settings->snapshot = NULL;
  }
  if( settings->snet ) {
    free( settings->snet );
    settings->snet = NULL;
  }
  if( settings->sound_device ) {
    free( settings->sound_device );
    settings->sound_device = NULL;
  }
  if( settings->speaker_type ) {
    free( settings->speaker_type );
    settings->speaker_type = NULL;
  }
  if( settings->speccyboot_tap ) {
    free( settings->speccyboot_tap );
    settings->speccyboot_tap = NULL;
  }
  if( settings->start_machine ) {
    free( settings->start_machine );
    settings->start_machine = NULL;
  }
  if( settings->start_scaler_mode ) {
    free( settings->start_scaler_mode );
    settings->start_scaler_mode = NULL;
  }
  if( settings->stereo_ay ) {
    free( settings->stereo_ay );
    settings->stereo_ay = NULL;
  }
  if( settings->svga_modes ) {
    free( settings->svga_modes );
    settings->svga_modes = NULL;
  }
  if( settings->tape_file ) {
    free( settings->tape_file );
    settings->tape_file = NULL;
  }
  if( settings->zxatasp_master_file ) {
    free( settings->zxatasp_master_file );
    settings->zxatasp_master_file = NULL;
  }
  if( settings->zxatasp_slave_file ) {
    free( settings->zxatasp_slave_file );
    settings->zxatasp_slave_file = NULL;
  }
  if( settings->zxcf_pri_file ) {
    free( settings->zxcf_pri_file );
    settings->zxcf_pri_file = NULL;
  }

  if( settings->cocoa ) free( settings->cocoa );
  settings->cocoa = NULL;

  return 0;
}

/* Copy one settings object to another */
void settings_copy( settings_info *dest, settings_info *src )
{
  settings_defaults( dest );
  settings_copy_internal( dest, src );
}

char **
settings_get_rom_setting( settings_info *settings, size_t which,
			  int is_peripheral )
{
  if( !is_peripheral ) {
    switch( which ) {
    case  0: return &( settings->rom_16_0     );
    case  1: return &( settings->rom_48_0     );
    case  2: return &( settings->rom_128_0    );
    case  3: return &( settings->rom_128_1    );
    case  4: return &( settings->rom_plus2_0  );
    case  5: return &( settings->rom_plus2_1  );
    case  6: return &( settings->rom_plus2a_0 );
    case  7: return &( settings->rom_plus2a_1 );
    case  8: return &( settings->rom_plus2a_2 );
    case  9: return &( settings->rom_plus2a_3 );
    case 10: return &( settings->rom_plus3_0  );
    case 11: return &( settings->rom_plus3_1  );
    case 12: return &( settings->rom_plus3_2  );
    case 13: return &( settings->rom_plus3_3  );
    case 14: return &( settings->rom_plus3e_0 );
    case 15: return &( settings->rom_plus3e_1 );
    case 16: return &( settings->rom_plus3e_2 );
    case 17: return &( settings->rom_plus3e_3 );
    case 18: return &( settings->rom_2048_0   );
    case 19: return &( settings->rom_2068_0   );
    case 20: return &( settings->rom_2068_1   );
    case 21: return &( settings->rom_ts2068_0 );
    case 22: return &( settings->rom_ts2068_1 );
    case 23: return &( settings->rom_pentagon_0 );
    case 24: return &( settings->rom_pentagon_1 );
    case 25: return &( settings->rom_pentagon_2 );
    case 26: return &( settings->rom_pentagon512_0 );
    case 27: return &( settings->rom_pentagon512_1 );
    case 28: return &( settings->rom_pentagon512_2 );
    case 29: return &( settings->rom_pentagon512_3 );
    case 30: return &( settings->rom_pentagon1024_0 );
    case 31: return &( settings->rom_pentagon1024_1 );
    case 32: return &( settings->rom_pentagon1024_2 );
    case 33: return &( settings->rom_pentagon1024_3 );
    case 34: return &( settings->rom_scorpion_0 );
    case 35: return &( settings->rom_scorpion_1 );
    case 36: return &( settings->rom_scorpion_2 );
    case 37: return &( settings->rom_scorpion_3 );
    case 38: return &( settings->rom_se_0 );
    case 39: return &( settings->rom_se_1 );
    default: return NULL;
    }
  } else {
    switch( which ) {
    case  0: return &( settings->rom_interface1 );
    case  1: return &( settings->rom_beta128 );
    case  2: return &( settings->rom_plusd );
    case  3: return &( settings->rom_didaktik80 );
    case  4: return &( settings->rom_disciple );
    case  5: return &( settings->rom_opus );
    case  6: return &( settings->rom_speccyboot );
    case  7: return &( settings->rom_usource );
    default: return NULL;
    }
  }
}

void
settings_set_string( char **string_setting, const char *value )
{
  /* No need to do anything if the two strings are in fact the
     same pointer */
  if( *string_setting == value ) return;

  if( *string_setting ) libspectrum_free( *string_setting );
  *string_setting = utils_safe_strdup( value );
}

/* Comparison function to sort the machineroms array */
NSInteger
machineroms_compare( id dict1, id dict2, void *context )
{
  NSMutableDictionary *roms1 = (NSMutableDictionary*)dict1;
  NSMutableDictionary *roms2 = (NSMutableDictionary*)dict2;
  int index1 = machine_get_index( [[roms1 valueForKey:@"machine"] machineType] );
  int index2 = machine_get_index( [[roms2 valueForKey:@"machine"] machineType] );
  NSInteger retval = NSOrderedSame;
  if( index1 > index2 ) {
    retval = NSOrderedDescending;
  } else if( index1 < index2 ) {
    retval = NSOrderedAscending;
  }

  return retval;
}

/* Fill a NSMutableArray with rom information suitable for use with Cocoa
   bindings */
NSMutableArray*
settings_set_rom_array( settings_info *settings )
{
  NSMutableDictionary *roms;
  NSMutableArray *machineroms = [NSMutableArray arrayWithCapacity:machine_count+1];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("128")], @"machine",
    @(settings->rom_128_0), @"rom0",
    @(settings_default.rom_128_0), @"default_rom0",
    @(settings->rom_128_1), @"rom1",
    @(settings_default.rom_128_1), @"default_rom1",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("16")], @"machine",
    @(settings->rom_16_0), @"rom0",
    @(settings_default.rom_16_0), @"default_rom0",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("2048")], @"machine",
    @(settings->rom_2048_0), @"rom0",
    @(settings_default.rom_2048_0), @"default_rom0",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("2068")], @"machine",
    @(settings->rom_2068_0), @"rom0",
    @(settings_default.rom_2068_0), @"default_rom0",
    @(settings->rom_2068_1), @"rom1",
    @(settings_default.rom_2068_1), @"default_rom1",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("48")], @"machine",
    @(settings->rom_48_0), @"rom0",
    @(settings_default.rom_48_0), @"default_rom0",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("pentagon")], @"machine",
    @(settings->rom_pentagon_0), @"rom0",
    @(settings_default.rom_pentagon_0), @"default_rom0",
    @(settings->rom_pentagon_1), @"rom1",
    @(settings_default.rom_pentagon_1), @"default_rom1",
    @(settings->rom_pentagon_2), @"rom2",
    @(settings_default.rom_pentagon_2), @"default_rom2",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("pentagon1024")], @"machine",
    @(settings->rom_pentagon1024_0), @"rom0",
    @(settings_default.rom_pentagon1024_0), @"default_rom0",
    @(settings->rom_pentagon1024_1), @"rom1",
    @(settings_default.rom_pentagon1024_1), @"default_rom1",
    @(settings->rom_pentagon1024_2), @"rom2",
    @(settings_default.rom_pentagon1024_2), @"default_rom2",
    @(settings->rom_pentagon1024_3), @"rom3",
    @(settings_default.rom_pentagon1024_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("pentagon512")], @"machine",
    @(settings->rom_pentagon512_0), @"rom0",
    @(settings_default.rom_pentagon512_0), @"default_rom0",
    @(settings->rom_pentagon512_1), @"rom1",
    @(settings_default.rom_pentagon512_1), @"default_rom1",
    @(settings->rom_pentagon512_2), @"rom2",
    @(settings_default.rom_pentagon512_2), @"default_rom2",
    @(settings->rom_pentagon512_3), @"rom3",
    @(settings_default.rom_pentagon512_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("plus2")], @"machine",
    @(settings->rom_plus2_0), @"rom0",
    @(settings_default.rom_plus2_0), @"default_rom0",
    @(settings->rom_plus2_1), @"rom1",
    @(settings_default.rom_plus2_1), @"default_rom1",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("plus2a")], @"machine",
    @(settings->rom_plus2a_0), @"rom0",
    @(settings_default.rom_plus2a_0), @"default_rom0",
    @(settings->rom_plus2a_1), @"rom1",
    @(settings_default.rom_plus2a_1), @"default_rom1",
    @(settings->rom_plus2a_2), @"rom2",
    @(settings_default.rom_plus2a_2), @"default_rom2",
    @(settings->rom_plus2a_3), @"rom3",
    @(settings_default.rom_plus2a_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("plus3")], @"machine",
    @(settings->rom_plus3_0), @"rom0",
    @(settings_default.rom_plus3_0), @"default_rom0",
    @(settings->rom_plus3_1), @"rom1",
    @(settings_default.rom_plus3_1), @"default_rom1",
    @(settings->rom_plus3_2), @"rom2",
    @(settings_default.rom_plus3_2), @"default_rom2",
    @(settings->rom_plus3_3), @"rom3",
    @(settings_default.rom_plus3_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("plus3e")], @"machine",
    @(settings->rom_plus3e_0), @"rom0",
    @(settings_default.rom_plus3e_0), @"default_rom0",
    @(settings->rom_plus3e_1), @"rom1",
    @(settings_default.rom_plus3e_1), @"default_rom1",
    @(settings->rom_plus3e_2), @"rom2",
    @(settings_default.rom_plus3e_2), @"default_rom2",
    @(settings->rom_plus3e_3), @"rom3",
    @(settings_default.rom_plus3e_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("scorpion")], @"machine",
    @(settings->rom_scorpion_0), @"rom0",
    @(settings_default.rom_scorpion_0), @"default_rom0",
    @(settings->rom_scorpion_1), @"rom1",
    @(settings_default.rom_scorpion_1), @"default_rom1",
    @(settings->rom_scorpion_2), @"rom2",
    @(settings_default.rom_scorpion_2), @"default_rom2",
    @(settings->rom_scorpion_3), @"rom3",
    @(settings_default.rom_scorpion_3), @"default_rom3",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("se")], @"machine",
    @(settings->rom_se_0), @"rom0",
    @(settings_default.rom_se_0), @"default_rom0",
    @(settings->rom_se_1), @"rom1",
    @(settings_default.rom_se_1), @"default_rom1",
    NULL];
  [machineroms addObject:roms];

  roms = [NSMutableDictionary dictionaryWithObjectsAndKeys:
    [Machine machineForType:machine_get_type("ts2068")], @"machine",
    @(settings->rom_ts2068_0), @"rom0",
    @(settings_default.rom_ts2068_0), @"default_rom0",
    @(settings->rom_ts2068_1), @"rom1",
    @(settings_default.rom_ts2068_1), @"default_rom1",
    NULL];
  [machineroms addObject:roms];

  /* We assume that we got all machines in the array, this should always be
     true*/
  [machineroms sortUsingFunction:machineroms_compare context:nil];

  return machineroms;
}

/* Fill the settings structure from the supplied NSMutableArray as above */
void
settings_get_rom_array( settings_info *settings, NSArray *machineroms )
{
  NSMutableDictionary *roms;

  if ( machineroms == nil ) {
    return;
  }
  for ( roms in machineroms ) {
    int machineType = [[roms valueForKey:@"machine"] machineType];
    if( machineType == machine_get_type( "128" ) ) {
      settings_set_string( &settings->rom_128_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_128_1, [[roms valueForKey:@"rom1"] UTF8String] );
    } else if( machineType == machine_get_type( "16" ) ) {
      settings_set_string( &settings->rom_16_0, [[roms valueForKey:@"rom0"] UTF8String] );
    } else if( machineType == machine_get_type( "2048" ) ) {
      settings_set_string( &settings->rom_2048_0, [[roms valueForKey:@"rom0"] UTF8String] );
    } else if( machineType == machine_get_type( "2068" ) ) {
      settings_set_string( &settings->rom_2068_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_2068_1, [[roms valueForKey:@"rom1"] UTF8String] );
    } else if( machineType == machine_get_type( "48" ) ) {
      settings_set_string( &settings->rom_48_0, [[roms valueForKey:@"rom0"] UTF8String] );
    } else if( machineType == machine_get_type( "pentagon" ) ) {
      settings_set_string( &settings->rom_pentagon_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_pentagon_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_pentagon_2, [[roms valueForKey:@"rom2"] UTF8String] );
    } else if( machineType == machine_get_type( "pentagon1024" ) ) {
      settings_set_string( &settings->rom_pentagon1024_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_pentagon1024_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_pentagon1024_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_pentagon1024_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "pentagon512" ) ) {
      settings_set_string( &settings->rom_pentagon512_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_pentagon512_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_pentagon512_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_pentagon512_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "plus2" ) ) {
      settings_set_string( &settings->rom_plus2_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_plus2_1, [[roms valueForKey:@"rom1"] UTF8String] );
    } else if( machineType == machine_get_type( "plus2a" ) ) {
      settings_set_string( &settings->rom_plus2a_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_plus2a_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_plus2a_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_plus2a_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "plus3" ) ) {
      settings_set_string( &settings->rom_plus3_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_plus3_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_plus3_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_plus3_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "plus3e" ) ) {
      settings_set_string( &settings->rom_plus3e_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_plus3e_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_plus3e_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_plus3e_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "scorpion" ) ) {
      settings_set_string( &settings->rom_scorpion_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_scorpion_1, [[roms valueForKey:@"rom1"] UTF8String] );
      settings_set_string( &settings->rom_scorpion_2, [[roms valueForKey:@"rom2"] UTF8String] );
      settings_set_string( &settings->rom_scorpion_3, [[roms valueForKey:@"rom3"] UTF8String] );
    } else if( machineType == machine_get_type( "se" ) ) {
      settings_set_string( &settings->rom_se_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_se_1, [[roms valueForKey:@"rom1"] UTF8String] );
    } else if( machineType == machine_get_type( "ts2068" ) ) {
      settings_set_string( &settings->rom_ts2068_0, [[roms valueForKey:@"rom0"] UTF8String] );
      settings_set_string( &settings->rom_ts2068_1, [[roms valueForKey:@"rom1"] UTF8String] );
    }
  }
}

static void
settings_end( void )
{
  /* Unset settings, tape, cartidges etc. to prevent confusion */
  if( settings_current.snapshot ) free( settings_current.snapshot );
  settings_current.snapshot = NULL;
  if( settings_current.tape_file ) free( settings_current.tape_file );
  settings_current.tape_file = NULL;
  if( settings_current.playback_file ) free( settings_current.playback_file );
  settings_current.playback_file = NULL;
  if( settings_current.plus3disk_file ) free( settings_current.plus3disk_file );
  settings_current.plus3disk_file = NULL;
  if( settings_current.betadisk_file ) free( settings_current.betadisk_file );
  settings_current.betadisk_file = NULL;
  if( settings_current.dck_file ) free( settings_current.dck_file );
  settings_current.dck_file = NULL;
  if( settings_current.if2_file ) free( settings_current.if2_file );
  settings_current.if2_file = NULL;

  if( settings_current.autosave_settings )
    settings_write_config( &settings_current );

  settings_free( &settings_current );
}

void
settings_register_startup( void )
{
  /* settings_init not yet managed by the startup manager */

  startup_manager_module dependencies[] = {
  /* Fuse for OS X requires that settings_end is called before memory is
     deallocated as settings need to look up machine names etc */
    STARTUP_MANAGER_MODULE_MEMORY,
    /* STARTUP_MANAGER_MODULE_SETUID, */
  };
  startup_manager_register( STARTUP_MANAGER_MODULE_SETTINGS_END, dependencies,
                            ARRAY_SIZE( dependencies ), NULL, NULL,
                            settings_end );
}

