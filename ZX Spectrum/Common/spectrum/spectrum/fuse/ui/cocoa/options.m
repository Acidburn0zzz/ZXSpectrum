/* options.c: options dialog boxes
   Copyright (c) 2001-2004 Philip Kendall

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

   Author contact information:

   E-mail: philip-fuse@shadowmagic.org.uk

*/

/* This file is autogenerated from options.dat by options.pl.
   Do not edit unless you know what you're doing! */

#include "config.h"

#import <Foundation/NSArray.h>
#import <Foundation/NSString.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#import "options_cocoa.h"

#include "compat.h"
#include "fuse.h"
#include "options.h"
#include "settings.h"

static int
option_enumerate_combo( char **options, char *value, guint count, int def ) {
  int i;
  if( value != NULL ) {
    for( i = 0; i < count; i++) {
      if( !strcmp( value, options[ i ] ) )
        return i;
    }
  }
  return def;
}

static const char*
option_enumerate_combo_string( char **options, const char *value, guint count,
                               int def ) {
  int i;
  if( value != NULL ) {
    for( i = 0; i < count; i++) {
      if( !strcmp( value, options[ i ] ) )
        return options[ i ];
    }
  }
  return options[ def ];
}


static char * sound_stereo_ay_combo[] = {
  "None",
  "ACB",
  "ABC",
};

static const guint sound_stereo_ay_combo_count = 3;

NSArray *
cocoa_sound_stereo_ay( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(sound_stereo_ay_combo[0]),
              @(sound_stereo_ay_combo[1]),
              @(sound_stereo_ay_combo[2]),
              nil ];
  }

  return array;
}

int
option_enumerate_sound_stereo_ay( void ) {
  return option_enumerate_combo( sound_stereo_ay_combo,
				 settings_current.stereo_ay,
				 sound_stereo_ay_combo_count,
				 0 );
}

const char*
option_enumerate_string_sound_stereo_ay( const char* value ) {
  return option_enumerate_combo_string( sound_stereo_ay_combo,
                                        value,
                                        sound_stereo_ay_combo_count,
                                        0 );
}


static char * sound_speaker_type_combo[] = {
  "TV speaker",
  "Beeper",
  "Unfiltered",
};

static const guint sound_speaker_type_combo_count = 3;

NSArray *
cocoa_sound_speaker_type( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(sound_speaker_type_combo[0]),
              @(sound_speaker_type_combo[1]),
              @(sound_speaker_type_combo[2]),
              nil ];
  }

  return array;
}

int
option_enumerate_sound_speaker_type( void ) {
  return option_enumerate_combo( sound_speaker_type_combo,
				 settings_current.speaker_type,
				 sound_speaker_type_combo_count,
				 0 );
}

const char*
option_enumerate_string_sound_speaker_type( const char* value ) {
  return option_enumerate_combo_string( sound_speaker_type_combo,
                                        value,
                                        sound_speaker_type_combo_count,
                                        0 );
}


static char * diskoptions_drive_plus3a_type_combo[] = {
  "Single-sided 40 track",
  "Double-sided 40 track",
  "Single-sided 80 track",
  "Double-sided 80 track",
};

static const guint diskoptions_drive_plus3a_type_combo_count = 4;

NSArray *
cocoa_diskoptions_drive_plus3a_type( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(diskoptions_drive_plus3a_type_combo[0]),
              @(diskoptions_drive_plus3a_type_combo[1]),
              @(diskoptions_drive_plus3a_type_combo[2]),
              @(diskoptions_drive_plus3a_type_combo[3]),
              nil ];
  }

  return array;
}

int
option_enumerate_diskoptions_drive_plus3a_type( void ) {
  return option_enumerate_combo( diskoptions_drive_plus3a_type_combo,
				 settings_current.drive_plus3a_type,
				 diskoptions_drive_plus3a_type_combo_count,
				 0 );
}

const char*
option_enumerate_string_diskoptions_drive_plus3a_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_plus3a_type_combo,
                                        value,
                                        diskoptions_drive_plus3a_type_combo_count,
                                        0 );
}


static char * diskoptions_drive_plus3b_type_combo[] = {
  "Disabled",
  "Single-sided 40 track",
  "Double-sided 40 track",
  "Single-sided 80 track",
  "Double-sided 80 track",
};

static const guint diskoptions_drive_plus3b_type_combo_count = 5;

NSArray *
cocoa_diskoptions_drive_plus3b_type( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(diskoptions_drive_plus3b_type_combo[0]),
              @(diskoptions_drive_plus3b_type_combo[1]),
              @(diskoptions_drive_plus3b_type_combo[2]),
              @(diskoptions_drive_plus3b_type_combo[3]),
              @(diskoptions_drive_plus3b_type_combo[4]),
              nil ];
  }

  return array;
}

int
option_enumerate_diskoptions_drive_plus3b_type( void ) {
  return option_enumerate_combo( diskoptions_drive_plus3b_type_combo,
				 settings_current.drive_plus3b_type,
				 diskoptions_drive_plus3b_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_plus3b_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_plus3b_type_combo,
                                        value,
                                        diskoptions_drive_plus3b_type_combo_count,
                                        4 );
}

#define diskoptions_drive_beta128a_type_combo diskoptions_drive_plus3a_type_combo
#define diskoptions_drive_beta128a_type_combo_count diskoptions_drive_plus3a_type_combo_count

NSArray *
cocoa_diskoptions_drive_beta128a_type( void )
{
  return cocoa_diskoptions_drive_plus3a_type();
}

int
option_enumerate_diskoptions_drive_beta128a_type( void ) {
  return option_enumerate_combo( diskoptions_drive_beta128a_type_combo,
				 settings_current.drive_beta128a_type,
				 diskoptions_drive_beta128a_type_combo_count,
				 3 );
}

const char*
option_enumerate_string_diskoptions_drive_beta128a_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_beta128a_type_combo,
                                        value,
                                        diskoptions_drive_beta128a_type_combo_count,
                                        3 );
}

#define diskoptions_drive_beta128b_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_beta128b_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_beta128b_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_beta128b_type( void ) {
  return option_enumerate_combo( diskoptions_drive_beta128b_type_combo,
				 settings_current.drive_beta128b_type,
				 diskoptions_drive_beta128b_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_beta128b_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_beta128b_type_combo,
                                        value,
                                        diskoptions_drive_beta128b_type_combo_count,
                                        4 );
}

#define diskoptions_drive_beta128c_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_beta128c_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_beta128c_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_beta128c_type( void ) {
  return option_enumerate_combo( diskoptions_drive_beta128c_type_combo,
				 settings_current.drive_beta128c_type,
				 diskoptions_drive_beta128c_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_beta128c_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_beta128c_type_combo,
                                        value,
                                        diskoptions_drive_beta128c_type_combo_count,
                                        4 );
}

#define diskoptions_drive_beta128d_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_beta128d_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_beta128d_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_beta128d_type( void ) {
  return option_enumerate_combo( diskoptions_drive_beta128d_type_combo,
				 settings_current.drive_beta128d_type,
				 diskoptions_drive_beta128d_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_beta128d_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_beta128d_type_combo,
                                        value,
                                        diskoptions_drive_beta128d_type_combo_count,
                                        4 );
}

#define diskoptions_drive_plusd1_type_combo diskoptions_drive_plus3a_type_combo
#define diskoptions_drive_plusd1_type_combo_count diskoptions_drive_plus3a_type_combo_count

NSArray *
cocoa_diskoptions_drive_plusd1_type( void )
{
  return cocoa_diskoptions_drive_plus3a_type();
}

int
option_enumerate_diskoptions_drive_plusd1_type( void ) {
  return option_enumerate_combo( diskoptions_drive_plusd1_type_combo,
				 settings_current.drive_plusd1_type,
				 diskoptions_drive_plusd1_type_combo_count,
				 3 );
}

const char*
option_enumerate_string_diskoptions_drive_plusd1_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_plusd1_type_combo,
                                        value,
                                        diskoptions_drive_plusd1_type_combo_count,
                                        3 );
}

#define diskoptions_drive_plusd2_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_plusd2_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_plusd2_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_plusd2_type( void ) {
  return option_enumerate_combo( diskoptions_drive_plusd2_type_combo,
				 settings_current.drive_plusd2_type,
				 diskoptions_drive_plusd2_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_plusd2_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_plusd2_type_combo,
                                        value,
                                        diskoptions_drive_plusd2_type_combo_count,
                                        4 );
}

#define diskoptions_drive_didaktik80a_type_combo diskoptions_drive_plus3a_type_combo
#define diskoptions_drive_didaktik80a_type_combo_count diskoptions_drive_plus3a_type_combo_count

NSArray *
cocoa_diskoptions_drive_didaktik80a_type( void )
{
  return cocoa_diskoptions_drive_plus3a_type();
}

int
option_enumerate_diskoptions_drive_didaktik80a_type( void ) {
  return option_enumerate_combo( diskoptions_drive_didaktik80a_type_combo,
				 settings_current.drive_didaktik80a_type,
				 diskoptions_drive_didaktik80a_type_combo_count,
				 3 );
}

const char*
option_enumerate_string_diskoptions_drive_didaktik80a_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_didaktik80a_type_combo,
                                        value,
                                        diskoptions_drive_didaktik80a_type_combo_count,
                                        3 );
}

#define diskoptions_drive_didaktik80b_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_didaktik80b_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_didaktik80b_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_didaktik80b_type( void ) {
  return option_enumerate_combo( diskoptions_drive_didaktik80b_type_combo,
				 settings_current.drive_didaktik80b_type,
				 diskoptions_drive_didaktik80b_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_didaktik80b_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_didaktik80b_type_combo,
                                        value,
                                        diskoptions_drive_didaktik80b_type_combo_count,
                                        4 );
}

#define diskoptions_drive_disciple1_type_combo diskoptions_drive_plus3a_type_combo
#define diskoptions_drive_disciple1_type_combo_count diskoptions_drive_plus3a_type_combo_count

NSArray *
cocoa_diskoptions_drive_disciple1_type( void )
{
  return cocoa_diskoptions_drive_plus3a_type();
}

int
option_enumerate_diskoptions_drive_disciple1_type( void ) {
  return option_enumerate_combo( diskoptions_drive_disciple1_type_combo,
				 settings_current.drive_disciple1_type,
				 diskoptions_drive_disciple1_type_combo_count,
				 3 );
}

const char*
option_enumerate_string_diskoptions_drive_disciple1_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_disciple1_type_combo,
                                        value,
                                        diskoptions_drive_disciple1_type_combo_count,
                                        3 );
}

#define diskoptions_drive_disciple2_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_disciple2_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_disciple2_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_disciple2_type( void ) {
  return option_enumerate_combo( diskoptions_drive_disciple2_type_combo,
				 settings_current.drive_disciple2_type,
				 diskoptions_drive_disciple2_type_combo_count,
				 4 );
}

const char*
option_enumerate_string_diskoptions_drive_disciple2_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_disciple2_type_combo,
                                        value,
                                        diskoptions_drive_disciple2_type_combo_count,
                                        4 );
}

#define diskoptions_drive_opus1_type_combo diskoptions_drive_plus3a_type_combo
#define diskoptions_drive_opus1_type_combo_count diskoptions_drive_plus3a_type_combo_count

NSArray *
cocoa_diskoptions_drive_opus1_type( void )
{
  return cocoa_diskoptions_drive_plus3a_type();
}

int
option_enumerate_diskoptions_drive_opus1_type( void ) {
  return option_enumerate_combo( diskoptions_drive_opus1_type_combo,
				 settings_current.drive_opus1_type,
				 diskoptions_drive_opus1_type_combo_count,
				 0 );
}

const char*
option_enumerate_string_diskoptions_drive_opus1_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_opus1_type_combo,
                                        value,
                                        diskoptions_drive_opus1_type_combo_count,
                                        0 );
}

#define diskoptions_drive_opus2_type_combo diskoptions_drive_plus3b_type_combo
#define diskoptions_drive_opus2_type_combo_count diskoptions_drive_plus3b_type_combo_count

NSArray *
cocoa_diskoptions_drive_opus2_type( void )
{
  return cocoa_diskoptions_drive_plus3b_type();
}

int
option_enumerate_diskoptions_drive_opus2_type( void ) {
  return option_enumerate_combo( diskoptions_drive_opus2_type_combo,
				 settings_current.drive_opus2_type,
				 diskoptions_drive_opus2_type_combo_count,
				 1 );
}

const char*
option_enumerate_string_diskoptions_drive_opus2_type( const char* value ) {
  return option_enumerate_combo_string( diskoptions_drive_opus2_type_combo,
                                        value,
                                        diskoptions_drive_opus2_type_combo_count,
                                        1 );
}


static char * diskoptions_disk_try_merge_combo[] = {
  "Never",
  "With single-sided drives",
  "Always",
};

static const guint diskoptions_disk_try_merge_combo_count = 3;

NSArray *
cocoa_diskoptions_disk_try_merge( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(diskoptions_disk_try_merge_combo[0]),
              @(diskoptions_disk_try_merge_combo[1]),
              @(diskoptions_disk_try_merge_combo[2]),
              nil ];
  }

  return array;
}

int
option_enumerate_diskoptions_disk_try_merge( void ) {
  return option_enumerate_combo( diskoptions_disk_try_merge_combo,
				 settings_current.disk_try_merge,
				 diskoptions_disk_try_merge_combo_count,
				 1 );
}

const char*
option_enumerate_string_diskoptions_disk_try_merge( const char* value ) {
  return option_enumerate_combo_string( diskoptions_disk_try_merge_combo,
                                        value,
                                        diskoptions_disk_try_merge_combo_count,
                                        1 );
}


static char * movie_movie_compr_combo[] = {
  "None",
  "Lossless",
  "High",
};

static const guint movie_movie_compr_combo_count = 3;

NSArray *
cocoa_movie_movie_compr( void )
{
  static NSArray* array = nil;
  
  if( array == nil ) {
    array = [NSArray arrayWithObjects:
              @(movie_movie_compr_combo[0]),
              @(movie_movie_compr_combo[1]),
              @(movie_movie_compr_combo[2]),
              nil ];
  }

  return array;
}

int
option_enumerate_movie_movie_compr( void ) {
  return option_enumerate_combo( movie_movie_compr_combo,
				 settings_current.movie_compr,
				 movie_movie_compr_combo_count,
				 1 );
}

const char*
option_enumerate_string_movie_movie_compr( const char* value ) {
  return option_enumerate_combo_string( movie_movie_compr_combo,
                                        value,
                                        movie_movie_compr_combo_count,
                                        1 );
}


